/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DisplayAppliancePage
    /// </summary>
    [DataContract]
    public partial class DisplayAppliancePage :  IEquatable<DisplayAppliancePage>, IValidatableObject
    {
        public DisplayAppliancePage()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayAppliancePage" /> class.
        /// </summary>
        /// <param name="DocumentId">Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute..</param>
        /// <param name="DocumentName">.</param>
        /// <param name="ExternalDocumentId">.</param>
        /// <param name="Height">Height of the tab in pixels..</param>
        /// <param name="IsFirstPage">.</param>
        /// <param name="PageId">.</param>
        /// <param name="PageNo">.</param>
        /// <param name="PageStatus">.</param>
        /// <param name="PageType">.</param>
        /// <param name="Width">Width of the tab in pixels..</param>
        public DisplayAppliancePage(string DocumentId = default(string), string DocumentName = default(string), string ExternalDocumentId = default(string), int? Height = default(int?), bool? IsFirstPage = default(bool?), string PageId = default(string), int? PageNo = default(int?), string PageStatus = default(string), string PageType = default(string), int? Width = default(int?))
        {
            this.DocumentId = DocumentId;
            this.DocumentName = DocumentName;
            this.ExternalDocumentId = ExternalDocumentId;
            this.Height = Height;
            this.IsFirstPage = IsFirstPage;
            this.PageId = PageId;
            this.PageNo = PageNo;
            this.PageStatus = PageStatus;
            this.PageType = PageType;
            this.Width = Width;
        }
        
        /// <summary>
        /// Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.
        /// </summary>
        /// <value>Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="documentName", EmitDefaultValue=false)]
        public string DocumentName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="externalDocumentId", EmitDefaultValue=false)]
        public string ExternalDocumentId { get; set; }
        /// <summary>
        /// Height of the tab in pixels.
        /// </summary>
        /// <value>Height of the tab in pixels.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isFirstPage", EmitDefaultValue=false)]
        public bool? IsFirstPage { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pageId", EmitDefaultValue=false)]
        public string PageId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pageNo", EmitDefaultValue=false)]
        public int? PageNo { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pageStatus", EmitDefaultValue=false)]
        public string PageStatus { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pageType", EmitDefaultValue=false)]
        public string PageType { get; set; }
        /// <summary>
        /// Width of the tab in pixels.
        /// </summary>
        /// <value>Width of the tab in pixels.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisplayAppliancePage {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentName: ").Append(DocumentName).Append("\n");
            sb.Append("  ExternalDocumentId: ").Append(ExternalDocumentId).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  IsFirstPage: ").Append(IsFirstPage).Append("\n");
            sb.Append("  PageId: ").Append(PageId).Append("\n");
            sb.Append("  PageNo: ").Append(PageNo).Append("\n");
            sb.Append("  PageStatus: ").Append(PageStatus).Append("\n");
            sb.Append("  PageType: ").Append(PageType).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DisplayAppliancePage);
        }

        /// <summary>
        /// Returns true if DisplayAppliancePage instances are equal
        /// </summary>
        /// <param name="other">Instance of DisplayAppliancePage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplayAppliancePage other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    this.DocumentName == other.DocumentName ||
                    this.DocumentName != null &&
                    this.DocumentName.Equals(other.DocumentName)
                ) && 
                (
                    this.ExternalDocumentId == other.ExternalDocumentId ||
                    this.ExternalDocumentId != null &&
                    this.ExternalDocumentId.Equals(other.ExternalDocumentId)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.IsFirstPage == other.IsFirstPage ||
                    this.IsFirstPage != null &&
                    this.IsFirstPage.Equals(other.IsFirstPage)
                ) && 
                (
                    this.PageId == other.PageId ||
                    this.PageId != null &&
                    this.PageId.Equals(other.PageId)
                ) && 
                (
                    this.PageNo == other.PageNo ||
                    this.PageNo != null &&
                    this.PageNo.Equals(other.PageNo)
                ) && 
                (
                    this.PageStatus == other.PageStatus ||
                    this.PageStatus != null &&
                    this.PageStatus.Equals(other.PageStatus)
                ) && 
                (
                    this.PageType == other.PageType ||
                    this.PageType != null &&
                    this.PageType.Equals(other.PageType)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentName != null)
                    hash = hash * 59 + this.DocumentName.GetHashCode();
                if (this.ExternalDocumentId != null)
                    hash = hash * 59 + this.ExternalDocumentId.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.IsFirstPage != null)
                    hash = hash * 59 + this.IsFirstPage.GetHashCode();
                if (this.PageId != null)
                    hash = hash * 59 + this.PageId.GetHashCode();
                if (this.PageNo != null)
                    hash = hash * 59 + this.PageNo.GetHashCode();
                if (this.PageStatus != null)
                    hash = hash * 59 + this.PageStatus.GetHashCode();
                if (this.PageType != null)
                    hash = hash * 59 + this.PageType.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
