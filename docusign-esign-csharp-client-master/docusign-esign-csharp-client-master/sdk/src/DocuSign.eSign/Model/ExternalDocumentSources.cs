/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ExternalDocumentSources
    /// </summary>
    [DataContract]
    public partial class ExternalDocumentSources :  IEquatable<ExternalDocumentSources>, IValidatableObject
    {
        public ExternalDocumentSources()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalDocumentSources" /> class.
        /// </summary>
        /// <param name="BoxnetEnabled">BoxnetEnabled.</param>
        /// <param name="BoxnetMetadata">BoxnetMetadata.</param>
        /// <param name="DropboxEnabled">DropboxEnabled.</param>
        /// <param name="DropboxMetadata">DropboxMetadata.</param>
        /// <param name="GoogleDriveEnabled">GoogleDriveEnabled.</param>
        /// <param name="GoogleDriveMetadata">GoogleDriveMetadata.</param>
        /// <param name="OneDriveEnabled">OneDriveEnabled.</param>
        /// <param name="OneDriveMetadata">OneDriveMetadata.</param>
        /// <param name="SalesforceEnabled">SalesforceEnabled.</param>
        /// <param name="SalesforceMetadata">SalesforceMetadata.</param>
        public ExternalDocumentSources(string BoxnetEnabled = default(string), SettingsMetadata BoxnetMetadata = default(SettingsMetadata), string DropboxEnabled = default(string), SettingsMetadata DropboxMetadata = default(SettingsMetadata), string GoogleDriveEnabled = default(string), SettingsMetadata GoogleDriveMetadata = default(SettingsMetadata), string OneDriveEnabled = default(string), SettingsMetadata OneDriveMetadata = default(SettingsMetadata), string SalesforceEnabled = default(string), SettingsMetadata SalesforceMetadata = default(SettingsMetadata))
        {
            this.BoxnetEnabled = BoxnetEnabled;
            this.BoxnetMetadata = BoxnetMetadata;
            this.DropboxEnabled = DropboxEnabled;
            this.DropboxMetadata = DropboxMetadata;
            this.GoogleDriveEnabled = GoogleDriveEnabled;
            this.GoogleDriveMetadata = GoogleDriveMetadata;
            this.OneDriveEnabled = OneDriveEnabled;
            this.OneDriveMetadata = OneDriveMetadata;
            this.SalesforceEnabled = SalesforceEnabled;
            this.SalesforceMetadata = SalesforceMetadata;
        }
        
        /// <summary>
        /// Gets or Sets BoxnetEnabled
        /// </summary>
        [DataMember(Name="boxnetEnabled", EmitDefaultValue=false)]
        public string BoxnetEnabled { get; set; }
        /// <summary>
        /// Gets or Sets BoxnetMetadata
        /// </summary>
        [DataMember(Name="boxnetMetadata", EmitDefaultValue=false)]
        public SettingsMetadata BoxnetMetadata { get; set; }
        /// <summary>
        /// Gets or Sets DropboxEnabled
        /// </summary>
        [DataMember(Name="dropboxEnabled", EmitDefaultValue=false)]
        public string DropboxEnabled { get; set; }
        /// <summary>
        /// Gets or Sets DropboxMetadata
        /// </summary>
        [DataMember(Name="dropboxMetadata", EmitDefaultValue=false)]
        public SettingsMetadata DropboxMetadata { get; set; }
        /// <summary>
        /// Gets or Sets GoogleDriveEnabled
        /// </summary>
        [DataMember(Name="googleDriveEnabled", EmitDefaultValue=false)]
        public string GoogleDriveEnabled { get; set; }
        /// <summary>
        /// Gets or Sets GoogleDriveMetadata
        /// </summary>
        [DataMember(Name="googleDriveMetadata", EmitDefaultValue=false)]
        public SettingsMetadata GoogleDriveMetadata { get; set; }
        /// <summary>
        /// Gets or Sets OneDriveEnabled
        /// </summary>
        [DataMember(Name="oneDriveEnabled", EmitDefaultValue=false)]
        public string OneDriveEnabled { get; set; }
        /// <summary>
        /// Gets or Sets OneDriveMetadata
        /// </summary>
        [DataMember(Name="oneDriveMetadata", EmitDefaultValue=false)]
        public SettingsMetadata OneDriveMetadata { get; set; }
        /// <summary>
        /// Gets or Sets SalesforceEnabled
        /// </summary>
        [DataMember(Name="salesforceEnabled", EmitDefaultValue=false)]
        public string SalesforceEnabled { get; set; }
        /// <summary>
        /// Gets or Sets SalesforceMetadata
        /// </summary>
        [DataMember(Name="salesforceMetadata", EmitDefaultValue=false)]
        public SettingsMetadata SalesforceMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalDocumentSources {\n");
            sb.Append("  BoxnetEnabled: ").Append(BoxnetEnabled).Append("\n");
            sb.Append("  BoxnetMetadata: ").Append(BoxnetMetadata).Append("\n");
            sb.Append("  DropboxEnabled: ").Append(DropboxEnabled).Append("\n");
            sb.Append("  DropboxMetadata: ").Append(DropboxMetadata).Append("\n");
            sb.Append("  GoogleDriveEnabled: ").Append(GoogleDriveEnabled).Append("\n");
            sb.Append("  GoogleDriveMetadata: ").Append(GoogleDriveMetadata).Append("\n");
            sb.Append("  OneDriveEnabled: ").Append(OneDriveEnabled).Append("\n");
            sb.Append("  OneDriveMetadata: ").Append(OneDriveMetadata).Append("\n");
            sb.Append("  SalesforceEnabled: ").Append(SalesforceEnabled).Append("\n");
            sb.Append("  SalesforceMetadata: ").Append(SalesforceMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExternalDocumentSources);
        }

        /// <summary>
        /// Returns true if ExternalDocumentSources instances are equal
        /// </summary>
        /// <param name="other">Instance of ExternalDocumentSources to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalDocumentSources other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BoxnetEnabled == other.BoxnetEnabled ||
                    this.BoxnetEnabled != null &&
                    this.BoxnetEnabled.Equals(other.BoxnetEnabled)
                ) && 
                (
                    this.BoxnetMetadata == other.BoxnetMetadata ||
                    this.BoxnetMetadata != null &&
                    this.BoxnetMetadata.Equals(other.BoxnetMetadata)
                ) && 
                (
                    this.DropboxEnabled == other.DropboxEnabled ||
                    this.DropboxEnabled != null &&
                    this.DropboxEnabled.Equals(other.DropboxEnabled)
                ) && 
                (
                    this.DropboxMetadata == other.DropboxMetadata ||
                    this.DropboxMetadata != null &&
                    this.DropboxMetadata.Equals(other.DropboxMetadata)
                ) && 
                (
                    this.GoogleDriveEnabled == other.GoogleDriveEnabled ||
                    this.GoogleDriveEnabled != null &&
                    this.GoogleDriveEnabled.Equals(other.GoogleDriveEnabled)
                ) && 
                (
                    this.GoogleDriveMetadata == other.GoogleDriveMetadata ||
                    this.GoogleDriveMetadata != null &&
                    this.GoogleDriveMetadata.Equals(other.GoogleDriveMetadata)
                ) && 
                (
                    this.OneDriveEnabled == other.OneDriveEnabled ||
                    this.OneDriveEnabled != null &&
                    this.OneDriveEnabled.Equals(other.OneDriveEnabled)
                ) && 
                (
                    this.OneDriveMetadata == other.OneDriveMetadata ||
                    this.OneDriveMetadata != null &&
                    this.OneDriveMetadata.Equals(other.OneDriveMetadata)
                ) && 
                (
                    this.SalesforceEnabled == other.SalesforceEnabled ||
                    this.SalesforceEnabled != null &&
                    this.SalesforceEnabled.Equals(other.SalesforceEnabled)
                ) && 
                (
                    this.SalesforceMetadata == other.SalesforceMetadata ||
                    this.SalesforceMetadata != null &&
                    this.SalesforceMetadata.Equals(other.SalesforceMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BoxnetEnabled != null)
                    hash = hash * 59 + this.BoxnetEnabled.GetHashCode();
                if (this.BoxnetMetadata != null)
                    hash = hash * 59 + this.BoxnetMetadata.GetHashCode();
                if (this.DropboxEnabled != null)
                    hash = hash * 59 + this.DropboxEnabled.GetHashCode();
                if (this.DropboxMetadata != null)
                    hash = hash * 59 + this.DropboxMetadata.GetHashCode();
                if (this.GoogleDriveEnabled != null)
                    hash = hash * 59 + this.GoogleDriveEnabled.GetHashCode();
                if (this.GoogleDriveMetadata != null)
                    hash = hash * 59 + this.GoogleDriveMetadata.GetHashCode();
                if (this.OneDriveEnabled != null)
                    hash = hash * 59 + this.OneDriveEnabled.GetHashCode();
                if (this.OneDriveMetadata != null)
                    hash = hash * 59 + this.OneDriveMetadata.GetHashCode();
                if (this.SalesforceEnabled != null)
                    hash = hash * 59 + this.SalesforceEnabled.GetHashCode();
                if (this.SalesforceMetadata != null)
                    hash = hash * 59 + this.SalesforceMetadata.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
