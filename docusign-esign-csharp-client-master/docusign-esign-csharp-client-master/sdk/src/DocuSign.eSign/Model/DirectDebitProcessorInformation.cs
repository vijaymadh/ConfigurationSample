/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DirectDebitProcessorInformation
    /// </summary>
    [DataContract]
    public partial class DirectDebitProcessorInformation :  IEquatable<DirectDebitProcessorInformation>, IValidatableObject
    {
        public DirectDebitProcessorInformation()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectDebitProcessorInformation" /> class.
        /// </summary>
        /// <param name="BankBranchCode">BankBranchCode.</param>
        /// <param name="BankCheckDigit">BankCheckDigit.</param>
        /// <param name="BankCode">BankCode.</param>
        /// <param name="BankName">BankName.</param>
        /// <param name="BankTransferAccountName">BankTransferAccountName.</param>
        /// <param name="BankTransferAccountNumber">BankTransferAccountNumber.</param>
        /// <param name="BankTransferType">BankTransferType.</param>
        /// <param name="Country">Specifies the country associated with the address..</param>
        /// <param name="Email">Email.</param>
        /// <param name="FirstName">The user&#39;s first name.  Maximum Length: 50 characters..</param>
        /// <param name="IBAN">IBAN.</param>
        /// <param name="LastName">LastName.</param>
        public DirectDebitProcessorInformation(string BankBranchCode = default(string), string BankCheckDigit = default(string), string BankCode = default(string), string BankName = default(string), string BankTransferAccountName = default(string), string BankTransferAccountNumber = default(string), string BankTransferType = default(string), string Country = default(string), string Email = default(string), string FirstName = default(string), string IBAN = default(string), string LastName = default(string))
        {
            this.BankBranchCode = BankBranchCode;
            this.BankCheckDigit = BankCheckDigit;
            this.BankCode = BankCode;
            this.BankName = BankName;
            this.BankTransferAccountName = BankTransferAccountName;
            this.BankTransferAccountNumber = BankTransferAccountNumber;
            this.BankTransferType = BankTransferType;
            this.Country = Country;
            this.Email = Email;
            this.FirstName = FirstName;
            this.IBAN = IBAN;
            this.LastName = LastName;
        }
        
        /// <summary>
        /// Gets or Sets BankBranchCode
        /// </summary>
        [DataMember(Name="bankBranchCode", EmitDefaultValue=false)]
        public string BankBranchCode { get; set; }
        /// <summary>
        /// Gets or Sets BankCheckDigit
        /// </summary>
        [DataMember(Name="bankCheckDigit", EmitDefaultValue=false)]
        public string BankCheckDigit { get; set; }
        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [DataMember(Name="bankCode", EmitDefaultValue=false)]
        public string BankCode { get; set; }
        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }
        /// <summary>
        /// Gets or Sets BankTransferAccountName
        /// </summary>
        [DataMember(Name="bankTransferAccountName", EmitDefaultValue=false)]
        public string BankTransferAccountName { get; set; }
        /// <summary>
        /// Gets or Sets BankTransferAccountNumber
        /// </summary>
        [DataMember(Name="bankTransferAccountNumber", EmitDefaultValue=false)]
        public string BankTransferAccountNumber { get; set; }
        /// <summary>
        /// Gets or Sets BankTransferType
        /// </summary>
        [DataMember(Name="bankTransferType", EmitDefaultValue=false)]
        public string BankTransferType { get; set; }
        /// <summary>
        /// Specifies the country associated with the address.
        /// </summary>
        /// <value>Specifies the country associated with the address.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The user&#39;s first name.  Maximum Length: 50 characters.
        /// </summary>
        /// <value>The user&#39;s first name.  Maximum Length: 50 characters.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets IBAN
        /// </summary>
        [DataMember(Name="iBAN", EmitDefaultValue=false)]
        public string IBAN { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirectDebitProcessorInformation {\n");
            sb.Append("  BankBranchCode: ").Append(BankBranchCode).Append("\n");
            sb.Append("  BankCheckDigit: ").Append(BankCheckDigit).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankTransferAccountName: ").Append(BankTransferAccountName).Append("\n");
            sb.Append("  BankTransferAccountNumber: ").Append(BankTransferAccountNumber).Append("\n");
            sb.Append("  BankTransferType: ").Append(BankTransferType).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  IBAN: ").Append(IBAN).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DirectDebitProcessorInformation);
        }

        /// <summary>
        /// Returns true if DirectDebitProcessorInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of DirectDebitProcessorInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectDebitProcessorInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BankBranchCode == other.BankBranchCode ||
                    this.BankBranchCode != null &&
                    this.BankBranchCode.Equals(other.BankBranchCode)
                ) && 
                (
                    this.BankCheckDigit == other.BankCheckDigit ||
                    this.BankCheckDigit != null &&
                    this.BankCheckDigit.Equals(other.BankCheckDigit)
                ) && 
                (
                    this.BankCode == other.BankCode ||
                    this.BankCode != null &&
                    this.BankCode.Equals(other.BankCode)
                ) && 
                (
                    this.BankName == other.BankName ||
                    this.BankName != null &&
                    this.BankName.Equals(other.BankName)
                ) && 
                (
                    this.BankTransferAccountName == other.BankTransferAccountName ||
                    this.BankTransferAccountName != null &&
                    this.BankTransferAccountName.Equals(other.BankTransferAccountName)
                ) && 
                (
                    this.BankTransferAccountNumber == other.BankTransferAccountNumber ||
                    this.BankTransferAccountNumber != null &&
                    this.BankTransferAccountNumber.Equals(other.BankTransferAccountNumber)
                ) && 
                (
                    this.BankTransferType == other.BankTransferType ||
                    this.BankTransferType != null &&
                    this.BankTransferType.Equals(other.BankTransferType)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.IBAN == other.IBAN ||
                    this.IBAN != null &&
                    this.IBAN.Equals(other.IBAN)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BankBranchCode != null)
                    hash = hash * 59 + this.BankBranchCode.GetHashCode();
                if (this.BankCheckDigit != null)
                    hash = hash * 59 + this.BankCheckDigit.GetHashCode();
                if (this.BankCode != null)
                    hash = hash * 59 + this.BankCode.GetHashCode();
                if (this.BankName != null)
                    hash = hash * 59 + this.BankName.GetHashCode();
                if (this.BankTransferAccountName != null)
                    hash = hash * 59 + this.BankTransferAccountName.GetHashCode();
                if (this.BankTransferAccountNumber != null)
                    hash = hash * 59 + this.BankTransferAccountNumber.GetHashCode();
                if (this.BankTransferType != null)
                    hash = hash * 59 + this.BankTransferType.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.IBAN != null)
                    hash = hash * 59 + this.IBAN.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
