/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// FormDataItem
    /// </summary>
    [DataContract]
    public partial class FormDataItem :  IEquatable<FormDataItem>, IValidatableObject
    {
        public FormDataItem()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormDataItem" /> class.
        /// </summary>
        /// <param name="ErrorDetails">ErrorDetails.</param>
        /// <param name="ListSelectedValue">ListSelectedValue.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NumericalValue">NumericalValue.</param>
        /// <param name="OriginalValue">The initial value of the tab when it was sent to the recipient. .</param>
        /// <param name="Value">Specifies the value of the tab. .</param>
        public FormDataItem(ErrorDetails ErrorDetails = default(ErrorDetails), string ListSelectedValue = default(string), string Name = default(string), string NumericalValue = default(string), string OriginalValue = default(string), string Value = default(string))
        {
            this.ErrorDetails = ErrorDetails;
            this.ListSelectedValue = ListSelectedValue;
            this.Name = Name;
            this.NumericalValue = NumericalValue;
            this.OriginalValue = OriginalValue;
            this.Value = Value;
        }
        
        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// Gets or Sets ListSelectedValue
        /// </summary>
        [DataMember(Name="listSelectedValue", EmitDefaultValue=false)]
        public string ListSelectedValue { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets NumericalValue
        /// </summary>
        [DataMember(Name="numericalValue", EmitDefaultValue=false)]
        public string NumericalValue { get; set; }
        /// <summary>
        /// The initial value of the tab when it was sent to the recipient. 
        /// </summary>
        /// <value>The initial value of the tab when it was sent to the recipient. </value>
        [DataMember(Name="originalValue", EmitDefaultValue=false)]
        public string OriginalValue { get; set; }
        /// <summary>
        /// Specifies the value of the tab. 
        /// </summary>
        /// <value>Specifies the value of the tab. </value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormDataItem {\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  ListSelectedValue: ").Append(ListSelectedValue).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumericalValue: ").Append(NumericalValue).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FormDataItem);
        }

        /// <summary>
        /// Returns true if FormDataItem instances are equal
        /// </summary>
        /// <param name="other">Instance of FormDataItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormDataItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.ListSelectedValue == other.ListSelectedValue ||
                    this.ListSelectedValue != null &&
                    this.ListSelectedValue.Equals(other.ListSelectedValue)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NumericalValue == other.NumericalValue ||
                    this.NumericalValue != null &&
                    this.NumericalValue.Equals(other.NumericalValue)
                ) && 
                (
                    this.OriginalValue == other.OriginalValue ||
                    this.OriginalValue != null &&
                    this.OriginalValue.Equals(other.OriginalValue)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.ListSelectedValue != null)
                    hash = hash * 59 + this.ListSelectedValue.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NumericalValue != null)
                    hash = hash * 59 + this.NumericalValue.GetHashCode();
                if (this.OriginalValue != null)
                    hash = hash * 59 + this.OriginalValue.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
