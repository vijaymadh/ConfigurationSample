/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ReportInProductCsvRunRequest
    /// </summary>
    [DataContract]
    public partial class ReportInProductCsvRunRequest :  IEquatable<ReportInProductCsvRunRequest>, IValidatableObject
    {
        public ReportInProductCsvRunRequest()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInProductCsvRunRequest" /> class.
        /// </summary>
        /// <param name="AuthenticationSuccessFilter">AuthenticationSuccessFilter.</param>
        /// <param name="CustomFieldFilter">CustomFieldFilter.</param>
        /// <param name="DateRangeCustomFromDate">DateRangeCustomFromDate.</param>
        /// <param name="DateRangeCustomToDate">DateRangeCustomToDate.</param>
        /// <param name="DateRangeFilter">DateRangeFilter.</param>
        /// <param name="EnvelopeDateTypeFilter">EnvelopeDateTypeFilter.</param>
        /// <param name="EnvelopeRecipientNameContainsFilter">EnvelopeRecipientNameContainsFilter.</param>
        /// <param name="EnvelopeStatusFilter">EnvelopeStatusFilter.</param>
        /// <param name="EnvelopeSubjectContainsFilter">EnvelopeSubjectContainsFilter.</param>
        /// <param name="Fields">Fields.</param>
        /// <param name="ForDownload">ForDownload.</param>
        /// <param name="IsDashboard">IsDashboard.</param>
        /// <param name="NewLine">NewLine.</param>
        /// <param name="OverrideTimezoneKey">OverrideTimezoneKey.</param>
        /// <param name="PeriodLengthFilter">PeriodLengthFilter.</param>
        /// <param name="Quote">Quote.</param>
        /// <param name="ReportCustomizedId">ReportCustomizedId.</param>
        /// <param name="ReportDescription">ReportDescription.</param>
        /// <param name="ReportId">ReportId.</param>
        /// <param name="ReportInvocationType">ReportInvocationType.</param>
        /// <param name="ReportName">ReportName.</param>
        /// <param name="SentByFilter">SentByFilter.</param>
        /// <param name="SentByIds">SentByIds.</param>
        /// <param name="Separator">Separator.</param>
        /// <param name="SortDirection">SortDirection.</param>
        /// <param name="SortField">SortField.</param>
        /// <param name="StartPosition">Starting position of the current result set..</param>
        /// <param name="VerificationStatusFilter">VerificationStatusFilter.</param>
        public ReportInProductCsvRunRequest(string AuthenticationSuccessFilter = default(string), string CustomFieldFilter = default(string), string DateRangeCustomFromDate = default(string), string DateRangeCustomToDate = default(string), string DateRangeFilter = default(string), string EnvelopeDateTypeFilter = default(string), string EnvelopeRecipientNameContainsFilter = default(string), string EnvelopeStatusFilter = default(string), string EnvelopeSubjectContainsFilter = default(string), List<ReportInProductField> Fields = default(List<ReportInProductField>), string ForDownload = default(string), string IsDashboard = default(string), string NewLine = default(string), string OverrideTimezoneKey = default(string), string PeriodLengthFilter = default(string), string Quote = default(string), string ReportCustomizedId = default(string), string ReportDescription = default(string), string ReportId = default(string), string ReportInvocationType = default(string), string ReportName = default(string), string SentByFilter = default(string), string SentByIds = default(string), string Separator = default(string), string SortDirection = default(string), string SortField = default(string), string StartPosition = default(string), string VerificationStatusFilter = default(string))
        {
            this.AuthenticationSuccessFilter = AuthenticationSuccessFilter;
            this.CustomFieldFilter = CustomFieldFilter;
            this.DateRangeCustomFromDate = DateRangeCustomFromDate;
            this.DateRangeCustomToDate = DateRangeCustomToDate;
            this.DateRangeFilter = DateRangeFilter;
            this.EnvelopeDateTypeFilter = EnvelopeDateTypeFilter;
            this.EnvelopeRecipientNameContainsFilter = EnvelopeRecipientNameContainsFilter;
            this.EnvelopeStatusFilter = EnvelopeStatusFilter;
            this.EnvelopeSubjectContainsFilter = EnvelopeSubjectContainsFilter;
            this.Fields = Fields;
            this.ForDownload = ForDownload;
            this.IsDashboard = IsDashboard;
            this.NewLine = NewLine;
            this.OverrideTimezoneKey = OverrideTimezoneKey;
            this.PeriodLengthFilter = PeriodLengthFilter;
            this.Quote = Quote;
            this.ReportCustomizedId = ReportCustomizedId;
            this.ReportDescription = ReportDescription;
            this.ReportId = ReportId;
            this.ReportInvocationType = ReportInvocationType;
            this.ReportName = ReportName;
            this.SentByFilter = SentByFilter;
            this.SentByIds = SentByIds;
            this.Separator = Separator;
            this.SortDirection = SortDirection;
            this.SortField = SortField;
            this.StartPosition = StartPosition;
            this.VerificationStatusFilter = VerificationStatusFilter;
        }
        
        /// <summary>
        /// Gets or Sets AuthenticationSuccessFilter
        /// </summary>
        [DataMember(Name="authenticationSuccessFilter", EmitDefaultValue=false)]
        public string AuthenticationSuccessFilter { get; set; }
        /// <summary>
        /// Gets or Sets CustomFieldFilter
        /// </summary>
        [DataMember(Name="customFieldFilter", EmitDefaultValue=false)]
        public string CustomFieldFilter { get; set; }
        /// <summary>
        /// Gets or Sets DateRangeCustomFromDate
        /// </summary>
        [DataMember(Name="dateRangeCustomFromDate", EmitDefaultValue=false)]
        public string DateRangeCustomFromDate { get; set; }
        /// <summary>
        /// Gets or Sets DateRangeCustomToDate
        /// </summary>
        [DataMember(Name="dateRangeCustomToDate", EmitDefaultValue=false)]
        public string DateRangeCustomToDate { get; set; }
        /// <summary>
        /// Gets or Sets DateRangeFilter
        /// </summary>
        [DataMember(Name="dateRangeFilter", EmitDefaultValue=false)]
        public string DateRangeFilter { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeDateTypeFilter
        /// </summary>
        [DataMember(Name="envelopeDateTypeFilter", EmitDefaultValue=false)]
        public string EnvelopeDateTypeFilter { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeRecipientNameContainsFilter
        /// </summary>
        [DataMember(Name="envelopeRecipientNameContainsFilter", EmitDefaultValue=false)]
        public string EnvelopeRecipientNameContainsFilter { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeStatusFilter
        /// </summary>
        [DataMember(Name="envelopeStatusFilter", EmitDefaultValue=false)]
        public string EnvelopeStatusFilter { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeSubjectContainsFilter
        /// </summary>
        [DataMember(Name="envelopeSubjectContainsFilter", EmitDefaultValue=false)]
        public string EnvelopeSubjectContainsFilter { get; set; }
        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<ReportInProductField> Fields { get; set; }
        /// <summary>
        /// Gets or Sets ForDownload
        /// </summary>
        [DataMember(Name="forDownload", EmitDefaultValue=false)]
        public string ForDownload { get; set; }
        /// <summary>
        /// Gets or Sets IsDashboard
        /// </summary>
        [DataMember(Name="isDashboard", EmitDefaultValue=false)]
        public string IsDashboard { get; set; }
        /// <summary>
        /// Gets or Sets NewLine
        /// </summary>
        [DataMember(Name="newLine", EmitDefaultValue=false)]
        public string NewLine { get; set; }
        /// <summary>
        /// Gets or Sets OverrideTimezoneKey
        /// </summary>
        [DataMember(Name="overrideTimezoneKey", EmitDefaultValue=false)]
        public string OverrideTimezoneKey { get; set; }
        /// <summary>
        /// Gets or Sets PeriodLengthFilter
        /// </summary>
        [DataMember(Name="periodLengthFilter", EmitDefaultValue=false)]
        public string PeriodLengthFilter { get; set; }
        /// <summary>
        /// Gets or Sets Quote
        /// </summary>
        [DataMember(Name="quote", EmitDefaultValue=false)]
        public string Quote { get; set; }
        /// <summary>
        /// Gets or Sets ReportCustomizedId
        /// </summary>
        [DataMember(Name="reportCustomizedId", EmitDefaultValue=false)]
        public string ReportCustomizedId { get; set; }
        /// <summary>
        /// Gets or Sets ReportDescription
        /// </summary>
        [DataMember(Name="reportDescription", EmitDefaultValue=false)]
        public string ReportDescription { get; set; }
        /// <summary>
        /// Gets or Sets ReportId
        /// </summary>
        [DataMember(Name="reportId", EmitDefaultValue=false)]
        public string ReportId { get; set; }
        /// <summary>
        /// Gets or Sets ReportInvocationType
        /// </summary>
        [DataMember(Name="reportInvocationType", EmitDefaultValue=false)]
        public string ReportInvocationType { get; set; }
        /// <summary>
        /// Gets or Sets ReportName
        /// </summary>
        [DataMember(Name="reportName", EmitDefaultValue=false)]
        public string ReportName { get; set; }
        /// <summary>
        /// Gets or Sets SentByFilter
        /// </summary>
        [DataMember(Name="sentByFilter", EmitDefaultValue=false)]
        public string SentByFilter { get; set; }
        /// <summary>
        /// Gets or Sets SentByIds
        /// </summary>
        [DataMember(Name="sentByIds", EmitDefaultValue=false)]
        public string SentByIds { get; set; }
        /// <summary>
        /// Gets or Sets Separator
        /// </summary>
        [DataMember(Name="separator", EmitDefaultValue=false)]
        public string Separator { get; set; }
        /// <summary>
        /// Gets or Sets SortDirection
        /// </summary>
        [DataMember(Name="sortDirection", EmitDefaultValue=false)]
        public string SortDirection { get; set; }
        /// <summary>
        /// Gets or Sets SortField
        /// </summary>
        [DataMember(Name="sortField", EmitDefaultValue=false)]
        public string SortField { get; set; }
        /// <summary>
        /// Starting position of the current result set.
        /// </summary>
        /// <value>Starting position of the current result set.</value>
        [DataMember(Name="startPosition", EmitDefaultValue=false)]
        public string StartPosition { get; set; }
        /// <summary>
        /// Gets or Sets VerificationStatusFilter
        /// </summary>
        [DataMember(Name="verificationStatusFilter", EmitDefaultValue=false)]
        public string VerificationStatusFilter { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportInProductCsvRunRequest {\n");
            sb.Append("  AuthenticationSuccessFilter: ").Append(AuthenticationSuccessFilter).Append("\n");
            sb.Append("  CustomFieldFilter: ").Append(CustomFieldFilter).Append("\n");
            sb.Append("  DateRangeCustomFromDate: ").Append(DateRangeCustomFromDate).Append("\n");
            sb.Append("  DateRangeCustomToDate: ").Append(DateRangeCustomToDate).Append("\n");
            sb.Append("  DateRangeFilter: ").Append(DateRangeFilter).Append("\n");
            sb.Append("  EnvelopeDateTypeFilter: ").Append(EnvelopeDateTypeFilter).Append("\n");
            sb.Append("  EnvelopeRecipientNameContainsFilter: ").Append(EnvelopeRecipientNameContainsFilter).Append("\n");
            sb.Append("  EnvelopeStatusFilter: ").Append(EnvelopeStatusFilter).Append("\n");
            sb.Append("  EnvelopeSubjectContainsFilter: ").Append(EnvelopeSubjectContainsFilter).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  ForDownload: ").Append(ForDownload).Append("\n");
            sb.Append("  IsDashboard: ").Append(IsDashboard).Append("\n");
            sb.Append("  NewLine: ").Append(NewLine).Append("\n");
            sb.Append("  OverrideTimezoneKey: ").Append(OverrideTimezoneKey).Append("\n");
            sb.Append("  PeriodLengthFilter: ").Append(PeriodLengthFilter).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("  ReportCustomizedId: ").Append(ReportCustomizedId).Append("\n");
            sb.Append("  ReportDescription: ").Append(ReportDescription).Append("\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  ReportInvocationType: ").Append(ReportInvocationType).Append("\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  SentByFilter: ").Append(SentByFilter).Append("\n");
            sb.Append("  SentByIds: ").Append(SentByIds).Append("\n");
            sb.Append("  Separator: ").Append(Separator).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  SortField: ").Append(SortField).Append("\n");
            sb.Append("  StartPosition: ").Append(StartPosition).Append("\n");
            sb.Append("  VerificationStatusFilter: ").Append(VerificationStatusFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportInProductCsvRunRequest);
        }

        /// <summary>
        /// Returns true if ReportInProductCsvRunRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportInProductCsvRunRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportInProductCsvRunRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AuthenticationSuccessFilter == other.AuthenticationSuccessFilter ||
                    this.AuthenticationSuccessFilter != null &&
                    this.AuthenticationSuccessFilter.Equals(other.AuthenticationSuccessFilter)
                ) && 
                (
                    this.CustomFieldFilter == other.CustomFieldFilter ||
                    this.CustomFieldFilter != null &&
                    this.CustomFieldFilter.Equals(other.CustomFieldFilter)
                ) && 
                (
                    this.DateRangeCustomFromDate == other.DateRangeCustomFromDate ||
                    this.DateRangeCustomFromDate != null &&
                    this.DateRangeCustomFromDate.Equals(other.DateRangeCustomFromDate)
                ) && 
                (
                    this.DateRangeCustomToDate == other.DateRangeCustomToDate ||
                    this.DateRangeCustomToDate != null &&
                    this.DateRangeCustomToDate.Equals(other.DateRangeCustomToDate)
                ) && 
                (
                    this.DateRangeFilter == other.DateRangeFilter ||
                    this.DateRangeFilter != null &&
                    this.DateRangeFilter.Equals(other.DateRangeFilter)
                ) && 
                (
                    this.EnvelopeDateTypeFilter == other.EnvelopeDateTypeFilter ||
                    this.EnvelopeDateTypeFilter != null &&
                    this.EnvelopeDateTypeFilter.Equals(other.EnvelopeDateTypeFilter)
                ) && 
                (
                    this.EnvelopeRecipientNameContainsFilter == other.EnvelopeRecipientNameContainsFilter ||
                    this.EnvelopeRecipientNameContainsFilter != null &&
                    this.EnvelopeRecipientNameContainsFilter.Equals(other.EnvelopeRecipientNameContainsFilter)
                ) && 
                (
                    this.EnvelopeStatusFilter == other.EnvelopeStatusFilter ||
                    this.EnvelopeStatusFilter != null &&
                    this.EnvelopeStatusFilter.Equals(other.EnvelopeStatusFilter)
                ) && 
                (
                    this.EnvelopeSubjectContainsFilter == other.EnvelopeSubjectContainsFilter ||
                    this.EnvelopeSubjectContainsFilter != null &&
                    this.EnvelopeSubjectContainsFilter.Equals(other.EnvelopeSubjectContainsFilter)
                ) && 
                (
                    this.Fields == other.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    this.ForDownload == other.ForDownload ||
                    this.ForDownload != null &&
                    this.ForDownload.Equals(other.ForDownload)
                ) && 
                (
                    this.IsDashboard == other.IsDashboard ||
                    this.IsDashboard != null &&
                    this.IsDashboard.Equals(other.IsDashboard)
                ) && 
                (
                    this.NewLine == other.NewLine ||
                    this.NewLine != null &&
                    this.NewLine.Equals(other.NewLine)
                ) && 
                (
                    this.OverrideTimezoneKey == other.OverrideTimezoneKey ||
                    this.OverrideTimezoneKey != null &&
                    this.OverrideTimezoneKey.Equals(other.OverrideTimezoneKey)
                ) && 
                (
                    this.PeriodLengthFilter == other.PeriodLengthFilter ||
                    this.PeriodLengthFilter != null &&
                    this.PeriodLengthFilter.Equals(other.PeriodLengthFilter)
                ) && 
                (
                    this.Quote == other.Quote ||
                    this.Quote != null &&
                    this.Quote.Equals(other.Quote)
                ) && 
                (
                    this.ReportCustomizedId == other.ReportCustomizedId ||
                    this.ReportCustomizedId != null &&
                    this.ReportCustomizedId.Equals(other.ReportCustomizedId)
                ) && 
                (
                    this.ReportDescription == other.ReportDescription ||
                    this.ReportDescription != null &&
                    this.ReportDescription.Equals(other.ReportDescription)
                ) && 
                (
                    this.ReportId == other.ReportId ||
                    this.ReportId != null &&
                    this.ReportId.Equals(other.ReportId)
                ) && 
                (
                    this.ReportInvocationType == other.ReportInvocationType ||
                    this.ReportInvocationType != null &&
                    this.ReportInvocationType.Equals(other.ReportInvocationType)
                ) && 
                (
                    this.ReportName == other.ReportName ||
                    this.ReportName != null &&
                    this.ReportName.Equals(other.ReportName)
                ) && 
                (
                    this.SentByFilter == other.SentByFilter ||
                    this.SentByFilter != null &&
                    this.SentByFilter.Equals(other.SentByFilter)
                ) && 
                (
                    this.SentByIds == other.SentByIds ||
                    this.SentByIds != null &&
                    this.SentByIds.Equals(other.SentByIds)
                ) && 
                (
                    this.Separator == other.Separator ||
                    this.Separator != null &&
                    this.Separator.Equals(other.Separator)
                ) && 
                (
                    this.SortDirection == other.SortDirection ||
                    this.SortDirection != null &&
                    this.SortDirection.Equals(other.SortDirection)
                ) && 
                (
                    this.SortField == other.SortField ||
                    this.SortField != null &&
                    this.SortField.Equals(other.SortField)
                ) && 
                (
                    this.StartPosition == other.StartPosition ||
                    this.StartPosition != null &&
                    this.StartPosition.Equals(other.StartPosition)
                ) && 
                (
                    this.VerificationStatusFilter == other.VerificationStatusFilter ||
                    this.VerificationStatusFilter != null &&
                    this.VerificationStatusFilter.Equals(other.VerificationStatusFilter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AuthenticationSuccessFilter != null)
                    hash = hash * 59 + this.AuthenticationSuccessFilter.GetHashCode();
                if (this.CustomFieldFilter != null)
                    hash = hash * 59 + this.CustomFieldFilter.GetHashCode();
                if (this.DateRangeCustomFromDate != null)
                    hash = hash * 59 + this.DateRangeCustomFromDate.GetHashCode();
                if (this.DateRangeCustomToDate != null)
                    hash = hash * 59 + this.DateRangeCustomToDate.GetHashCode();
                if (this.DateRangeFilter != null)
                    hash = hash * 59 + this.DateRangeFilter.GetHashCode();
                if (this.EnvelopeDateTypeFilter != null)
                    hash = hash * 59 + this.EnvelopeDateTypeFilter.GetHashCode();
                if (this.EnvelopeRecipientNameContainsFilter != null)
                    hash = hash * 59 + this.EnvelopeRecipientNameContainsFilter.GetHashCode();
                if (this.EnvelopeStatusFilter != null)
                    hash = hash * 59 + this.EnvelopeStatusFilter.GetHashCode();
                if (this.EnvelopeSubjectContainsFilter != null)
                    hash = hash * 59 + this.EnvelopeSubjectContainsFilter.GetHashCode();
                if (this.Fields != null)
                    hash = hash * 59 + this.Fields.GetHashCode();
                if (this.ForDownload != null)
                    hash = hash * 59 + this.ForDownload.GetHashCode();
                if (this.IsDashboard != null)
                    hash = hash * 59 + this.IsDashboard.GetHashCode();
                if (this.NewLine != null)
                    hash = hash * 59 + this.NewLine.GetHashCode();
                if (this.OverrideTimezoneKey != null)
                    hash = hash * 59 + this.OverrideTimezoneKey.GetHashCode();
                if (this.PeriodLengthFilter != null)
                    hash = hash * 59 + this.PeriodLengthFilter.GetHashCode();
                if (this.Quote != null)
                    hash = hash * 59 + this.Quote.GetHashCode();
                if (this.ReportCustomizedId != null)
                    hash = hash * 59 + this.ReportCustomizedId.GetHashCode();
                if (this.ReportDescription != null)
                    hash = hash * 59 + this.ReportDescription.GetHashCode();
                if (this.ReportId != null)
                    hash = hash * 59 + this.ReportId.GetHashCode();
                if (this.ReportInvocationType != null)
                    hash = hash * 59 + this.ReportInvocationType.GetHashCode();
                if (this.ReportName != null)
                    hash = hash * 59 + this.ReportName.GetHashCode();
                if (this.SentByFilter != null)
                    hash = hash * 59 + this.SentByFilter.GetHashCode();
                if (this.SentByIds != null)
                    hash = hash * 59 + this.SentByIds.GetHashCode();
                if (this.Separator != null)
                    hash = hash * 59 + this.Separator.GetHashCode();
                if (this.SortDirection != null)
                    hash = hash * 59 + this.SortDirection.GetHashCode();
                if (this.SortField != null)
                    hash = hash * 59 + this.SortField.GetHashCode();
                if (this.StartPosition != null)
                    hash = hash * 59 + this.StartPosition.GetHashCode();
                if (this.VerificationStatusFilter != null)
                    hash = hash * 59 + this.VerificationStatusFilter.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
