/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ReportInProductRunResponse
    /// </summary>
    [DataContract]
    public partial class ReportInProductRunResponse :  IEquatable<ReportInProductRunResponse>, IValidatableObject
    {
        public ReportInProductRunResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInProductRunResponse" /> class.
        /// </summary>
        /// <param name="EndPosition">The last position in the result set. .</param>
        /// <param name="ExceededMaxResults">ExceededMaxResults.</param>
        /// <param name="LastWarehouseRefreshDateTime">LastWarehouseRefreshDateTime.</param>
        /// <param name="ResultSetSize">The number of results returned in this response. .</param>
        /// <param name="Rows">Rows.</param>
        /// <param name="StartPosition">Starting position of the current result set..</param>
        /// <param name="TotalSetSize">The total number of items available in the result set. This will always be greater than or equal to the value of the property returning the results in the in the response..</param>
        public ReportInProductRunResponse(string EndPosition = default(string), string ExceededMaxResults = default(string), string LastWarehouseRefreshDateTime = default(string), string ResultSetSize = default(string), List<ReportInProductRunResponseRow> Rows = default(List<ReportInProductRunResponseRow>), string StartPosition = default(string), string TotalSetSize = default(string))
        {
            this.EndPosition = EndPosition;
            this.ExceededMaxResults = ExceededMaxResults;
            this.LastWarehouseRefreshDateTime = LastWarehouseRefreshDateTime;
            this.ResultSetSize = ResultSetSize;
            this.Rows = Rows;
            this.StartPosition = StartPosition;
            this.TotalSetSize = TotalSetSize;
        }
        
        /// <summary>
        /// The last position in the result set. 
        /// </summary>
        /// <value>The last position in the result set. </value>
        [DataMember(Name="endPosition", EmitDefaultValue=false)]
        public string EndPosition { get; set; }
        /// <summary>
        /// Gets or Sets ExceededMaxResults
        /// </summary>
        [DataMember(Name="exceededMaxResults", EmitDefaultValue=false)]
        public string ExceededMaxResults { get; set; }
        /// <summary>
        /// Gets or Sets LastWarehouseRefreshDateTime
        /// </summary>
        [DataMember(Name="lastWarehouseRefreshDateTime", EmitDefaultValue=false)]
        public string LastWarehouseRefreshDateTime { get; set; }
        /// <summary>
        /// The number of results returned in this response. 
        /// </summary>
        /// <value>The number of results returned in this response. </value>
        [DataMember(Name="resultSetSize", EmitDefaultValue=false)]
        public string ResultSetSize { get; set; }
        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name="rows", EmitDefaultValue=false)]
        public List<ReportInProductRunResponseRow> Rows { get; set; }
        /// <summary>
        /// Starting position of the current result set.
        /// </summary>
        /// <value>Starting position of the current result set.</value>
        [DataMember(Name="startPosition", EmitDefaultValue=false)]
        public string StartPosition { get; set; }
        /// <summary>
        /// The total number of items available in the result set. This will always be greater than or equal to the value of the property returning the results in the in the response.
        /// </summary>
        /// <value>The total number of items available in the result set. This will always be greater than or equal to the value of the property returning the results in the in the response.</value>
        [DataMember(Name="totalSetSize", EmitDefaultValue=false)]
        public string TotalSetSize { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportInProductRunResponse {\n");
            sb.Append("  EndPosition: ").Append(EndPosition).Append("\n");
            sb.Append("  ExceededMaxResults: ").Append(ExceededMaxResults).Append("\n");
            sb.Append("  LastWarehouseRefreshDateTime: ").Append(LastWarehouseRefreshDateTime).Append("\n");
            sb.Append("  ResultSetSize: ").Append(ResultSetSize).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  StartPosition: ").Append(StartPosition).Append("\n");
            sb.Append("  TotalSetSize: ").Append(TotalSetSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportInProductRunResponse);
        }

        /// <summary>
        /// Returns true if ReportInProductRunResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportInProductRunResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportInProductRunResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EndPosition == other.EndPosition ||
                    this.EndPosition != null &&
                    this.EndPosition.Equals(other.EndPosition)
                ) && 
                (
                    this.ExceededMaxResults == other.ExceededMaxResults ||
                    this.ExceededMaxResults != null &&
                    this.ExceededMaxResults.Equals(other.ExceededMaxResults)
                ) && 
                (
                    this.LastWarehouseRefreshDateTime == other.LastWarehouseRefreshDateTime ||
                    this.LastWarehouseRefreshDateTime != null &&
                    this.LastWarehouseRefreshDateTime.Equals(other.LastWarehouseRefreshDateTime)
                ) && 
                (
                    this.ResultSetSize == other.ResultSetSize ||
                    this.ResultSetSize != null &&
                    this.ResultSetSize.Equals(other.ResultSetSize)
                ) && 
                (
                    this.Rows == other.Rows ||
                    this.Rows != null &&
                    this.Rows.SequenceEqual(other.Rows)
                ) && 
                (
                    this.StartPosition == other.StartPosition ||
                    this.StartPosition != null &&
                    this.StartPosition.Equals(other.StartPosition)
                ) && 
                (
                    this.TotalSetSize == other.TotalSetSize ||
                    this.TotalSetSize != null &&
                    this.TotalSetSize.Equals(other.TotalSetSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EndPosition != null)
                    hash = hash * 59 + this.EndPosition.GetHashCode();
                if (this.ExceededMaxResults != null)
                    hash = hash * 59 + this.ExceededMaxResults.GetHashCode();
                if (this.LastWarehouseRefreshDateTime != null)
                    hash = hash * 59 + this.LastWarehouseRefreshDateTime.GetHashCode();
                if (this.ResultSetSize != null)
                    hash = hash * 59 + this.ResultSetSize.GetHashCode();
                if (this.Rows != null)
                    hash = hash * 59 + this.Rows.GetHashCode();
                if (this.StartPosition != null)
                    hash = hash * 59 + this.StartPosition.GetHashCode();
                if (this.TotalSetSize != null)
                    hash = hash * 59 + this.TotalSetSize.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
