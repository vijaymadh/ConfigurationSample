/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// SignSessionInfoRequest
    /// </summary>
    [DataContract]
    public partial class SignSessionInfoRequest :  IEquatable<SignSessionInfoRequest>, IValidatableObject
    {
        public SignSessionInfoRequest()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SignSessionInfoRequest" /> class.
        /// </summary>
        /// <param name="Certificate">Certificate.</param>
        /// <param name="MaxSignatureLength">MaxSignatureLength.</param>
        /// <param name="ReturnFormat">ReturnFormat.</param>
        /// <param name="SigningLocation">Specifies the physical location where the signing takes place. It can have two enumeration values; InPerson and Online. The default value is Online..</param>
        public SignSessionInfoRequest(string Certificate = default(string), string MaxSignatureLength = default(string), string ReturnFormat = default(string), string SigningLocation = default(string))
        {
            this.Certificate = Certificate;
            this.MaxSignatureLength = MaxSignatureLength;
            this.ReturnFormat = ReturnFormat;
            this.SigningLocation = SigningLocation;
        }
        
        /// <summary>
        /// Gets or Sets Certificate
        /// </summary>
        [DataMember(Name="certificate", EmitDefaultValue=false)]
        public string Certificate { get; set; }
        /// <summary>
        /// Gets or Sets MaxSignatureLength
        /// </summary>
        [DataMember(Name="maxSignatureLength", EmitDefaultValue=false)]
        public string MaxSignatureLength { get; set; }
        /// <summary>
        /// Gets or Sets ReturnFormat
        /// </summary>
        [DataMember(Name="returnFormat", EmitDefaultValue=false)]
        public string ReturnFormat { get; set; }
        /// <summary>
        /// Specifies the physical location where the signing takes place. It can have two enumeration values; InPerson and Online. The default value is Online.
        /// </summary>
        /// <value>Specifies the physical location where the signing takes place. It can have two enumeration values; InPerson and Online. The default value is Online.</value>
        [DataMember(Name="signingLocation", EmitDefaultValue=false)]
        public string SigningLocation { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignSessionInfoRequest {\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  MaxSignatureLength: ").Append(MaxSignatureLength).Append("\n");
            sb.Append("  ReturnFormat: ").Append(ReturnFormat).Append("\n");
            sb.Append("  SigningLocation: ").Append(SigningLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SignSessionInfoRequest);
        }

        /// <summary>
        /// Returns true if SignSessionInfoRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SignSessionInfoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignSessionInfoRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Certificate == other.Certificate ||
                    this.Certificate != null &&
                    this.Certificate.Equals(other.Certificate)
                ) && 
                (
                    this.MaxSignatureLength == other.MaxSignatureLength ||
                    this.MaxSignatureLength != null &&
                    this.MaxSignatureLength.Equals(other.MaxSignatureLength)
                ) && 
                (
                    this.ReturnFormat == other.ReturnFormat ||
                    this.ReturnFormat != null &&
                    this.ReturnFormat.Equals(other.ReturnFormat)
                ) && 
                (
                    this.SigningLocation == other.SigningLocation ||
                    this.SigningLocation != null &&
                    this.SigningLocation.Equals(other.SigningLocation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Certificate != null)
                    hash = hash * 59 + this.Certificate.GetHashCode();
                if (this.MaxSignatureLength != null)
                    hash = hash * 59 + this.MaxSignatureLength.GetHashCode();
                if (this.ReturnFormat != null)
                    hash = hash * 59 + this.ReturnFormat.GetHashCode();
                if (this.SigningLocation != null)
                    hash = hash * 59 + this.SigningLocation.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
