/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// WorkflowStep
    /// </summary>
    [DataContract]
    public partial class WorkflowStep :  IEquatable<WorkflowStep>, IValidatableObject
    {
        public WorkflowStep()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowStep" /> class.
        /// </summary>
        /// <param name="Action">Action.</param>
        /// <param name="CompletedDate">CompletedDate.</param>
        /// <param name="DelayedRouting">DelayedRouting.</param>
        /// <param name="ItemId">ItemId.</param>
        /// <param name="RecipientRouting">RecipientRouting.</param>
        /// <param name="Status">Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later..</param>
        /// <param name="TriggeredDate">TriggeredDate.</param>
        /// <param name="TriggerOnItem">TriggerOnItem.</param>
        /// <param name="WorkflowStepId">WorkflowStepId.</param>
        public WorkflowStep(string Action = default(string), string CompletedDate = default(string), DelayedRouting DelayedRouting = default(DelayedRouting), string ItemId = default(string), RecipientRouting RecipientRouting = default(RecipientRouting), string Status = default(string), string TriggeredDate = default(string), string TriggerOnItem = default(string), string WorkflowStepId = default(string))
        {
            this.Action = Action;
            this.CompletedDate = CompletedDate;
            this.DelayedRouting = DelayedRouting;
            this.ItemId = ItemId;
            this.RecipientRouting = RecipientRouting;
            this.Status = Status;
            this.TriggeredDate = TriggeredDate;
            this.TriggerOnItem = TriggerOnItem;
            this.WorkflowStepId = WorkflowStepId;
        }
        
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }
        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name="completedDate", EmitDefaultValue=false)]
        public string CompletedDate { get; set; }
        /// <summary>
        /// Gets or Sets DelayedRouting
        /// </summary>
        [DataMember(Name="delayedRouting", EmitDefaultValue=false)]
        public DelayedRouting DelayedRouting { get; set; }
        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }
        /// <summary>
        /// Gets or Sets RecipientRouting
        /// </summary>
        [DataMember(Name="recipientRouting", EmitDefaultValue=false)]
        public RecipientRouting RecipientRouting { get; set; }
        /// <summary>
        /// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
        /// </summary>
        /// <value>Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets TriggeredDate
        /// </summary>
        [DataMember(Name="triggeredDate", EmitDefaultValue=false)]
        public string TriggeredDate { get; set; }
        /// <summary>
        /// Gets or Sets TriggerOnItem
        /// </summary>
        [DataMember(Name="triggerOnItem", EmitDefaultValue=false)]
        public string TriggerOnItem { get; set; }
        /// <summary>
        /// Gets or Sets WorkflowStepId
        /// </summary>
        [DataMember(Name="workflowStepId", EmitDefaultValue=false)]
        public string WorkflowStepId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowStep {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  DelayedRouting: ").Append(DelayedRouting).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  RecipientRouting: ").Append(RecipientRouting).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TriggeredDate: ").Append(TriggeredDate).Append("\n");
            sb.Append("  TriggerOnItem: ").Append(TriggerOnItem).Append("\n");
            sb.Append("  WorkflowStepId: ").Append(WorkflowStepId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowStep);
        }

        /// <summary>
        /// Returns true if WorkflowStep instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowStep other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.CompletedDate == other.CompletedDate ||
                    this.CompletedDate != null &&
                    this.CompletedDate.Equals(other.CompletedDate)
                ) && 
                (
                    this.DelayedRouting == other.DelayedRouting ||
                    this.DelayedRouting != null &&
                    this.DelayedRouting.Equals(other.DelayedRouting)
                ) && 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.RecipientRouting == other.RecipientRouting ||
                    this.RecipientRouting != null &&
                    this.RecipientRouting.Equals(other.RecipientRouting)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.TriggeredDate == other.TriggeredDate ||
                    this.TriggeredDate != null &&
                    this.TriggeredDate.Equals(other.TriggeredDate)
                ) && 
                (
                    this.TriggerOnItem == other.TriggerOnItem ||
                    this.TriggerOnItem != null &&
                    this.TriggerOnItem.Equals(other.TriggerOnItem)
                ) && 
                (
                    this.WorkflowStepId == other.WorkflowStepId ||
                    this.WorkflowStepId != null &&
                    this.WorkflowStepId.Equals(other.WorkflowStepId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.CompletedDate != null)
                    hash = hash * 59 + this.CompletedDate.GetHashCode();
                if (this.DelayedRouting != null)
                    hash = hash * 59 + this.DelayedRouting.GetHashCode();
                if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                if (this.RecipientRouting != null)
                    hash = hash * 59 + this.RecipientRouting.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.TriggeredDate != null)
                    hash = hash * 59 + this.TriggeredDate.GetHashCode();
                if (this.TriggerOnItem != null)
                    hash = hash * 59 + this.TriggerOnItem.GetHashCode();
                if (this.WorkflowStepId != null)
                    hash = hash * 59 + this.WorkflowStepId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
