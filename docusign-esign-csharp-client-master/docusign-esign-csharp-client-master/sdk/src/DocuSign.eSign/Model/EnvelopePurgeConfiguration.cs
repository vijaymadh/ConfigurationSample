/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// EnvelopePurgeConfiguration
    /// </summary>
    [DataContract]
    public partial class EnvelopePurgeConfiguration :  IEquatable<EnvelopePurgeConfiguration>, IValidatableObject
    {
        public EnvelopePurgeConfiguration()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopePurgeConfiguration" /> class.
        /// </summary>
        /// <param name="PurgeEnvelopes">PurgeEnvelopes.</param>
        /// <param name="RedactPII">RedactPII.</param>
        /// <param name="RemoveTabsAndEnvelopeAttachments">RemoveTabsAndEnvelopeAttachments.</param>
        /// <param name="RetentionDays">RetentionDays.</param>
        public EnvelopePurgeConfiguration(string PurgeEnvelopes = default(string), string RedactPII = default(string), string RemoveTabsAndEnvelopeAttachments = default(string), string RetentionDays = default(string))
        {
            this.PurgeEnvelopes = PurgeEnvelopes;
            this.RedactPII = RedactPII;
            this.RemoveTabsAndEnvelopeAttachments = RemoveTabsAndEnvelopeAttachments;
            this.RetentionDays = RetentionDays;
        }
        
        /// <summary>
        /// Gets or Sets PurgeEnvelopes
        /// </summary>
        [DataMember(Name="purgeEnvelopes", EmitDefaultValue=false)]
        public string PurgeEnvelopes { get; set; }
        /// <summary>
        /// Gets or Sets RedactPII
        /// </summary>
        [DataMember(Name="redactPII", EmitDefaultValue=false)]
        public string RedactPII { get; set; }
        /// <summary>
        /// Gets or Sets RemoveTabsAndEnvelopeAttachments
        /// </summary>
        [DataMember(Name="removeTabsAndEnvelopeAttachments", EmitDefaultValue=false)]
        public string RemoveTabsAndEnvelopeAttachments { get; set; }
        /// <summary>
        /// Gets or Sets RetentionDays
        /// </summary>
        [DataMember(Name="retentionDays", EmitDefaultValue=false)]
        public string RetentionDays { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvelopePurgeConfiguration {\n");
            sb.Append("  PurgeEnvelopes: ").Append(PurgeEnvelopes).Append("\n");
            sb.Append("  RedactPII: ").Append(RedactPII).Append("\n");
            sb.Append("  RemoveTabsAndEnvelopeAttachments: ").Append(RemoveTabsAndEnvelopeAttachments).Append("\n");
            sb.Append("  RetentionDays: ").Append(RetentionDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnvelopePurgeConfiguration);
        }

        /// <summary>
        /// Returns true if EnvelopePurgeConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvelopePurgeConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvelopePurgeConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PurgeEnvelopes == other.PurgeEnvelopes ||
                    this.PurgeEnvelopes != null &&
                    this.PurgeEnvelopes.Equals(other.PurgeEnvelopes)
                ) && 
                (
                    this.RedactPII == other.RedactPII ||
                    this.RedactPII != null &&
                    this.RedactPII.Equals(other.RedactPII)
                ) && 
                (
                    this.RemoveTabsAndEnvelopeAttachments == other.RemoveTabsAndEnvelopeAttachments ||
                    this.RemoveTabsAndEnvelopeAttachments != null &&
                    this.RemoveTabsAndEnvelopeAttachments.Equals(other.RemoveTabsAndEnvelopeAttachments)
                ) && 
                (
                    this.RetentionDays == other.RetentionDays ||
                    this.RetentionDays != null &&
                    this.RetentionDays.Equals(other.RetentionDays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PurgeEnvelopes != null)
                    hash = hash * 59 + this.PurgeEnvelopes.GetHashCode();
                if (this.RedactPII != null)
                    hash = hash * 59 + this.RedactPII.GetHashCode();
                if (this.RemoveTabsAndEnvelopeAttachments != null)
                    hash = hash * 59 + this.RemoveTabsAndEnvelopeAttachments.GetHashCode();
                if (this.RetentionDays != null)
                    hash = hash * 59 + this.RetentionDays.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
