/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DisplayApplianceAccount
    /// </summary>
    [DataContract]
    public partial class DisplayApplianceAccount :  IEquatable<DisplayApplianceAccount>, IValidatableObject
    {
        public DisplayApplianceAccount()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayApplianceAccount" /> class.
        /// </summary>
        /// <param name="AccountId">The account ID associated with the envelope..</param>
        /// <param name="OptOutAutoNavTextAndTabColorUpdates">OptOutAutoNavTextAndTabColorUpdates.</param>
        /// <param name="ShowInitialConditionalFields">ShowInitialConditionalFields.</param>
        /// <param name="SigningVersion">SigningVersion.</param>
        /// <param name="TagHasSigBlock">TagHasSigBlock.</param>
        public DisplayApplianceAccount(string AccountId = default(string), bool? OptOutAutoNavTextAndTabColorUpdates = default(bool?), bool? ShowInitialConditionalFields = default(bool?), string SigningVersion = default(string), bool? TagHasSigBlock = default(bool?))
        {
            this.AccountId = AccountId;
            this.OptOutAutoNavTextAndTabColorUpdates = OptOutAutoNavTextAndTabColorUpdates;
            this.ShowInitialConditionalFields = ShowInitialConditionalFields;
            this.SigningVersion = SigningVersion;
            this.TagHasSigBlock = TagHasSigBlock;
        }
        
        /// <summary>
        /// The account ID associated with the envelope.
        /// </summary>
        /// <value>The account ID associated with the envelope.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// Gets or Sets OptOutAutoNavTextAndTabColorUpdates
        /// </summary>
        [DataMember(Name="optOutAutoNavTextAndTabColorUpdates", EmitDefaultValue=false)]
        public bool? OptOutAutoNavTextAndTabColorUpdates { get; set; }
        /// <summary>
        /// Gets or Sets ShowInitialConditionalFields
        /// </summary>
        [DataMember(Name="showInitialConditionalFields", EmitDefaultValue=false)]
        public bool? ShowInitialConditionalFields { get; set; }
        /// <summary>
        /// Gets or Sets SigningVersion
        /// </summary>
        [DataMember(Name="signingVersion", EmitDefaultValue=false)]
        public string SigningVersion { get; set; }
        /// <summary>
        /// Gets or Sets TagHasSigBlock
        /// </summary>
        [DataMember(Name="tagHasSigBlock", EmitDefaultValue=false)]
        public bool? TagHasSigBlock { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisplayApplianceAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  OptOutAutoNavTextAndTabColorUpdates: ").Append(OptOutAutoNavTextAndTabColorUpdates).Append("\n");
            sb.Append("  ShowInitialConditionalFields: ").Append(ShowInitialConditionalFields).Append("\n");
            sb.Append("  SigningVersion: ").Append(SigningVersion).Append("\n");
            sb.Append("  TagHasSigBlock: ").Append(TagHasSigBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DisplayApplianceAccount);
        }

        /// <summary>
        /// Returns true if DisplayApplianceAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of DisplayApplianceAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplayApplianceAccount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.OptOutAutoNavTextAndTabColorUpdates == other.OptOutAutoNavTextAndTabColorUpdates ||
                    this.OptOutAutoNavTextAndTabColorUpdates != null &&
                    this.OptOutAutoNavTextAndTabColorUpdates.Equals(other.OptOutAutoNavTextAndTabColorUpdates)
                ) && 
                (
                    this.ShowInitialConditionalFields == other.ShowInitialConditionalFields ||
                    this.ShowInitialConditionalFields != null &&
                    this.ShowInitialConditionalFields.Equals(other.ShowInitialConditionalFields)
                ) && 
                (
                    this.SigningVersion == other.SigningVersion ||
                    this.SigningVersion != null &&
                    this.SigningVersion.Equals(other.SigningVersion)
                ) && 
                (
                    this.TagHasSigBlock == other.TagHasSigBlock ||
                    this.TagHasSigBlock != null &&
                    this.TagHasSigBlock.Equals(other.TagHasSigBlock)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.OptOutAutoNavTextAndTabColorUpdates != null)
                    hash = hash * 59 + this.OptOutAutoNavTextAndTabColorUpdates.GetHashCode();
                if (this.ShowInitialConditionalFields != null)
                    hash = hash * 59 + this.ShowInitialConditionalFields.GetHashCode();
                if (this.SigningVersion != null)
                    hash = hash * 59 + this.SigningVersion.GetHashCode();
                if (this.TagHasSigBlock != null)
                    hash = hash * 59 + this.TagHasSigBlock.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
