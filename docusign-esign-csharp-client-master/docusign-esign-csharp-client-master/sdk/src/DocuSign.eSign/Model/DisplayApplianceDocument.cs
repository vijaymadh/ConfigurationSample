/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DisplayApplianceDocument
    /// </summary>
    [DataContract]
    public partial class DisplayApplianceDocument :  IEquatable<DisplayApplianceDocument>, IValidatableObject
    {
        public DisplayApplianceDocument()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayApplianceDocument" /> class.
        /// </summary>
        /// <param name="AttachmentDescription">.</param>
        /// <param name="DocumentId">Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute..</param>
        /// <param name="DocumentType">.</param>
        /// <param name="EnvelopeId">The envelope ID of the envelope status that failed to post..</param>
        /// <param name="ExternalDocumentId">.</param>
        /// <param name="LatestPDFId">.</param>
        /// <param name="Name">.</param>
        /// <param name="Pages">.</param>
        public DisplayApplianceDocument(string AttachmentDescription = default(string), string DocumentId = default(string), string DocumentType = default(string), string EnvelopeId = default(string), string ExternalDocumentId = default(string), string LatestPDFId = default(string), string Name = default(string), int? Pages = default(int?))
        {
            this.AttachmentDescription = AttachmentDescription;
            this.DocumentId = DocumentId;
            this.DocumentType = DocumentType;
            this.EnvelopeId = EnvelopeId;
            this.ExternalDocumentId = ExternalDocumentId;
            this.LatestPDFId = LatestPDFId;
            this.Name = Name;
            this.Pages = Pages;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="attachmentDescription", EmitDefaultValue=false)]
        public string AttachmentDescription { get; set; }
        /// <summary>
        /// Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.
        /// </summary>
        /// <value>Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public string DocumentType { get; set; }
        /// <summary>
        /// The envelope ID of the envelope status that failed to post.
        /// </summary>
        /// <value>The envelope ID of the envelope status that failed to post.</value>
        [DataMember(Name="envelopeId", EmitDefaultValue=false)]
        public string EnvelopeId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="externalDocumentId", EmitDefaultValue=false)]
        public string ExternalDocumentId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="latestPDFId", EmitDefaultValue=false)]
        public string LatestPDFId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public int? Pages { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisplayApplianceDocument {\n");
            sb.Append("  AttachmentDescription: ").Append(AttachmentDescription).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  EnvelopeId: ").Append(EnvelopeId).Append("\n");
            sb.Append("  ExternalDocumentId: ").Append(ExternalDocumentId).Append("\n");
            sb.Append("  LatestPDFId: ").Append(LatestPDFId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DisplayApplianceDocument);
        }

        /// <summary>
        /// Returns true if DisplayApplianceDocument instances are equal
        /// </summary>
        /// <param name="other">Instance of DisplayApplianceDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplayApplianceDocument other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AttachmentDescription == other.AttachmentDescription ||
                    this.AttachmentDescription != null &&
                    this.AttachmentDescription.Equals(other.AttachmentDescription)
                ) && 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    this.DocumentType == other.DocumentType ||
                    this.DocumentType != null &&
                    this.DocumentType.Equals(other.DocumentType)
                ) && 
                (
                    this.EnvelopeId == other.EnvelopeId ||
                    this.EnvelopeId != null &&
                    this.EnvelopeId.Equals(other.EnvelopeId)
                ) && 
                (
                    this.ExternalDocumentId == other.ExternalDocumentId ||
                    this.ExternalDocumentId != null &&
                    this.ExternalDocumentId.Equals(other.ExternalDocumentId)
                ) && 
                (
                    this.LatestPDFId == other.LatestPDFId ||
                    this.LatestPDFId != null &&
                    this.LatestPDFId.Equals(other.LatestPDFId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Pages == other.Pages ||
                    this.Pages != null &&
                    this.Pages.Equals(other.Pages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AttachmentDescription != null)
                    hash = hash * 59 + this.AttachmentDescription.GetHashCode();
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentType != null)
                    hash = hash * 59 + this.DocumentType.GetHashCode();
                if (this.EnvelopeId != null)
                    hash = hash * 59 + this.EnvelopeId.GetHashCode();
                if (this.ExternalDocumentId != null)
                    hash = hash * 59 + this.ExternalDocumentId.GetHashCode();
                if (this.LatestPDFId != null)
                    hash = hash * 59 + this.LatestPDFId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Pages != null)
                    hash = hash * 59 + this.Pages.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
