/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// SignHashDocument
    /// </summary>
    [DataContract]
    public partial class SignHashDocument :  IEquatable<SignHashDocument>, IValidatableObject
    {
        public SignHashDocument()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SignHashDocument" /> class.
        /// </summary>
        /// <param name="Data">Data.</param>
        /// <param name="DocumentId">Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute..</param>
        /// <param name="Format">Format.</param>
        /// <param name="Name">Name.</param>
        /// <param name="RemainingSignatures">RemainingSignatures.</param>
        /// <param name="Revisions">Revisions.</param>
        /// <param name="SignatureProperties">SignatureProperties.</param>
        /// <param name="SignatureType">SignatureType.</param>
        public SignHashDocument(string Data = default(string), string DocumentId = default(string), string Format = default(string), string Name = default(string), long? RemainingSignatures = default(long?), List<Revision> Revisions = default(List<Revision>), SignatureProperties SignatureProperties = default(SignatureProperties), string SignatureType = default(string))
        {
            this.Data = Data;
            this.DocumentId = DocumentId;
            this.Format = Format;
            this.Name = Name;
            this.RemainingSignatures = RemainingSignatures;
            this.Revisions = Revisions;
            this.SignatureProperties = SignatureProperties;
            this.SignatureType = SignatureType;
        }
        
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }
        /// <summary>
        /// Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.
        /// </summary>
        /// <value>Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets RemainingSignatures
        /// </summary>
        [DataMember(Name="remainingSignatures", EmitDefaultValue=false)]
        public long? RemainingSignatures { get; set; }
        /// <summary>
        /// Gets or Sets Revisions
        /// </summary>
        [DataMember(Name="revisions", EmitDefaultValue=false)]
        public List<Revision> Revisions { get; set; }
        /// <summary>
        /// Gets or Sets SignatureProperties
        /// </summary>
        [DataMember(Name="signatureProperties", EmitDefaultValue=false)]
        public SignatureProperties SignatureProperties { get; set; }
        /// <summary>
        /// Gets or Sets SignatureType
        /// </summary>
        [DataMember(Name="signatureType", EmitDefaultValue=false)]
        public string SignatureType { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignHashDocument {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RemainingSignatures: ").Append(RemainingSignatures).Append("\n");
            sb.Append("  Revisions: ").Append(Revisions).Append("\n");
            sb.Append("  SignatureProperties: ").Append(SignatureProperties).Append("\n");
            sb.Append("  SignatureType: ").Append(SignatureType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SignHashDocument);
        }

        /// <summary>
        /// Returns true if SignHashDocument instances are equal
        /// </summary>
        /// <param name="other">Instance of SignHashDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignHashDocument other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                ) && 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RemainingSignatures == other.RemainingSignatures ||
                    this.RemainingSignatures != null &&
                    this.RemainingSignatures.Equals(other.RemainingSignatures)
                ) && 
                (
                    this.Revisions == other.Revisions ||
                    this.Revisions != null &&
                    this.Revisions.SequenceEqual(other.Revisions)
                ) && 
                (
                    this.SignatureProperties == other.SignatureProperties ||
                    this.SignatureProperties != null &&
                    this.SignatureProperties.Equals(other.SignatureProperties)
                ) && 
                (
                    this.SignatureType == other.SignatureType ||
                    this.SignatureType != null &&
                    this.SignatureType.Equals(other.SignatureType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RemainingSignatures != null)
                    hash = hash * 59 + this.RemainingSignatures.GetHashCode();
                if (this.Revisions != null)
                    hash = hash * 59 + this.Revisions.GetHashCode();
                if (this.SignatureProperties != null)
                    hash = hash * 59 + this.SignatureProperties.GetHashCode();
                if (this.SignatureType != null)
                    hash = hash * 59 + this.SignatureType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
