/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ConciergeQueryResponse
    /// </summary>
    [DataContract]
    public partial class ConciergeQueryResponse :  IEquatable<ConciergeQueryResponse>, IValidatableObject
    {
        public ConciergeQueryResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConciergeQueryResponse" /> class.
        /// </summary>
        /// <param name="EntityLocale">.</param>
        /// <param name="EntityTimeZone">.</param>
        /// <param name="Message">.</param>
        /// <param name="ZuoraEntityName">.</param>
        public ConciergeQueryResponse(string EntityLocale = default(string), string EntityTimeZone = default(string), string Message = default(string), string ZuoraEntityName = default(string))
        {
            this.EntityLocale = EntityLocale;
            this.EntityTimeZone = EntityTimeZone;
            this.Message = Message;
            this.ZuoraEntityName = ZuoraEntityName;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="entityLocale", EmitDefaultValue=false)]
        public string EntityLocale { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="entityTimeZone", EmitDefaultValue=false)]
        public string EntityTimeZone { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="zuoraEntityName", EmitDefaultValue=false)]
        public string ZuoraEntityName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConciergeQueryResponse {\n");
            sb.Append("  EntityLocale: ").Append(EntityLocale).Append("\n");
            sb.Append("  EntityTimeZone: ").Append(EntityTimeZone).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ZuoraEntityName: ").Append(ZuoraEntityName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConciergeQueryResponse);
        }

        /// <summary>
        /// Returns true if ConciergeQueryResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ConciergeQueryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConciergeQueryResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EntityLocale == other.EntityLocale ||
                    this.EntityLocale != null &&
                    this.EntityLocale.Equals(other.EntityLocale)
                ) && 
                (
                    this.EntityTimeZone == other.EntityTimeZone ||
                    this.EntityTimeZone != null &&
                    this.EntityTimeZone.Equals(other.EntityTimeZone)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.ZuoraEntityName == other.ZuoraEntityName ||
                    this.ZuoraEntityName != null &&
                    this.ZuoraEntityName.Equals(other.ZuoraEntityName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EntityLocale != null)
                    hash = hash * 59 + this.EntityLocale.GetHashCode();
                if (this.EntityTimeZone != null)
                    hash = hash * 59 + this.EntityTimeZone.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.ZuoraEntityName != null)
                    hash = hash * 59 + this.ZuoraEntityName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
