/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ExternalPrimaryAccountRecipientAuthRequirements
    /// </summary>
    [DataContract]
    public partial class ExternalPrimaryAccountRecipientAuthRequirements :  IEquatable<ExternalPrimaryAccountRecipientAuthRequirements>, IValidatableObject
    {
        public ExternalPrimaryAccountRecipientAuthRequirements()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalPrimaryAccountRecipientAuthRequirements" /> class.
        /// </summary>
        /// <param name="AccessCode">If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required..</param>
        /// <param name="IdVerification">IdVerification.</param>
        /// <param name="Kba">Kba.</param>
        /// <param name="Phone">Phone.</param>
        public ExternalPrimaryAccountRecipientAuthRequirements(string AccessCode = default(string), string IdVerification = default(string), string Kba = default(string), string Phone = default(string))
        {
            this.AccessCode = AccessCode;
            this.IdVerification = IdVerification;
            this.Kba = Kba;
            this.Phone = Phone;
        }
        
        /// <summary>
        /// If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required.
        /// </summary>
        /// <value>If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required.</value>
        [DataMember(Name="accessCode", EmitDefaultValue=false)]
        public string AccessCode { get; set; }
        /// <summary>
        /// Gets or Sets IdVerification
        /// </summary>
        [DataMember(Name="idVerification", EmitDefaultValue=false)]
        public string IdVerification { get; set; }
        /// <summary>
        /// Gets or Sets Kba
        /// </summary>
        [DataMember(Name="kba", EmitDefaultValue=false)]
        public string Kba { get; set; }
        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalPrimaryAccountRecipientAuthRequirements {\n");
            sb.Append("  AccessCode: ").Append(AccessCode).Append("\n");
            sb.Append("  IdVerification: ").Append(IdVerification).Append("\n");
            sb.Append("  Kba: ").Append(Kba).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExternalPrimaryAccountRecipientAuthRequirements);
        }

        /// <summary>
        /// Returns true if ExternalPrimaryAccountRecipientAuthRequirements instances are equal
        /// </summary>
        /// <param name="other">Instance of ExternalPrimaryAccountRecipientAuthRequirements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalPrimaryAccountRecipientAuthRequirements other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessCode == other.AccessCode ||
                    this.AccessCode != null &&
                    this.AccessCode.Equals(other.AccessCode)
                ) && 
                (
                    this.IdVerification == other.IdVerification ||
                    this.IdVerification != null &&
                    this.IdVerification.Equals(other.IdVerification)
                ) && 
                (
                    this.Kba == other.Kba ||
                    this.Kba != null &&
                    this.Kba.Equals(other.Kba)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessCode != null)
                    hash = hash * 59 + this.AccessCode.GetHashCode();
                if (this.IdVerification != null)
                    hash = hash * 59 + this.IdVerification.GetHashCode();
                if (this.Kba != null)
                    hash = hash * 59 + this.Kba.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
