/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// EnvelopeTransferRule
    /// </summary>
    [DataContract]
    public partial class EnvelopeTransferRule :  IEquatable<EnvelopeTransferRule>, IValidatableObject
    {
        public EnvelopeTransferRule()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeTransferRule" /> class.
        /// </summary>
        /// <param name="CarbonCopyOriginalOwner">CarbonCopyOriginalOwner.</param>
        /// <param name="Enabled">Enabled.</param>
        /// <param name="EnvelopeTransferRuleId">EnvelopeTransferRuleId.</param>
        /// <param name="EventType">EventType.</param>
        /// <param name="FromGroup">FromGroup.</param>
        /// <param name="FromUser">FromUser.</param>
        /// <param name="ModifiedDate">ModifiedDate.</param>
        /// <param name="ModifiedUser">ModifiedUser.</param>
        /// <param name="ToFolder">ToFolder.</param>
        /// <param name="ToUser">ToUser.</param>
        public EnvelopeTransferRule(string CarbonCopyOriginalOwner = default(string), string Enabled = default(string), string EnvelopeTransferRuleId = default(string), string EventType = default(string), Group FromGroup = default(Group), UserInformation FromUser = default(UserInformation), string ModifiedDate = default(string), UserInformation ModifiedUser = default(UserInformation), Folder ToFolder = default(Folder), UserInformation ToUser = default(UserInformation))
        {
            this.CarbonCopyOriginalOwner = CarbonCopyOriginalOwner;
            this.Enabled = Enabled;
            this.EnvelopeTransferRuleId = EnvelopeTransferRuleId;
            this.EventType = EventType;
            this.FromGroup = FromGroup;
            this.FromUser = FromUser;
            this.ModifiedDate = ModifiedDate;
            this.ModifiedUser = ModifiedUser;
            this.ToFolder = ToFolder;
            this.ToUser = ToUser;
        }
        
        /// <summary>
        /// Gets or Sets CarbonCopyOriginalOwner
        /// </summary>
        [DataMember(Name="carbonCopyOriginalOwner", EmitDefaultValue=false)]
        public string CarbonCopyOriginalOwner { get; set; }
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public string Enabled { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeTransferRuleId
        /// </summary>
        [DataMember(Name="envelopeTransferRuleId", EmitDefaultValue=false)]
        public string EnvelopeTransferRuleId { get; set; }
        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; set; }
        /// <summary>
        /// Gets or Sets FromGroup
        /// </summary>
        [DataMember(Name="fromGroup", EmitDefaultValue=false)]
        public Group FromGroup { get; set; }
        /// <summary>
        /// Gets or Sets FromUser
        /// </summary>
        [DataMember(Name="fromUser", EmitDefaultValue=false)]
        public UserInformation FromUser { get; set; }
        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public string ModifiedDate { get; set; }
        /// <summary>
        /// Gets or Sets ModifiedUser
        /// </summary>
        [DataMember(Name="modifiedUser", EmitDefaultValue=false)]
        public UserInformation ModifiedUser { get; set; }
        /// <summary>
        /// Gets or Sets ToFolder
        /// </summary>
        [DataMember(Name="toFolder", EmitDefaultValue=false)]
        public Folder ToFolder { get; set; }
        /// <summary>
        /// Gets or Sets ToUser
        /// </summary>
        [DataMember(Name="toUser", EmitDefaultValue=false)]
        public UserInformation ToUser { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvelopeTransferRule {\n");
            sb.Append("  CarbonCopyOriginalOwner: ").Append(CarbonCopyOriginalOwner).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EnvelopeTransferRuleId: ").Append(EnvelopeTransferRuleId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  FromGroup: ").Append(FromGroup).Append("\n");
            sb.Append("  FromUser: ").Append(FromUser).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUser: ").Append(ModifiedUser).Append("\n");
            sb.Append("  ToFolder: ").Append(ToFolder).Append("\n");
            sb.Append("  ToUser: ").Append(ToUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnvelopeTransferRule);
        }

        /// <summary>
        /// Returns true if EnvelopeTransferRule instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvelopeTransferRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvelopeTransferRule other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CarbonCopyOriginalOwner == other.CarbonCopyOriginalOwner ||
                    this.CarbonCopyOriginalOwner != null &&
                    this.CarbonCopyOriginalOwner.Equals(other.CarbonCopyOriginalOwner)
                ) && 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.EnvelopeTransferRuleId == other.EnvelopeTransferRuleId ||
                    this.EnvelopeTransferRuleId != null &&
                    this.EnvelopeTransferRuleId.Equals(other.EnvelopeTransferRuleId)
                ) && 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.FromGroup == other.FromGroup ||
                    this.FromGroup != null &&
                    this.FromGroup.Equals(other.FromGroup)
                ) && 
                (
                    this.FromUser == other.FromUser ||
                    this.FromUser != null &&
                    this.FromUser.Equals(other.FromUser)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUser == other.ModifiedUser ||
                    this.ModifiedUser != null &&
                    this.ModifiedUser.Equals(other.ModifiedUser)
                ) && 
                (
                    this.ToFolder == other.ToFolder ||
                    this.ToFolder != null &&
                    this.ToFolder.Equals(other.ToFolder)
                ) && 
                (
                    this.ToUser == other.ToUser ||
                    this.ToUser != null &&
                    this.ToUser.Equals(other.ToUser)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CarbonCopyOriginalOwner != null)
                    hash = hash * 59 + this.CarbonCopyOriginalOwner.GetHashCode();
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.EnvelopeTransferRuleId != null)
                    hash = hash * 59 + this.EnvelopeTransferRuleId.GetHashCode();
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.FromGroup != null)
                    hash = hash * 59 + this.FromGroup.GetHashCode();
                if (this.FromUser != null)
                    hash = hash * 59 + this.FromUser.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUser != null)
                    hash = hash * 59 + this.ModifiedUser.GetHashCode();
                if (this.ToFolder != null)
                    hash = hash * 59 + this.ToFolder.GetHashCode();
                if (this.ToUser != null)
                    hash = hash * 59 + this.ToUser.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
