/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// LocalePolicyTab
    /// </summary>
    [DataContract]
    public partial class LocalePolicyTab :  IEquatable<LocalePolicyTab>, IValidatableObject
    {
        public LocalePolicyTab()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalePolicyTab" /> class.
        /// </summary>
        /// <param name="AddressFormat">AddressFormat.</param>
        /// <param name="CalendarType">CalendarType.</param>
        /// <param name="CultureName">CultureName.</param>
        /// <param name="CurrencyCode">CurrencyCode.</param>
        /// <param name="CurrencyNegativeFormat">CurrencyNegativeFormat.</param>
        /// <param name="CurrencyPositiveFormat">CurrencyPositiveFormat.</param>
        /// <param name="CustomDateFormat">CustomDateFormat.</param>
        /// <param name="CustomTimeFormat">CustomTimeFormat.</param>
        /// <param name="DateFormat">DateFormat.</param>
        /// <param name="InitialFormat">InitialFormat.</param>
        /// <param name="NameFormat">NameFormat.</param>
        /// <param name="TimeFormat">TimeFormat.</param>
        /// <param name="TimeZone">TimeZone.</param>
        public LocalePolicyTab(string AddressFormat = default(string), string CalendarType = default(string), string CultureName = default(string), string CurrencyCode = default(string), string CurrencyNegativeFormat = default(string), string CurrencyPositiveFormat = default(string), string CustomDateFormat = default(string), string CustomTimeFormat = default(string), string DateFormat = default(string), string InitialFormat = default(string), string NameFormat = default(string), string TimeFormat = default(string), string TimeZone = default(string))
        {
            this.AddressFormat = AddressFormat;
            this.CalendarType = CalendarType;
            this.CultureName = CultureName;
            this.CurrencyCode = CurrencyCode;
            this.CurrencyNegativeFormat = CurrencyNegativeFormat;
            this.CurrencyPositiveFormat = CurrencyPositiveFormat;
            this.CustomDateFormat = CustomDateFormat;
            this.CustomTimeFormat = CustomTimeFormat;
            this.DateFormat = DateFormat;
            this.InitialFormat = InitialFormat;
            this.NameFormat = NameFormat;
            this.TimeFormat = TimeFormat;
            this.TimeZone = TimeZone;
        }
        
        /// <summary>
        /// Gets or Sets AddressFormat
        /// </summary>
        [DataMember(Name="addressFormat", EmitDefaultValue=false)]
        public string AddressFormat { get; set; }
        /// <summary>
        /// Gets or Sets CalendarType
        /// </summary>
        [DataMember(Name="calendarType", EmitDefaultValue=false)]
        public string CalendarType { get; set; }
        /// <summary>
        /// Gets or Sets CultureName
        /// </summary>
        [DataMember(Name="cultureName", EmitDefaultValue=false)]
        public string CultureName { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyNegativeFormat
        /// </summary>
        [DataMember(Name="currencyNegativeFormat", EmitDefaultValue=false)]
        public string CurrencyNegativeFormat { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyPositiveFormat
        /// </summary>
        [DataMember(Name="currencyPositiveFormat", EmitDefaultValue=false)]
        public string CurrencyPositiveFormat { get; set; }
        /// <summary>
        /// Gets or Sets CustomDateFormat
        /// </summary>
        [DataMember(Name="customDateFormat", EmitDefaultValue=false)]
        public string CustomDateFormat { get; set; }
        /// <summary>
        /// Gets or Sets CustomTimeFormat
        /// </summary>
        [DataMember(Name="customTimeFormat", EmitDefaultValue=false)]
        public string CustomTimeFormat { get; set; }
        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name="dateFormat", EmitDefaultValue=false)]
        public string DateFormat { get; set; }
        /// <summary>
        /// Gets or Sets InitialFormat
        /// </summary>
        [DataMember(Name="initialFormat", EmitDefaultValue=false)]
        public string InitialFormat { get; set; }
        /// <summary>
        /// Gets or Sets NameFormat
        /// </summary>
        [DataMember(Name="nameFormat", EmitDefaultValue=false)]
        public string NameFormat { get; set; }
        /// <summary>
        /// Gets or Sets TimeFormat
        /// </summary>
        [DataMember(Name="timeFormat", EmitDefaultValue=false)]
        public string TimeFormat { get; set; }
        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalePolicyTab {\n");
            sb.Append("  AddressFormat: ").Append(AddressFormat).Append("\n");
            sb.Append("  CalendarType: ").Append(CalendarType).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyNegativeFormat: ").Append(CurrencyNegativeFormat).Append("\n");
            sb.Append("  CurrencyPositiveFormat: ").Append(CurrencyPositiveFormat).Append("\n");
            sb.Append("  CustomDateFormat: ").Append(CustomDateFormat).Append("\n");
            sb.Append("  CustomTimeFormat: ").Append(CustomTimeFormat).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  InitialFormat: ").Append(InitialFormat).Append("\n");
            sb.Append("  NameFormat: ").Append(NameFormat).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LocalePolicyTab);
        }

        /// <summary>
        /// Returns true if LocalePolicyTab instances are equal
        /// </summary>
        /// <param name="other">Instance of LocalePolicyTab to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalePolicyTab other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AddressFormat == other.AddressFormat ||
                    this.AddressFormat != null &&
                    this.AddressFormat.Equals(other.AddressFormat)
                ) && 
                (
                    this.CalendarType == other.CalendarType ||
                    this.CalendarType != null &&
                    this.CalendarType.Equals(other.CalendarType)
                ) && 
                (
                    this.CultureName == other.CultureName ||
                    this.CultureName != null &&
                    this.CultureName.Equals(other.CultureName)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.CurrencyNegativeFormat == other.CurrencyNegativeFormat ||
                    this.CurrencyNegativeFormat != null &&
                    this.CurrencyNegativeFormat.Equals(other.CurrencyNegativeFormat)
                ) && 
                (
                    this.CurrencyPositiveFormat == other.CurrencyPositiveFormat ||
                    this.CurrencyPositiveFormat != null &&
                    this.CurrencyPositiveFormat.Equals(other.CurrencyPositiveFormat)
                ) && 
                (
                    this.CustomDateFormat == other.CustomDateFormat ||
                    this.CustomDateFormat != null &&
                    this.CustomDateFormat.Equals(other.CustomDateFormat)
                ) && 
                (
                    this.CustomTimeFormat == other.CustomTimeFormat ||
                    this.CustomTimeFormat != null &&
                    this.CustomTimeFormat.Equals(other.CustomTimeFormat)
                ) && 
                (
                    this.DateFormat == other.DateFormat ||
                    this.DateFormat != null &&
                    this.DateFormat.Equals(other.DateFormat)
                ) && 
                (
                    this.InitialFormat == other.InitialFormat ||
                    this.InitialFormat != null &&
                    this.InitialFormat.Equals(other.InitialFormat)
                ) && 
                (
                    this.NameFormat == other.NameFormat ||
                    this.NameFormat != null &&
                    this.NameFormat.Equals(other.NameFormat)
                ) && 
                (
                    this.TimeFormat == other.TimeFormat ||
                    this.TimeFormat != null &&
                    this.TimeFormat.Equals(other.TimeFormat)
                ) && 
                (
                    this.TimeZone == other.TimeZone ||
                    this.TimeZone != null &&
                    this.TimeZone.Equals(other.TimeZone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AddressFormat != null)
                    hash = hash * 59 + this.AddressFormat.GetHashCode();
                if (this.CalendarType != null)
                    hash = hash * 59 + this.CalendarType.GetHashCode();
                if (this.CultureName != null)
                    hash = hash * 59 + this.CultureName.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.CurrencyNegativeFormat != null)
                    hash = hash * 59 + this.CurrencyNegativeFormat.GetHashCode();
                if (this.CurrencyPositiveFormat != null)
                    hash = hash * 59 + this.CurrencyPositiveFormat.GetHashCode();
                if (this.CustomDateFormat != null)
                    hash = hash * 59 + this.CustomDateFormat.GetHashCode();
                if (this.CustomTimeFormat != null)
                    hash = hash * 59 + this.CustomTimeFormat.GetHashCode();
                if (this.DateFormat != null)
                    hash = hash * 59 + this.DateFormat.GetHashCode();
                if (this.InitialFormat != null)
                    hash = hash * 59 + this.InitialFormat.GetHashCode();
                if (this.NameFormat != null)
                    hash = hash * 59 + this.NameFormat.GetHashCode();
                if (this.TimeFormat != null)
                    hash = hash * 59 + this.TimeFormat.GetHashCode();
                if (this.TimeZone != null)
                    hash = hash * 59 + this.TimeZone.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
