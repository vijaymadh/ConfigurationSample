/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ConnectSalesforceField
    /// </summary>
    [DataContract]
    public partial class ConnectSalesforceField :  IEquatable<ConnectSalesforceField>, IValidatableObject
    {
        public ConnectSalesforceField()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectSalesforceField" /> class.
        /// </summary>
        /// <param name="DsAttribute">DsAttribute.</param>
        /// <param name="DsLink">DsLink.</param>
        /// <param name="DsNode">DsNode.</param>
        /// <param name="Id">Id.</param>
        /// <param name="SfField">SfField.</param>
        /// <param name="SfFieldName">SfFieldName.</param>
        /// <param name="SfFolder">SfFolder.</param>
        /// <param name="SfLockedValue">SfLockedValue.</param>
        public ConnectSalesforceField(string DsAttribute = default(string), string DsLink = default(string), string DsNode = default(string), string Id = default(string), string SfField = default(string), string SfFieldName = default(string), string SfFolder = default(string), string SfLockedValue = default(string))
        {
            this.DsAttribute = DsAttribute;
            this.DsLink = DsLink;
            this.DsNode = DsNode;
            this.Id = Id;
            this.SfField = SfField;
            this.SfFieldName = SfFieldName;
            this.SfFolder = SfFolder;
            this.SfLockedValue = SfLockedValue;
        }
        
        /// <summary>
        /// Gets or Sets DsAttribute
        /// </summary>
        [DataMember(Name="dsAttribute", EmitDefaultValue=false)]
        public string DsAttribute { get; set; }
        /// <summary>
        /// Gets or Sets DsLink
        /// </summary>
        [DataMember(Name="dsLink", EmitDefaultValue=false)]
        public string DsLink { get; set; }
        /// <summary>
        /// Gets or Sets DsNode
        /// </summary>
        [DataMember(Name="dsNode", EmitDefaultValue=false)]
        public string DsNode { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets SfField
        /// </summary>
        [DataMember(Name="sfField", EmitDefaultValue=false)]
        public string SfField { get; set; }
        /// <summary>
        /// Gets or Sets SfFieldName
        /// </summary>
        [DataMember(Name="sfFieldName", EmitDefaultValue=false)]
        public string SfFieldName { get; set; }
        /// <summary>
        /// Gets or Sets SfFolder
        /// </summary>
        [DataMember(Name="sfFolder", EmitDefaultValue=false)]
        public string SfFolder { get; set; }
        /// <summary>
        /// Gets or Sets SfLockedValue
        /// </summary>
        [DataMember(Name="sfLockedValue", EmitDefaultValue=false)]
        public string SfLockedValue { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectSalesforceField {\n");
            sb.Append("  DsAttribute: ").Append(DsAttribute).Append("\n");
            sb.Append("  DsLink: ").Append(DsLink).Append("\n");
            sb.Append("  DsNode: ").Append(DsNode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SfField: ").Append(SfField).Append("\n");
            sb.Append("  SfFieldName: ").Append(SfFieldName).Append("\n");
            sb.Append("  SfFolder: ").Append(SfFolder).Append("\n");
            sb.Append("  SfLockedValue: ").Append(SfLockedValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConnectSalesforceField);
        }

        /// <summary>
        /// Returns true if ConnectSalesforceField instances are equal
        /// </summary>
        /// <param name="other">Instance of ConnectSalesforceField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectSalesforceField other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DsAttribute == other.DsAttribute ||
                    this.DsAttribute != null &&
                    this.DsAttribute.Equals(other.DsAttribute)
                ) && 
                (
                    this.DsLink == other.DsLink ||
                    this.DsLink != null &&
                    this.DsLink.Equals(other.DsLink)
                ) && 
                (
                    this.DsNode == other.DsNode ||
                    this.DsNode != null &&
                    this.DsNode.Equals(other.DsNode)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.SfField == other.SfField ||
                    this.SfField != null &&
                    this.SfField.Equals(other.SfField)
                ) && 
                (
                    this.SfFieldName == other.SfFieldName ||
                    this.SfFieldName != null &&
                    this.SfFieldName.Equals(other.SfFieldName)
                ) && 
                (
                    this.SfFolder == other.SfFolder ||
                    this.SfFolder != null &&
                    this.SfFolder.Equals(other.SfFolder)
                ) && 
                (
                    this.SfLockedValue == other.SfLockedValue ||
                    this.SfLockedValue != null &&
                    this.SfLockedValue.Equals(other.SfLockedValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DsAttribute != null)
                    hash = hash * 59 + this.DsAttribute.GetHashCode();
                if (this.DsLink != null)
                    hash = hash * 59 + this.DsLink.GetHashCode();
                if (this.DsNode != null)
                    hash = hash * 59 + this.DsNode.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.SfField != null)
                    hash = hash * 59 + this.SfField.GetHashCode();
                if (this.SfFieldName != null)
                    hash = hash * 59 + this.SfFieldName.GetHashCode();
                if (this.SfFolder != null)
                    hash = hash * 59 + this.SfFolder.GetHashCode();
                if (this.SfLockedValue != null)
                    hash = hash * 59 + this.SfLockedValue.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
