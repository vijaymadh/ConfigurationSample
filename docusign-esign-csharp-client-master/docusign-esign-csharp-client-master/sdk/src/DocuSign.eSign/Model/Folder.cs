/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Folder
    /// </summary>
    [DataContract]
    public partial class Folder :  IEquatable<Folder>, IValidatableObject
    {
        public Folder()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Folder" /> class.
        /// </summary>
        /// <param name="ErrorDetails">ErrorDetails.</param>
        /// <param name="Filter">Filter.</param>
        /// <param name="FolderId">FolderId.</param>
        /// <param name="FolderItems">A list of the envelopes in the specified folder or folders. .</param>
        /// <param name="Folders">A collection of folder objects returned in a response..</param>
        /// <param name="HasAccess">HasAccess.</param>
        /// <param name="HasSubFolders">HasSubFolders.</param>
        /// <param name="ItemCount">ItemCount.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Owner">Owner.</param>
        /// <param name="ParentFolderId">ParentFolderId.</param>
        /// <param name="ParentFolderUri">ParentFolderUri.</param>
        /// <param name="SubFolderCount">SubFolderCount.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Uri">Uri.</param>
        public Folder(ErrorDetails ErrorDetails = default(ErrorDetails), Filter Filter = default(Filter), string FolderId = default(string), List<FolderItemV2> FolderItems = default(List<FolderItemV2>), List<Folder> Folders = default(List<Folder>), string HasAccess = default(string), string HasSubFolders = default(string), string ItemCount = default(string), string Name = default(string), UserInfo Owner = default(UserInfo), string ParentFolderId = default(string), string ParentFolderUri = default(string), string SubFolderCount = default(string), string Type = default(string), string Uri = default(string))
        {
            this.ErrorDetails = ErrorDetails;
            this.Filter = Filter;
            this.FolderId = FolderId;
            this.FolderItems = FolderItems;
            this.Folders = Folders;
            this.HasAccess = HasAccess;
            this.HasSubFolders = HasSubFolders;
            this.ItemCount = ItemCount;
            this.Name = Name;
            this.Owner = Owner;
            this.ParentFolderId = ParentFolderId;
            this.ParentFolderUri = ParentFolderUri;
            this.SubFolderCount = SubFolderCount;
            this.Type = Type;
            this.Uri = Uri;
        }
        
        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public Filter Filter { get; set; }
        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public string FolderId { get; set; }
        /// <summary>
        /// A list of the envelopes in the specified folder or folders. 
        /// </summary>
        /// <value>A list of the envelopes in the specified folder or folders. </value>
        [DataMember(Name="folderItems", EmitDefaultValue=false)]
        public List<FolderItemV2> FolderItems { get; set; }
        /// <summary>
        /// A collection of folder objects returned in a response.
        /// </summary>
        /// <value>A collection of folder objects returned in a response.</value>
        [DataMember(Name="folders", EmitDefaultValue=false)]
        public List<Folder> Folders { get; set; }
        /// <summary>
        /// Gets or Sets HasAccess
        /// </summary>
        [DataMember(Name="hasAccess", EmitDefaultValue=false)]
        public string HasAccess { get; set; }
        /// <summary>
        /// Gets or Sets HasSubFolders
        /// </summary>
        [DataMember(Name="hasSubFolders", EmitDefaultValue=false)]
        public string HasSubFolders { get; set; }
        /// <summary>
        /// Gets or Sets ItemCount
        /// </summary>
        [DataMember(Name="itemCount", EmitDefaultValue=false)]
        public string ItemCount { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public UserInfo Owner { get; set; }
        /// <summary>
        /// Gets or Sets ParentFolderId
        /// </summary>
        [DataMember(Name="parentFolderId", EmitDefaultValue=false)]
        public string ParentFolderId { get; set; }
        /// <summary>
        /// Gets or Sets ParentFolderUri
        /// </summary>
        [DataMember(Name="parentFolderUri", EmitDefaultValue=false)]
        public string ParentFolderUri { get; set; }
        /// <summary>
        /// Gets or Sets SubFolderCount
        /// </summary>
        [DataMember(Name="subFolderCount", EmitDefaultValue=false)]
        public string SubFolderCount { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Folder {\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  FolderItems: ").Append(FolderItems).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  HasAccess: ").Append(HasAccess).Append("\n");
            sb.Append("  HasSubFolders: ").Append(HasSubFolders).Append("\n");
            sb.Append("  ItemCount: ").Append(ItemCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  ParentFolderId: ").Append(ParentFolderId).Append("\n");
            sb.Append("  ParentFolderUri: ").Append(ParentFolderUri).Append("\n");
            sb.Append("  SubFolderCount: ").Append(SubFolderCount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Folder);
        }

        /// <summary>
        /// Returns true if Folder instances are equal
        /// </summary>
        /// <param name="other">Instance of Folder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Folder other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.Filter == other.Filter ||
                    this.Filter != null &&
                    this.Filter.Equals(other.Filter)
                ) && 
                (
                    this.FolderId == other.FolderId ||
                    this.FolderId != null &&
                    this.FolderId.Equals(other.FolderId)
                ) && 
                (
                    this.FolderItems == other.FolderItems ||
                    this.FolderItems != null &&
                    this.FolderItems.SequenceEqual(other.FolderItems)
                ) && 
                (
                    this.Folders == other.Folders ||
                    this.Folders != null &&
                    this.Folders.SequenceEqual(other.Folders)
                ) && 
                (
                    this.HasAccess == other.HasAccess ||
                    this.HasAccess != null &&
                    this.HasAccess.Equals(other.HasAccess)
                ) && 
                (
                    this.HasSubFolders == other.HasSubFolders ||
                    this.HasSubFolders != null &&
                    this.HasSubFolders.Equals(other.HasSubFolders)
                ) && 
                (
                    this.ItemCount == other.ItemCount ||
                    this.ItemCount != null &&
                    this.ItemCount.Equals(other.ItemCount)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Owner == other.Owner ||
                    this.Owner != null &&
                    this.Owner.Equals(other.Owner)
                ) && 
                (
                    this.ParentFolderId == other.ParentFolderId ||
                    this.ParentFolderId != null &&
                    this.ParentFolderId.Equals(other.ParentFolderId)
                ) && 
                (
                    this.ParentFolderUri == other.ParentFolderUri ||
                    this.ParentFolderUri != null &&
                    this.ParentFolderUri.Equals(other.ParentFolderUri)
                ) && 
                (
                    this.SubFolderCount == other.SubFolderCount ||
                    this.SubFolderCount != null &&
                    this.SubFolderCount.Equals(other.SubFolderCount)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Uri == other.Uri ||
                    this.Uri != null &&
                    this.Uri.Equals(other.Uri)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.Filter != null)
                    hash = hash * 59 + this.Filter.GetHashCode();
                if (this.FolderId != null)
                    hash = hash * 59 + this.FolderId.GetHashCode();
                if (this.FolderItems != null)
                    hash = hash * 59 + this.FolderItems.GetHashCode();
                if (this.Folders != null)
                    hash = hash * 59 + this.Folders.GetHashCode();
                if (this.HasAccess != null)
                    hash = hash * 59 + this.HasAccess.GetHashCode();
                if (this.HasSubFolders != null)
                    hash = hash * 59 + this.HasSubFolders.GetHashCode();
                if (this.ItemCount != null)
                    hash = hash * 59 + this.ItemCount.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Owner != null)
                    hash = hash * 59 + this.Owner.GetHashCode();
                if (this.ParentFolderId != null)
                    hash = hash * 59 + this.ParentFolderId.GetHashCode();
                if (this.ParentFolderUri != null)
                    hash = hash * 59 + this.ParentFolderUri.GetHashCode();
                if (this.SubFolderCount != null)
                    hash = hash * 59 + this.SubFolderCount.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Uri != null)
                    hash = hash * 59 + this.Uri.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
