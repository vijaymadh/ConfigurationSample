/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// OcrRequest
    /// </summary>
    [DataContract]
    public partial class OcrRequest :  IEquatable<OcrRequest>, IValidatableObject
    {
        public OcrRequest()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OcrRequest" /> class.
        /// </summary>
        /// <param name="OcrLanguage">.</param>
        /// <param name="PageSelection">.</param>
        /// <param name="SetPageOrientation">.</param>
        /// <param name="ShowFrames">.</param>
        /// <param name="ShowText">.</param>
        /// <param name="SkipPagesHavingExistingExtractableText">.</param>
        public OcrRequest(string OcrLanguage = default(string), string PageSelection = default(string), string SetPageOrientation = default(string), string ShowFrames = default(string), string ShowText = default(string), string SkipPagesHavingExistingExtractableText = default(string))
        {
            this.OcrLanguage = OcrLanguage;
            this.PageSelection = PageSelection;
            this.SetPageOrientation = SetPageOrientation;
            this.ShowFrames = ShowFrames;
            this.ShowText = ShowText;
            this.SkipPagesHavingExistingExtractableText = SkipPagesHavingExistingExtractableText;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ocrLanguage", EmitDefaultValue=false)]
        public string OcrLanguage { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pageSelection", EmitDefaultValue=false)]
        public string PageSelection { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="setPageOrientation", EmitDefaultValue=false)]
        public string SetPageOrientation { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="showFrames", EmitDefaultValue=false)]
        public string ShowFrames { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="showText", EmitDefaultValue=false)]
        public string ShowText { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="skipPagesHavingExistingExtractableText", EmitDefaultValue=false)]
        public string SkipPagesHavingExistingExtractableText { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OcrRequest {\n");
            sb.Append("  OcrLanguage: ").Append(OcrLanguage).Append("\n");
            sb.Append("  PageSelection: ").Append(PageSelection).Append("\n");
            sb.Append("  SetPageOrientation: ").Append(SetPageOrientation).Append("\n");
            sb.Append("  ShowFrames: ").Append(ShowFrames).Append("\n");
            sb.Append("  ShowText: ").Append(ShowText).Append("\n");
            sb.Append("  SkipPagesHavingExistingExtractableText: ").Append(SkipPagesHavingExistingExtractableText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OcrRequest);
        }

        /// <summary>
        /// Returns true if OcrRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of OcrRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OcrRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OcrLanguage == other.OcrLanguage ||
                    this.OcrLanguage != null &&
                    this.OcrLanguage.Equals(other.OcrLanguage)
                ) && 
                (
                    this.PageSelection == other.PageSelection ||
                    this.PageSelection != null &&
                    this.PageSelection.Equals(other.PageSelection)
                ) && 
                (
                    this.SetPageOrientation == other.SetPageOrientation ||
                    this.SetPageOrientation != null &&
                    this.SetPageOrientation.Equals(other.SetPageOrientation)
                ) && 
                (
                    this.ShowFrames == other.ShowFrames ||
                    this.ShowFrames != null &&
                    this.ShowFrames.Equals(other.ShowFrames)
                ) && 
                (
                    this.ShowText == other.ShowText ||
                    this.ShowText != null &&
                    this.ShowText.Equals(other.ShowText)
                ) && 
                (
                    this.SkipPagesHavingExistingExtractableText == other.SkipPagesHavingExistingExtractableText ||
                    this.SkipPagesHavingExistingExtractableText != null &&
                    this.SkipPagesHavingExistingExtractableText.Equals(other.SkipPagesHavingExistingExtractableText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OcrLanguage != null)
                    hash = hash * 59 + this.OcrLanguage.GetHashCode();
                if (this.PageSelection != null)
                    hash = hash * 59 + this.PageSelection.GetHashCode();
                if (this.SetPageOrientation != null)
                    hash = hash * 59 + this.SetPageOrientation.GetHashCode();
                if (this.ShowFrames != null)
                    hash = hash * 59 + this.ShowFrames.GetHashCode();
                if (this.ShowText != null)
                    hash = hash * 59 + this.ShowText.GetHashCode();
                if (this.SkipPagesHavingExistingExtractableText != null)
                    hash = hash * 59 + this.SkipPagesHavingExistingExtractableText.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
