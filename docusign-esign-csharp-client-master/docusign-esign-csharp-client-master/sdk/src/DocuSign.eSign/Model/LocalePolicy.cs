/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// LocalePolicy
    /// </summary>
    [DataContract]
    public partial class LocalePolicy :  IEquatable<LocalePolicy>, IValidatableObject
    {
        public LocalePolicy()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalePolicy" /> class.
        /// </summary>
        /// <param name="AddressFormat">AddressFormat.</param>
        /// <param name="AddressFormatMetadata">AddressFormatMetadata.</param>
        /// <param name="AllowRegion">AllowRegion.</param>
        /// <param name="CalendarType">CalendarType.</param>
        /// <param name="CalendarTypeMetadata">CalendarTypeMetadata.</param>
        /// <param name="CultureName">CultureName.</param>
        /// <param name="CultureNameMetadata">CultureNameMetadata.</param>
        /// <param name="CurrencyCode">CurrencyCode.</param>
        /// <param name="CurrencyCodeMetadata">CurrencyCodeMetadata.</param>
        /// <param name="CurrencyNegativeFormat">CurrencyNegativeFormat.</param>
        /// <param name="CurrencyNegativeFormatMetadata">CurrencyNegativeFormatMetadata.</param>
        /// <param name="CurrencyPositiveFormat">CurrencyPositiveFormat.</param>
        /// <param name="CurrencyPositiveFormatMetadata">CurrencyPositiveFormatMetadata.</param>
        /// <param name="CustomDateFormat">CustomDateFormat.</param>
        /// <param name="CustomSignDateFormat">CustomSignDateFormat.</param>
        /// <param name="CustomSignTimeFormat">CustomSignTimeFormat.</param>
        /// <param name="CustomTimeFormat">CustomTimeFormat.</param>
        /// <param name="DateFormat">DateFormat.</param>
        /// <param name="DateFormatMetadata">DateFormatMetadata.</param>
        /// <param name="EffectiveAddressFormat">EffectiveAddressFormat.</param>
        /// <param name="EffectiveCalendarType">EffectiveCalendarType.</param>
        /// <param name="EffectiveCurrencyCode">EffectiveCurrencyCode.</param>
        /// <param name="EffectiveCurrencyNegativeFormat">EffectiveCurrencyNegativeFormat.</param>
        /// <param name="EffectiveCurrencyPositiveFormat">EffectiveCurrencyPositiveFormat.</param>
        /// <param name="EffectiveCustomDateFormat">EffectiveCustomDateFormat.</param>
        /// <param name="EffectiveCustomTimeFormat">EffectiveCustomTimeFormat.</param>
        /// <param name="EffectiveDateFormat">EffectiveDateFormat.</param>
        /// <param name="EffectiveInitialFormat">EffectiveInitialFormat.</param>
        /// <param name="EffectiveNameFormat">EffectiveNameFormat.</param>
        /// <param name="EffectiveTimeFormat">EffectiveTimeFormat.</param>
        /// <param name="EffectiveTimeZone">EffectiveTimeZone.</param>
        /// <param name="InitialFormat">InitialFormat.</param>
        /// <param name="InitialFormatMetadata">InitialFormatMetadata.</param>
        /// <param name="NameFormat">NameFormat.</param>
        /// <param name="NameFormatMetadata">NameFormatMetadata.</param>
        /// <param name="SignDateFormat">SignDateFormat.</param>
        /// <param name="SignDateFormatMetadata">SignDateFormatMetadata.</param>
        /// <param name="SignTimeFormat">SignTimeFormat.</param>
        /// <param name="SignTimeFormatMetadata">SignTimeFormatMetadata.</param>
        /// <param name="TimeFormat">TimeFormat.</param>
        /// <param name="TimeFormatMetadata">TimeFormatMetadata.</param>
        /// <param name="TimeZone">TimeZone.</param>
        /// <param name="TimeZoneMetadata">TimeZoneMetadata.</param>
        public LocalePolicy(string AddressFormat = default(string), SettingsMetadata AddressFormatMetadata = default(SettingsMetadata), string AllowRegion = default(string), string CalendarType = default(string), SettingsMetadata CalendarTypeMetadata = default(SettingsMetadata), string CultureName = default(string), SettingsMetadata CultureNameMetadata = default(SettingsMetadata), string CurrencyCode = default(string), SettingsMetadata CurrencyCodeMetadata = default(SettingsMetadata), string CurrencyNegativeFormat = default(string), SettingsMetadata CurrencyNegativeFormatMetadata = default(SettingsMetadata), string CurrencyPositiveFormat = default(string), SettingsMetadata CurrencyPositiveFormatMetadata = default(SettingsMetadata), string CustomDateFormat = default(string), string CustomSignDateFormat = default(string), string CustomSignTimeFormat = default(string), string CustomTimeFormat = default(string), string DateFormat = default(string), SettingsMetadata DateFormatMetadata = default(SettingsMetadata), string EffectiveAddressFormat = default(string), string EffectiveCalendarType = default(string), string EffectiveCurrencyCode = default(string), string EffectiveCurrencyNegativeFormat = default(string), string EffectiveCurrencyPositiveFormat = default(string), string EffectiveCustomDateFormat = default(string), string EffectiveCustomTimeFormat = default(string), string EffectiveDateFormat = default(string), string EffectiveInitialFormat = default(string), string EffectiveNameFormat = default(string), string EffectiveTimeFormat = default(string), string EffectiveTimeZone = default(string), string InitialFormat = default(string), SettingsMetadata InitialFormatMetadata = default(SettingsMetadata), string NameFormat = default(string), SettingsMetadata NameFormatMetadata = default(SettingsMetadata), string SignDateFormat = default(string), SettingsMetadata SignDateFormatMetadata = default(SettingsMetadata), string SignTimeFormat = default(string), SettingsMetadata SignTimeFormatMetadata = default(SettingsMetadata), string TimeFormat = default(string), SettingsMetadata TimeFormatMetadata = default(SettingsMetadata), string TimeZone = default(string), SettingsMetadata TimeZoneMetadata = default(SettingsMetadata))
        {
            this.AddressFormat = AddressFormat;
            this.AddressFormatMetadata = AddressFormatMetadata;
            this.AllowRegion = AllowRegion;
            this.CalendarType = CalendarType;
            this.CalendarTypeMetadata = CalendarTypeMetadata;
            this.CultureName = CultureName;
            this.CultureNameMetadata = CultureNameMetadata;
            this.CurrencyCode = CurrencyCode;
            this.CurrencyCodeMetadata = CurrencyCodeMetadata;
            this.CurrencyNegativeFormat = CurrencyNegativeFormat;
            this.CurrencyNegativeFormatMetadata = CurrencyNegativeFormatMetadata;
            this.CurrencyPositiveFormat = CurrencyPositiveFormat;
            this.CurrencyPositiveFormatMetadata = CurrencyPositiveFormatMetadata;
            this.CustomDateFormat = CustomDateFormat;
            this.CustomSignDateFormat = CustomSignDateFormat;
            this.CustomSignTimeFormat = CustomSignTimeFormat;
            this.CustomTimeFormat = CustomTimeFormat;
            this.DateFormat = DateFormat;
            this.DateFormatMetadata = DateFormatMetadata;
            this.EffectiveAddressFormat = EffectiveAddressFormat;
            this.EffectiveCalendarType = EffectiveCalendarType;
            this.EffectiveCurrencyCode = EffectiveCurrencyCode;
            this.EffectiveCurrencyNegativeFormat = EffectiveCurrencyNegativeFormat;
            this.EffectiveCurrencyPositiveFormat = EffectiveCurrencyPositiveFormat;
            this.EffectiveCustomDateFormat = EffectiveCustomDateFormat;
            this.EffectiveCustomTimeFormat = EffectiveCustomTimeFormat;
            this.EffectiveDateFormat = EffectiveDateFormat;
            this.EffectiveInitialFormat = EffectiveInitialFormat;
            this.EffectiveNameFormat = EffectiveNameFormat;
            this.EffectiveTimeFormat = EffectiveTimeFormat;
            this.EffectiveTimeZone = EffectiveTimeZone;
            this.InitialFormat = InitialFormat;
            this.InitialFormatMetadata = InitialFormatMetadata;
            this.NameFormat = NameFormat;
            this.NameFormatMetadata = NameFormatMetadata;
            this.SignDateFormat = SignDateFormat;
            this.SignDateFormatMetadata = SignDateFormatMetadata;
            this.SignTimeFormat = SignTimeFormat;
            this.SignTimeFormatMetadata = SignTimeFormatMetadata;
            this.TimeFormat = TimeFormat;
            this.TimeFormatMetadata = TimeFormatMetadata;
            this.TimeZone = TimeZone;
            this.TimeZoneMetadata = TimeZoneMetadata;
        }
        
        /// <summary>
        /// Gets or Sets AddressFormat
        /// </summary>
        [DataMember(Name="addressFormat", EmitDefaultValue=false)]
        public string AddressFormat { get; set; }
        /// <summary>
        /// Gets or Sets AddressFormatMetadata
        /// </summary>
        [DataMember(Name="addressFormatMetadata", EmitDefaultValue=false)]
        public SettingsMetadata AddressFormatMetadata { get; set; }
        /// <summary>
        /// Gets or Sets AllowRegion
        /// </summary>
        [DataMember(Name="allowRegion", EmitDefaultValue=false)]
        public string AllowRegion { get; set; }
        /// <summary>
        /// Gets or Sets CalendarType
        /// </summary>
        [DataMember(Name="calendarType", EmitDefaultValue=false)]
        public string CalendarType { get; set; }
        /// <summary>
        /// Gets or Sets CalendarTypeMetadata
        /// </summary>
        [DataMember(Name="calendarTypeMetadata", EmitDefaultValue=false)]
        public SettingsMetadata CalendarTypeMetadata { get; set; }
        /// <summary>
        /// Gets or Sets CultureName
        /// </summary>
        [DataMember(Name="cultureName", EmitDefaultValue=false)]
        public string CultureName { get; set; }
        /// <summary>
        /// Gets or Sets CultureNameMetadata
        /// </summary>
        [DataMember(Name="cultureNameMetadata", EmitDefaultValue=false)]
        public SettingsMetadata CultureNameMetadata { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyCodeMetadata
        /// </summary>
        [DataMember(Name="currencyCodeMetadata", EmitDefaultValue=false)]
        public SettingsMetadata CurrencyCodeMetadata { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyNegativeFormat
        /// </summary>
        [DataMember(Name="currencyNegativeFormat", EmitDefaultValue=false)]
        public string CurrencyNegativeFormat { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyNegativeFormatMetadata
        /// </summary>
        [DataMember(Name="currencyNegativeFormatMetadata", EmitDefaultValue=false)]
        public SettingsMetadata CurrencyNegativeFormatMetadata { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyPositiveFormat
        /// </summary>
        [DataMember(Name="currencyPositiveFormat", EmitDefaultValue=false)]
        public string CurrencyPositiveFormat { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyPositiveFormatMetadata
        /// </summary>
        [DataMember(Name="currencyPositiveFormatMetadata", EmitDefaultValue=false)]
        public SettingsMetadata CurrencyPositiveFormatMetadata { get; set; }
        /// <summary>
        /// Gets or Sets CustomDateFormat
        /// </summary>
        [DataMember(Name="customDateFormat", EmitDefaultValue=false)]
        public string CustomDateFormat { get; set; }
        /// <summary>
        /// Gets or Sets CustomSignDateFormat
        /// </summary>
        [DataMember(Name="customSignDateFormat", EmitDefaultValue=false)]
        public string CustomSignDateFormat { get; set; }
        /// <summary>
        /// Gets or Sets CustomSignTimeFormat
        /// </summary>
        [DataMember(Name="customSignTimeFormat", EmitDefaultValue=false)]
        public string CustomSignTimeFormat { get; set; }
        /// <summary>
        /// Gets or Sets CustomTimeFormat
        /// </summary>
        [DataMember(Name="customTimeFormat", EmitDefaultValue=false)]
        public string CustomTimeFormat { get; set; }
        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name="dateFormat", EmitDefaultValue=false)]
        public string DateFormat { get; set; }
        /// <summary>
        /// Gets or Sets DateFormatMetadata
        /// </summary>
        [DataMember(Name="dateFormatMetadata", EmitDefaultValue=false)]
        public SettingsMetadata DateFormatMetadata { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveAddressFormat
        /// </summary>
        [DataMember(Name="effectiveAddressFormat", EmitDefaultValue=false)]
        public string EffectiveAddressFormat { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveCalendarType
        /// </summary>
        [DataMember(Name="effectiveCalendarType", EmitDefaultValue=false)]
        public string EffectiveCalendarType { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveCurrencyCode
        /// </summary>
        [DataMember(Name="effectiveCurrencyCode", EmitDefaultValue=false)]
        public string EffectiveCurrencyCode { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveCurrencyNegativeFormat
        /// </summary>
        [DataMember(Name="effectiveCurrencyNegativeFormat", EmitDefaultValue=false)]
        public string EffectiveCurrencyNegativeFormat { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveCurrencyPositiveFormat
        /// </summary>
        [DataMember(Name="effectiveCurrencyPositiveFormat", EmitDefaultValue=false)]
        public string EffectiveCurrencyPositiveFormat { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveCustomDateFormat
        /// </summary>
        [DataMember(Name="effectiveCustomDateFormat", EmitDefaultValue=false)]
        public string EffectiveCustomDateFormat { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveCustomTimeFormat
        /// </summary>
        [DataMember(Name="effectiveCustomTimeFormat", EmitDefaultValue=false)]
        public string EffectiveCustomTimeFormat { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveDateFormat
        /// </summary>
        [DataMember(Name="effectiveDateFormat", EmitDefaultValue=false)]
        public string EffectiveDateFormat { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveInitialFormat
        /// </summary>
        [DataMember(Name="effectiveInitialFormat", EmitDefaultValue=false)]
        public string EffectiveInitialFormat { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveNameFormat
        /// </summary>
        [DataMember(Name="effectiveNameFormat", EmitDefaultValue=false)]
        public string EffectiveNameFormat { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveTimeFormat
        /// </summary>
        [DataMember(Name="effectiveTimeFormat", EmitDefaultValue=false)]
        public string EffectiveTimeFormat { get; set; }
        /// <summary>
        /// Gets or Sets EffectiveTimeZone
        /// </summary>
        [DataMember(Name="effectiveTimeZone", EmitDefaultValue=false)]
        public string EffectiveTimeZone { get; set; }
        /// <summary>
        /// Gets or Sets InitialFormat
        /// </summary>
        [DataMember(Name="initialFormat", EmitDefaultValue=false)]
        public string InitialFormat { get; set; }
        /// <summary>
        /// Gets or Sets InitialFormatMetadata
        /// </summary>
        [DataMember(Name="initialFormatMetadata", EmitDefaultValue=false)]
        public SettingsMetadata InitialFormatMetadata { get; set; }
        /// <summary>
        /// Gets or Sets NameFormat
        /// </summary>
        [DataMember(Name="nameFormat", EmitDefaultValue=false)]
        public string NameFormat { get; set; }
        /// <summary>
        /// Gets or Sets NameFormatMetadata
        /// </summary>
        [DataMember(Name="nameFormatMetadata", EmitDefaultValue=false)]
        public SettingsMetadata NameFormatMetadata { get; set; }
        /// <summary>
        /// Gets or Sets SignDateFormat
        /// </summary>
        [DataMember(Name="signDateFormat", EmitDefaultValue=false)]
        public string SignDateFormat { get; set; }
        /// <summary>
        /// Gets or Sets SignDateFormatMetadata
        /// </summary>
        [DataMember(Name="signDateFormatMetadata", EmitDefaultValue=false)]
        public SettingsMetadata SignDateFormatMetadata { get; set; }
        /// <summary>
        /// Gets or Sets SignTimeFormat
        /// </summary>
        [DataMember(Name="signTimeFormat", EmitDefaultValue=false)]
        public string SignTimeFormat { get; set; }
        /// <summary>
        /// Gets or Sets SignTimeFormatMetadata
        /// </summary>
        [DataMember(Name="signTimeFormatMetadata", EmitDefaultValue=false)]
        public SettingsMetadata SignTimeFormatMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TimeFormat
        /// </summary>
        [DataMember(Name="timeFormat", EmitDefaultValue=false)]
        public string TimeFormat { get; set; }
        /// <summary>
        /// Gets or Sets TimeFormatMetadata
        /// </summary>
        [DataMember(Name="timeFormatMetadata", EmitDefaultValue=false)]
        public SettingsMetadata TimeFormatMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }
        /// <summary>
        /// Gets or Sets TimeZoneMetadata
        /// </summary>
        [DataMember(Name="timeZoneMetadata", EmitDefaultValue=false)]
        public SettingsMetadata TimeZoneMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalePolicy {\n");
            sb.Append("  AddressFormat: ").Append(AddressFormat).Append("\n");
            sb.Append("  AddressFormatMetadata: ").Append(AddressFormatMetadata).Append("\n");
            sb.Append("  AllowRegion: ").Append(AllowRegion).Append("\n");
            sb.Append("  CalendarType: ").Append(CalendarType).Append("\n");
            sb.Append("  CalendarTypeMetadata: ").Append(CalendarTypeMetadata).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  CultureNameMetadata: ").Append(CultureNameMetadata).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyCodeMetadata: ").Append(CurrencyCodeMetadata).Append("\n");
            sb.Append("  CurrencyNegativeFormat: ").Append(CurrencyNegativeFormat).Append("\n");
            sb.Append("  CurrencyNegativeFormatMetadata: ").Append(CurrencyNegativeFormatMetadata).Append("\n");
            sb.Append("  CurrencyPositiveFormat: ").Append(CurrencyPositiveFormat).Append("\n");
            sb.Append("  CurrencyPositiveFormatMetadata: ").Append(CurrencyPositiveFormatMetadata).Append("\n");
            sb.Append("  CustomDateFormat: ").Append(CustomDateFormat).Append("\n");
            sb.Append("  CustomSignDateFormat: ").Append(CustomSignDateFormat).Append("\n");
            sb.Append("  CustomSignTimeFormat: ").Append(CustomSignTimeFormat).Append("\n");
            sb.Append("  CustomTimeFormat: ").Append(CustomTimeFormat).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  DateFormatMetadata: ").Append(DateFormatMetadata).Append("\n");
            sb.Append("  EffectiveAddressFormat: ").Append(EffectiveAddressFormat).Append("\n");
            sb.Append("  EffectiveCalendarType: ").Append(EffectiveCalendarType).Append("\n");
            sb.Append("  EffectiveCurrencyCode: ").Append(EffectiveCurrencyCode).Append("\n");
            sb.Append("  EffectiveCurrencyNegativeFormat: ").Append(EffectiveCurrencyNegativeFormat).Append("\n");
            sb.Append("  EffectiveCurrencyPositiveFormat: ").Append(EffectiveCurrencyPositiveFormat).Append("\n");
            sb.Append("  EffectiveCustomDateFormat: ").Append(EffectiveCustomDateFormat).Append("\n");
            sb.Append("  EffectiveCustomTimeFormat: ").Append(EffectiveCustomTimeFormat).Append("\n");
            sb.Append("  EffectiveDateFormat: ").Append(EffectiveDateFormat).Append("\n");
            sb.Append("  EffectiveInitialFormat: ").Append(EffectiveInitialFormat).Append("\n");
            sb.Append("  EffectiveNameFormat: ").Append(EffectiveNameFormat).Append("\n");
            sb.Append("  EffectiveTimeFormat: ").Append(EffectiveTimeFormat).Append("\n");
            sb.Append("  EffectiveTimeZone: ").Append(EffectiveTimeZone).Append("\n");
            sb.Append("  InitialFormat: ").Append(InitialFormat).Append("\n");
            sb.Append("  InitialFormatMetadata: ").Append(InitialFormatMetadata).Append("\n");
            sb.Append("  NameFormat: ").Append(NameFormat).Append("\n");
            sb.Append("  NameFormatMetadata: ").Append(NameFormatMetadata).Append("\n");
            sb.Append("  SignDateFormat: ").Append(SignDateFormat).Append("\n");
            sb.Append("  SignDateFormatMetadata: ").Append(SignDateFormatMetadata).Append("\n");
            sb.Append("  SignTimeFormat: ").Append(SignTimeFormat).Append("\n");
            sb.Append("  SignTimeFormatMetadata: ").Append(SignTimeFormatMetadata).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  TimeFormatMetadata: ").Append(TimeFormatMetadata).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  TimeZoneMetadata: ").Append(TimeZoneMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LocalePolicy);
        }

        /// <summary>
        /// Returns true if LocalePolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of LocalePolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalePolicy other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AddressFormat == other.AddressFormat ||
                    this.AddressFormat != null &&
                    this.AddressFormat.Equals(other.AddressFormat)
                ) && 
                (
                    this.AddressFormatMetadata == other.AddressFormatMetadata ||
                    this.AddressFormatMetadata != null &&
                    this.AddressFormatMetadata.Equals(other.AddressFormatMetadata)
                ) && 
                (
                    this.AllowRegion == other.AllowRegion ||
                    this.AllowRegion != null &&
                    this.AllowRegion.Equals(other.AllowRegion)
                ) && 
                (
                    this.CalendarType == other.CalendarType ||
                    this.CalendarType != null &&
                    this.CalendarType.Equals(other.CalendarType)
                ) && 
                (
                    this.CalendarTypeMetadata == other.CalendarTypeMetadata ||
                    this.CalendarTypeMetadata != null &&
                    this.CalendarTypeMetadata.Equals(other.CalendarTypeMetadata)
                ) && 
                (
                    this.CultureName == other.CultureName ||
                    this.CultureName != null &&
                    this.CultureName.Equals(other.CultureName)
                ) && 
                (
                    this.CultureNameMetadata == other.CultureNameMetadata ||
                    this.CultureNameMetadata != null &&
                    this.CultureNameMetadata.Equals(other.CultureNameMetadata)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.CurrencyCodeMetadata == other.CurrencyCodeMetadata ||
                    this.CurrencyCodeMetadata != null &&
                    this.CurrencyCodeMetadata.Equals(other.CurrencyCodeMetadata)
                ) && 
                (
                    this.CurrencyNegativeFormat == other.CurrencyNegativeFormat ||
                    this.CurrencyNegativeFormat != null &&
                    this.CurrencyNegativeFormat.Equals(other.CurrencyNegativeFormat)
                ) && 
                (
                    this.CurrencyNegativeFormatMetadata == other.CurrencyNegativeFormatMetadata ||
                    this.CurrencyNegativeFormatMetadata != null &&
                    this.CurrencyNegativeFormatMetadata.Equals(other.CurrencyNegativeFormatMetadata)
                ) && 
                (
                    this.CurrencyPositiveFormat == other.CurrencyPositiveFormat ||
                    this.CurrencyPositiveFormat != null &&
                    this.CurrencyPositiveFormat.Equals(other.CurrencyPositiveFormat)
                ) && 
                (
                    this.CurrencyPositiveFormatMetadata == other.CurrencyPositiveFormatMetadata ||
                    this.CurrencyPositiveFormatMetadata != null &&
                    this.CurrencyPositiveFormatMetadata.Equals(other.CurrencyPositiveFormatMetadata)
                ) && 
                (
                    this.CustomDateFormat == other.CustomDateFormat ||
                    this.CustomDateFormat != null &&
                    this.CustomDateFormat.Equals(other.CustomDateFormat)
                ) && 
                (
                    this.CustomSignDateFormat == other.CustomSignDateFormat ||
                    this.CustomSignDateFormat != null &&
                    this.CustomSignDateFormat.Equals(other.CustomSignDateFormat)
                ) && 
                (
                    this.CustomSignTimeFormat == other.CustomSignTimeFormat ||
                    this.CustomSignTimeFormat != null &&
                    this.CustomSignTimeFormat.Equals(other.CustomSignTimeFormat)
                ) && 
                (
                    this.CustomTimeFormat == other.CustomTimeFormat ||
                    this.CustomTimeFormat != null &&
                    this.CustomTimeFormat.Equals(other.CustomTimeFormat)
                ) && 
                (
                    this.DateFormat == other.DateFormat ||
                    this.DateFormat != null &&
                    this.DateFormat.Equals(other.DateFormat)
                ) && 
                (
                    this.DateFormatMetadata == other.DateFormatMetadata ||
                    this.DateFormatMetadata != null &&
                    this.DateFormatMetadata.Equals(other.DateFormatMetadata)
                ) && 
                (
                    this.EffectiveAddressFormat == other.EffectiveAddressFormat ||
                    this.EffectiveAddressFormat != null &&
                    this.EffectiveAddressFormat.Equals(other.EffectiveAddressFormat)
                ) && 
                (
                    this.EffectiveCalendarType == other.EffectiveCalendarType ||
                    this.EffectiveCalendarType != null &&
                    this.EffectiveCalendarType.Equals(other.EffectiveCalendarType)
                ) && 
                (
                    this.EffectiveCurrencyCode == other.EffectiveCurrencyCode ||
                    this.EffectiveCurrencyCode != null &&
                    this.EffectiveCurrencyCode.Equals(other.EffectiveCurrencyCode)
                ) && 
                (
                    this.EffectiveCurrencyNegativeFormat == other.EffectiveCurrencyNegativeFormat ||
                    this.EffectiveCurrencyNegativeFormat != null &&
                    this.EffectiveCurrencyNegativeFormat.Equals(other.EffectiveCurrencyNegativeFormat)
                ) && 
                (
                    this.EffectiveCurrencyPositiveFormat == other.EffectiveCurrencyPositiveFormat ||
                    this.EffectiveCurrencyPositiveFormat != null &&
                    this.EffectiveCurrencyPositiveFormat.Equals(other.EffectiveCurrencyPositiveFormat)
                ) && 
                (
                    this.EffectiveCustomDateFormat == other.EffectiveCustomDateFormat ||
                    this.EffectiveCustomDateFormat != null &&
                    this.EffectiveCustomDateFormat.Equals(other.EffectiveCustomDateFormat)
                ) && 
                (
                    this.EffectiveCustomTimeFormat == other.EffectiveCustomTimeFormat ||
                    this.EffectiveCustomTimeFormat != null &&
                    this.EffectiveCustomTimeFormat.Equals(other.EffectiveCustomTimeFormat)
                ) && 
                (
                    this.EffectiveDateFormat == other.EffectiveDateFormat ||
                    this.EffectiveDateFormat != null &&
                    this.EffectiveDateFormat.Equals(other.EffectiveDateFormat)
                ) && 
                (
                    this.EffectiveInitialFormat == other.EffectiveInitialFormat ||
                    this.EffectiveInitialFormat != null &&
                    this.EffectiveInitialFormat.Equals(other.EffectiveInitialFormat)
                ) && 
                (
                    this.EffectiveNameFormat == other.EffectiveNameFormat ||
                    this.EffectiveNameFormat != null &&
                    this.EffectiveNameFormat.Equals(other.EffectiveNameFormat)
                ) && 
                (
                    this.EffectiveTimeFormat == other.EffectiveTimeFormat ||
                    this.EffectiveTimeFormat != null &&
                    this.EffectiveTimeFormat.Equals(other.EffectiveTimeFormat)
                ) && 
                (
                    this.EffectiveTimeZone == other.EffectiveTimeZone ||
                    this.EffectiveTimeZone != null &&
                    this.EffectiveTimeZone.Equals(other.EffectiveTimeZone)
                ) && 
                (
                    this.InitialFormat == other.InitialFormat ||
                    this.InitialFormat != null &&
                    this.InitialFormat.Equals(other.InitialFormat)
                ) && 
                (
                    this.InitialFormatMetadata == other.InitialFormatMetadata ||
                    this.InitialFormatMetadata != null &&
                    this.InitialFormatMetadata.Equals(other.InitialFormatMetadata)
                ) && 
                (
                    this.NameFormat == other.NameFormat ||
                    this.NameFormat != null &&
                    this.NameFormat.Equals(other.NameFormat)
                ) && 
                (
                    this.NameFormatMetadata == other.NameFormatMetadata ||
                    this.NameFormatMetadata != null &&
                    this.NameFormatMetadata.Equals(other.NameFormatMetadata)
                ) && 
                (
                    this.SignDateFormat == other.SignDateFormat ||
                    this.SignDateFormat != null &&
                    this.SignDateFormat.Equals(other.SignDateFormat)
                ) && 
                (
                    this.SignDateFormatMetadata == other.SignDateFormatMetadata ||
                    this.SignDateFormatMetadata != null &&
                    this.SignDateFormatMetadata.Equals(other.SignDateFormatMetadata)
                ) && 
                (
                    this.SignTimeFormat == other.SignTimeFormat ||
                    this.SignTimeFormat != null &&
                    this.SignTimeFormat.Equals(other.SignTimeFormat)
                ) && 
                (
                    this.SignTimeFormatMetadata == other.SignTimeFormatMetadata ||
                    this.SignTimeFormatMetadata != null &&
                    this.SignTimeFormatMetadata.Equals(other.SignTimeFormatMetadata)
                ) && 
                (
                    this.TimeFormat == other.TimeFormat ||
                    this.TimeFormat != null &&
                    this.TimeFormat.Equals(other.TimeFormat)
                ) && 
                (
                    this.TimeFormatMetadata == other.TimeFormatMetadata ||
                    this.TimeFormatMetadata != null &&
                    this.TimeFormatMetadata.Equals(other.TimeFormatMetadata)
                ) && 
                (
                    this.TimeZone == other.TimeZone ||
                    this.TimeZone != null &&
                    this.TimeZone.Equals(other.TimeZone)
                ) && 
                (
                    this.TimeZoneMetadata == other.TimeZoneMetadata ||
                    this.TimeZoneMetadata != null &&
                    this.TimeZoneMetadata.Equals(other.TimeZoneMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AddressFormat != null)
                    hash = hash * 59 + this.AddressFormat.GetHashCode();
                if (this.AddressFormatMetadata != null)
                    hash = hash * 59 + this.AddressFormatMetadata.GetHashCode();
                if (this.AllowRegion != null)
                    hash = hash * 59 + this.AllowRegion.GetHashCode();
                if (this.CalendarType != null)
                    hash = hash * 59 + this.CalendarType.GetHashCode();
                if (this.CalendarTypeMetadata != null)
                    hash = hash * 59 + this.CalendarTypeMetadata.GetHashCode();
                if (this.CultureName != null)
                    hash = hash * 59 + this.CultureName.GetHashCode();
                if (this.CultureNameMetadata != null)
                    hash = hash * 59 + this.CultureNameMetadata.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.CurrencyCodeMetadata != null)
                    hash = hash * 59 + this.CurrencyCodeMetadata.GetHashCode();
                if (this.CurrencyNegativeFormat != null)
                    hash = hash * 59 + this.CurrencyNegativeFormat.GetHashCode();
                if (this.CurrencyNegativeFormatMetadata != null)
                    hash = hash * 59 + this.CurrencyNegativeFormatMetadata.GetHashCode();
                if (this.CurrencyPositiveFormat != null)
                    hash = hash * 59 + this.CurrencyPositiveFormat.GetHashCode();
                if (this.CurrencyPositiveFormatMetadata != null)
                    hash = hash * 59 + this.CurrencyPositiveFormatMetadata.GetHashCode();
                if (this.CustomDateFormat != null)
                    hash = hash * 59 + this.CustomDateFormat.GetHashCode();
                if (this.CustomSignDateFormat != null)
                    hash = hash * 59 + this.CustomSignDateFormat.GetHashCode();
                if (this.CustomSignTimeFormat != null)
                    hash = hash * 59 + this.CustomSignTimeFormat.GetHashCode();
                if (this.CustomTimeFormat != null)
                    hash = hash * 59 + this.CustomTimeFormat.GetHashCode();
                if (this.DateFormat != null)
                    hash = hash * 59 + this.DateFormat.GetHashCode();
                if (this.DateFormatMetadata != null)
                    hash = hash * 59 + this.DateFormatMetadata.GetHashCode();
                if (this.EffectiveAddressFormat != null)
                    hash = hash * 59 + this.EffectiveAddressFormat.GetHashCode();
                if (this.EffectiveCalendarType != null)
                    hash = hash * 59 + this.EffectiveCalendarType.GetHashCode();
                if (this.EffectiveCurrencyCode != null)
                    hash = hash * 59 + this.EffectiveCurrencyCode.GetHashCode();
                if (this.EffectiveCurrencyNegativeFormat != null)
                    hash = hash * 59 + this.EffectiveCurrencyNegativeFormat.GetHashCode();
                if (this.EffectiveCurrencyPositiveFormat != null)
                    hash = hash * 59 + this.EffectiveCurrencyPositiveFormat.GetHashCode();
                if (this.EffectiveCustomDateFormat != null)
                    hash = hash * 59 + this.EffectiveCustomDateFormat.GetHashCode();
                if (this.EffectiveCustomTimeFormat != null)
                    hash = hash * 59 + this.EffectiveCustomTimeFormat.GetHashCode();
                if (this.EffectiveDateFormat != null)
                    hash = hash * 59 + this.EffectiveDateFormat.GetHashCode();
                if (this.EffectiveInitialFormat != null)
                    hash = hash * 59 + this.EffectiveInitialFormat.GetHashCode();
                if (this.EffectiveNameFormat != null)
                    hash = hash * 59 + this.EffectiveNameFormat.GetHashCode();
                if (this.EffectiveTimeFormat != null)
                    hash = hash * 59 + this.EffectiveTimeFormat.GetHashCode();
                if (this.EffectiveTimeZone != null)
                    hash = hash * 59 + this.EffectiveTimeZone.GetHashCode();
                if (this.InitialFormat != null)
                    hash = hash * 59 + this.InitialFormat.GetHashCode();
                if (this.InitialFormatMetadata != null)
                    hash = hash * 59 + this.InitialFormatMetadata.GetHashCode();
                if (this.NameFormat != null)
                    hash = hash * 59 + this.NameFormat.GetHashCode();
                if (this.NameFormatMetadata != null)
                    hash = hash * 59 + this.NameFormatMetadata.GetHashCode();
                if (this.SignDateFormat != null)
                    hash = hash * 59 + this.SignDateFormat.GetHashCode();
                if (this.SignDateFormatMetadata != null)
                    hash = hash * 59 + this.SignDateFormatMetadata.GetHashCode();
                if (this.SignTimeFormat != null)
                    hash = hash * 59 + this.SignTimeFormat.GetHashCode();
                if (this.SignTimeFormatMetadata != null)
                    hash = hash * 59 + this.SignTimeFormatMetadata.GetHashCode();
                if (this.TimeFormat != null)
                    hash = hash * 59 + this.TimeFormat.GetHashCode();
                if (this.TimeFormatMetadata != null)
                    hash = hash * 59 + this.TimeFormatMetadata.GetHashCode();
                if (this.TimeZone != null)
                    hash = hash * 59 + this.TimeZone.GetHashCode();
                if (this.TimeZoneMetadata != null)
                    hash = hash * 59 + this.TimeZoneMetadata.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
