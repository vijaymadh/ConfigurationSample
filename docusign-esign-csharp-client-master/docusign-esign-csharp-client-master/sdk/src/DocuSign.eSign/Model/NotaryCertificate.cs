/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// NotaryCertificate
    /// </summary>
    [DataContract]
    public partial class NotaryCertificate :  IEquatable<NotaryCertificate>, IValidatableObject
    {
        public NotaryCertificate()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotaryCertificate" /> class.
        /// </summary>
        /// <param name="AnchorAllowWhiteSpaceInCharacters">AnchorAllowWhiteSpaceInCharacters.</param>
        /// <param name="AnchorAllowWhiteSpaceInCharactersMetadata">AnchorAllowWhiteSpaceInCharactersMetadata.</param>
        /// <param name="AnchorCaseSensitive">When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**..</param>
        /// <param name="AnchorCaseSensitiveMetadata">AnchorCaseSensitiveMetadata.</param>
        /// <param name="AnchorHorizontalAlignment">Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**..</param>
        /// <param name="AnchorHorizontalAlignmentMetadata">AnchorHorizontalAlignmentMetadata.</param>
        /// <param name="AnchorIgnoreIfNotPresent">When set to **true**, this tab is ignored if anchorString is not found in the document..</param>
        /// <param name="AnchorIgnoreIfNotPresentMetadata">AnchorIgnoreIfNotPresentMetadata.</param>
        /// <param name="AnchorMatchWholeWord">When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**..</param>
        /// <param name="AnchorMatchWholeWordMetadata">AnchorMatchWholeWordMetadata.</param>
        /// <param name="AnchorString">Anchor text information for a radio button..</param>
        /// <param name="AnchorStringMetadata">AnchorStringMetadata.</param>
        /// <param name="AnchorTabProcessorVersion">AnchorTabProcessorVersion.</param>
        /// <param name="AnchorTabProcessorVersionMetadata">AnchorTabProcessorVersionMetadata.</param>
        /// <param name="AnchorUnits">Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches..</param>
        /// <param name="AnchorUnitsMetadata">AnchorUnitsMetadata.</param>
        /// <param name="AnchorXOffset">Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString..</param>
        /// <param name="AnchorXOffsetMetadata">AnchorXOffsetMetadata.</param>
        /// <param name="AnchorYOffset">Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString..</param>
        /// <param name="AnchorYOffsetMetadata">AnchorYOffsetMetadata.</param>
        /// <param name="ConditionalParentLabel">For conditional fields this is the TabLabel of the parent tab that controls this tab&#39;s visibility..</param>
        /// <param name="ConditionalParentLabelMetadata">ConditionalParentLabelMetadata.</param>
        /// <param name="ConditionalParentValue">For conditional fields, this is the value of the parent tab that controls the tab&#39;s visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \&quot;on\&quot; as the value to show that the parent tab is active. .</param>
        /// <param name="ConditionalParentValueMetadata">ConditionalParentValueMetadata.</param>
        /// <param name="CustomTabId">The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties..</param>
        /// <param name="CustomTabIdMetadata">CustomTabIdMetadata.</param>
        /// <param name="DocumentId">Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute..</param>
        /// <param name="DocumentIdMetadata">DocumentIdMetadata.</param>
        /// <param name="ErrorDetails">ErrorDetails.</param>
        /// <param name="FormOrder">FormOrder.</param>
        /// <param name="FormOrderMetadata">FormOrderMetadata.</param>
        /// <param name="FormPageLabel">FormPageLabel.</param>
        /// <param name="FormPageLabelMetadata">FormPageLabelMetadata.</param>
        /// <param name="FormPageNumber">FormPageNumber.</param>
        /// <param name="FormPageNumberMetadata">FormPageNumberMetadata.</param>
        /// <param name="Height">Height of the tab in pixels..</param>
        /// <param name="HeightMetadata">HeightMetadata.</param>
        /// <param name="Locked">When set to **true**, the signer cannot change the data of the custom tab..</param>
        /// <param name="LockedMetadata">LockedMetadata.</param>
        /// <param name="MergeField">MergeField.</param>
        /// <param name="MergeFieldXml">MergeFieldXml.</param>
        /// <param name="PageNumber">Specifies the page number on which the tab is located..</param>
        /// <param name="PageNumberMetadata">PageNumberMetadata.</param>
        /// <param name="RecipientId">Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document..</param>
        /// <param name="RecipientIdGuid">RecipientIdGuid.</param>
        /// <param name="RecipientIdGuidMetadata">RecipientIdGuidMetadata.</param>
        /// <param name="RecipientIdMetadata">RecipientIdMetadata.</param>
        /// <param name="Required">When set to **true**, the signer is required to fill out this tab.</param>
        /// <param name="RequiredMetadata">RequiredMetadata.</param>
        /// <param name="SmartContractInformation">SmartContractInformation.</param>
        /// <param name="Status">Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later..</param>
        /// <param name="StatusMetadata">StatusMetadata.</param>
        /// <param name="TabGroupLabels">TabGroupLabels.</param>
        /// <param name="TabGroupLabelsMetadata">TabGroupLabelsMetadata.</param>
        /// <param name="TabId">The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     .</param>
        /// <param name="TabIdMetadata">TabIdMetadata.</param>
        /// <param name="TabLabelMetadata">TabLabelMetadata.</param>
        /// <param name="TabOrder">TabOrder.</param>
        /// <param name="TabOrderMetadata">TabOrderMetadata.</param>
        /// <param name="TabType">TabType.</param>
        /// <param name="TabTypeMetadata">TabTypeMetadata.</param>
        /// <param name="TemplateLocked">When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. .</param>
        /// <param name="TemplateLockedMetadata">TemplateLockedMetadata.</param>
        /// <param name="TemplateRequired">When set to **true**, the sender may not remove the recipient. Used only when working with template recipients..</param>
        /// <param name="TemplateRequiredMetadata">TemplateRequiredMetadata.</param>
        /// <param name="Tooltip">Tooltip.</param>
        /// <param name="ToolTipMetadata">ToolTipMetadata.</param>
        /// <param name="Width">Width of the tab in pixels..</param>
        /// <param name="WidthMetadata">WidthMetadata.</param>
        /// <param name="XPosition">This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position..</param>
        /// <param name="XPositionMetadata">XPositionMetadata.</param>
        /// <param name="YPosition">This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position..</param>
        /// <param name="YPositionMetadata">YPositionMetadata.</param>
        public NotaryCertificate(string AnchorAllowWhiteSpaceInCharacters = default(string), PropertyMetadata AnchorAllowWhiteSpaceInCharactersMetadata = default(PropertyMetadata), string AnchorCaseSensitive = default(string), PropertyMetadata AnchorCaseSensitiveMetadata = default(PropertyMetadata), string AnchorHorizontalAlignment = default(string), PropertyMetadata AnchorHorizontalAlignmentMetadata = default(PropertyMetadata), string AnchorIgnoreIfNotPresent = default(string), PropertyMetadata AnchorIgnoreIfNotPresentMetadata = default(PropertyMetadata), string AnchorMatchWholeWord = default(string), PropertyMetadata AnchorMatchWholeWordMetadata = default(PropertyMetadata), string AnchorString = default(string), PropertyMetadata AnchorStringMetadata = default(PropertyMetadata), string AnchorTabProcessorVersion = default(string), PropertyMetadata AnchorTabProcessorVersionMetadata = default(PropertyMetadata), string AnchorUnits = default(string), PropertyMetadata AnchorUnitsMetadata = default(PropertyMetadata), string AnchorXOffset = default(string), PropertyMetadata AnchorXOffsetMetadata = default(PropertyMetadata), string AnchorYOffset = default(string), PropertyMetadata AnchorYOffsetMetadata = default(PropertyMetadata), string ConditionalParentLabel = default(string), PropertyMetadata ConditionalParentLabelMetadata = default(PropertyMetadata), string ConditionalParentValue = default(string), PropertyMetadata ConditionalParentValueMetadata = default(PropertyMetadata), string CustomTabId = default(string), PropertyMetadata CustomTabIdMetadata = default(PropertyMetadata), string DocumentId = default(string), PropertyMetadata DocumentIdMetadata = default(PropertyMetadata), ErrorDetails ErrorDetails = default(ErrorDetails), string FormOrder = default(string), PropertyMetadata FormOrderMetadata = default(PropertyMetadata), string FormPageLabel = default(string), PropertyMetadata FormPageLabelMetadata = default(PropertyMetadata), string FormPageNumber = default(string), PropertyMetadata FormPageNumberMetadata = default(PropertyMetadata), string Height = default(string), PropertyMetadata HeightMetadata = default(PropertyMetadata), string Locked = default(string), PropertyMetadata LockedMetadata = default(PropertyMetadata), MergeField MergeField = default(MergeField), string MergeFieldXml = default(string), string PageNumber = default(string), PropertyMetadata PageNumberMetadata = default(PropertyMetadata), string RecipientId = default(string), string RecipientIdGuid = default(string), PropertyMetadata RecipientIdGuidMetadata = default(PropertyMetadata), PropertyMetadata RecipientIdMetadata = default(PropertyMetadata), string Required = default(string), PropertyMetadata RequiredMetadata = default(PropertyMetadata), SmartContractInformation SmartContractInformation = default(SmartContractInformation), string Status = default(string), PropertyMetadata StatusMetadata = default(PropertyMetadata), List<string> TabGroupLabels = default(List<string>), PropertyMetadata TabGroupLabelsMetadata = default(PropertyMetadata), string TabId = default(string), PropertyMetadata TabIdMetadata = default(PropertyMetadata), PropertyMetadata TabLabelMetadata = default(PropertyMetadata), string TabOrder = default(string), PropertyMetadata TabOrderMetadata = default(PropertyMetadata), string TabType = default(string), PropertyMetadata TabTypeMetadata = default(PropertyMetadata), string TemplateLocked = default(string), PropertyMetadata TemplateLockedMetadata = default(PropertyMetadata), string TemplateRequired = default(string), PropertyMetadata TemplateRequiredMetadata = default(PropertyMetadata), string Tooltip = default(string), PropertyMetadata ToolTipMetadata = default(PropertyMetadata), string Width = default(string), PropertyMetadata WidthMetadata = default(PropertyMetadata), string XPosition = default(string), PropertyMetadata XPositionMetadata = default(PropertyMetadata), string YPosition = default(string), PropertyMetadata YPositionMetadata = default(PropertyMetadata))
        {
            this.AnchorAllowWhiteSpaceInCharacters = AnchorAllowWhiteSpaceInCharacters;
            this.AnchorAllowWhiteSpaceInCharactersMetadata = AnchorAllowWhiteSpaceInCharactersMetadata;
            this.AnchorCaseSensitive = AnchorCaseSensitive;
            this.AnchorCaseSensitiveMetadata = AnchorCaseSensitiveMetadata;
            this.AnchorHorizontalAlignment = AnchorHorizontalAlignment;
            this.AnchorHorizontalAlignmentMetadata = AnchorHorizontalAlignmentMetadata;
            this.AnchorIgnoreIfNotPresent = AnchorIgnoreIfNotPresent;
            this.AnchorIgnoreIfNotPresentMetadata = AnchorIgnoreIfNotPresentMetadata;
            this.AnchorMatchWholeWord = AnchorMatchWholeWord;
            this.AnchorMatchWholeWordMetadata = AnchorMatchWholeWordMetadata;
            this.AnchorString = AnchorString;
            this.AnchorStringMetadata = AnchorStringMetadata;
            this.AnchorTabProcessorVersion = AnchorTabProcessorVersion;
            this.AnchorTabProcessorVersionMetadata = AnchorTabProcessorVersionMetadata;
            this.AnchorUnits = AnchorUnits;
            this.AnchorUnitsMetadata = AnchorUnitsMetadata;
            this.AnchorXOffset = AnchorXOffset;
            this.AnchorXOffsetMetadata = AnchorXOffsetMetadata;
            this.AnchorYOffset = AnchorYOffset;
            this.AnchorYOffsetMetadata = AnchorYOffsetMetadata;
            this.ConditionalParentLabel = ConditionalParentLabel;
            this.ConditionalParentLabelMetadata = ConditionalParentLabelMetadata;
            this.ConditionalParentValue = ConditionalParentValue;
            this.ConditionalParentValueMetadata = ConditionalParentValueMetadata;
            this.CustomTabId = CustomTabId;
            this.CustomTabIdMetadata = CustomTabIdMetadata;
            this.DocumentId = DocumentId;
            this.DocumentIdMetadata = DocumentIdMetadata;
            this.ErrorDetails = ErrorDetails;
            this.FormOrder = FormOrder;
            this.FormOrderMetadata = FormOrderMetadata;
            this.FormPageLabel = FormPageLabel;
            this.FormPageLabelMetadata = FormPageLabelMetadata;
            this.FormPageNumber = FormPageNumber;
            this.FormPageNumberMetadata = FormPageNumberMetadata;
            this.Height = Height;
            this.HeightMetadata = HeightMetadata;
            this.Locked = Locked;
            this.LockedMetadata = LockedMetadata;
            this.MergeField = MergeField;
            this.MergeFieldXml = MergeFieldXml;
            this.PageNumber = PageNumber;
            this.PageNumberMetadata = PageNumberMetadata;
            this.RecipientId = RecipientId;
            this.RecipientIdGuid = RecipientIdGuid;
            this.RecipientIdGuidMetadata = RecipientIdGuidMetadata;
            this.RecipientIdMetadata = RecipientIdMetadata;
            this.Required = Required;
            this.RequiredMetadata = RequiredMetadata;
            this.SmartContractInformation = SmartContractInformation;
            this.Status = Status;
            this.StatusMetadata = StatusMetadata;
            this.TabGroupLabels = TabGroupLabels;
            this.TabGroupLabelsMetadata = TabGroupLabelsMetadata;
            this.TabId = TabId;
            this.TabIdMetadata = TabIdMetadata;
            this.TabLabelMetadata = TabLabelMetadata;
            this.TabOrder = TabOrder;
            this.TabOrderMetadata = TabOrderMetadata;
            this.TabType = TabType;
            this.TabTypeMetadata = TabTypeMetadata;
            this.TemplateLocked = TemplateLocked;
            this.TemplateLockedMetadata = TemplateLockedMetadata;
            this.TemplateRequired = TemplateRequired;
            this.TemplateRequiredMetadata = TemplateRequiredMetadata;
            this.Tooltip = Tooltip;
            this.ToolTipMetadata = ToolTipMetadata;
            this.Width = Width;
            this.WidthMetadata = WidthMetadata;
            this.XPosition = XPosition;
            this.XPositionMetadata = XPositionMetadata;
            this.YPosition = YPosition;
            this.YPositionMetadata = YPositionMetadata;
        }
        
        /// <summary>
        /// Gets or Sets AnchorAllowWhiteSpaceInCharacters
        /// </summary>
        [DataMember(Name="anchorAllowWhiteSpaceInCharacters", EmitDefaultValue=false)]
        public string AnchorAllowWhiteSpaceInCharacters { get; set; }
        /// <summary>
        /// Gets or Sets AnchorAllowWhiteSpaceInCharactersMetadata
        /// </summary>
        [DataMember(Name="anchorAllowWhiteSpaceInCharactersMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorAllowWhiteSpaceInCharactersMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
        /// </summary>
        /// <value>When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.</value>
        [DataMember(Name="anchorCaseSensitive", EmitDefaultValue=false)]
        public string AnchorCaseSensitive { get; set; }
        /// <summary>
        /// Gets or Sets AnchorCaseSensitiveMetadata
        /// </summary>
        [DataMember(Name="anchorCaseSensitiveMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorCaseSensitiveMetadata { get; set; }
        /// <summary>
        /// Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
        /// </summary>
        /// <value>Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.</value>
        [DataMember(Name="anchorHorizontalAlignment", EmitDefaultValue=false)]
        public string AnchorHorizontalAlignment { get; set; }
        /// <summary>
        /// Gets or Sets AnchorHorizontalAlignmentMetadata
        /// </summary>
        [DataMember(Name="anchorHorizontalAlignmentMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorHorizontalAlignmentMetadata { get; set; }
        /// <summary>
        /// When set to **true**, this tab is ignored if anchorString is not found in the document.
        /// </summary>
        /// <value>When set to **true**, this tab is ignored if anchorString is not found in the document.</value>
        [DataMember(Name="anchorIgnoreIfNotPresent", EmitDefaultValue=false)]
        public string AnchorIgnoreIfNotPresent { get; set; }
        /// <summary>
        /// Gets or Sets AnchorIgnoreIfNotPresentMetadata
        /// </summary>
        [DataMember(Name="anchorIgnoreIfNotPresentMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorIgnoreIfNotPresentMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
        /// </summary>
        /// <value>When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.</value>
        [DataMember(Name="anchorMatchWholeWord", EmitDefaultValue=false)]
        public string AnchorMatchWholeWord { get; set; }
        /// <summary>
        /// Gets or Sets AnchorMatchWholeWordMetadata
        /// </summary>
        [DataMember(Name="anchorMatchWholeWordMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorMatchWholeWordMetadata { get; set; }
        /// <summary>
        /// Anchor text information for a radio button.
        /// </summary>
        /// <value>Anchor text information for a radio button.</value>
        [DataMember(Name="anchorString", EmitDefaultValue=false)]
        public string AnchorString { get; set; }
        /// <summary>
        /// Gets or Sets AnchorStringMetadata
        /// </summary>
        [DataMember(Name="anchorStringMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorStringMetadata { get; set; }
        /// <summary>
        /// Gets or Sets AnchorTabProcessorVersion
        /// </summary>
        [DataMember(Name="anchorTabProcessorVersion", EmitDefaultValue=false)]
        public string AnchorTabProcessorVersion { get; set; }
        /// <summary>
        /// Gets or Sets AnchorTabProcessorVersionMetadata
        /// </summary>
        [DataMember(Name="anchorTabProcessorVersionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorTabProcessorVersionMetadata { get; set; }
        /// <summary>
        /// Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
        /// </summary>
        /// <value>Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.</value>
        [DataMember(Name="anchorUnits", EmitDefaultValue=false)]
        public string AnchorUnits { get; set; }
        /// <summary>
        /// Gets or Sets AnchorUnitsMetadata
        /// </summary>
        [DataMember(Name="anchorUnitsMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorUnitsMetadata { get; set; }
        /// <summary>
        /// Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.
        /// </summary>
        /// <value>Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.</value>
        [DataMember(Name="anchorXOffset", EmitDefaultValue=false)]
        public string AnchorXOffset { get; set; }
        /// <summary>
        /// Gets or Sets AnchorXOffsetMetadata
        /// </summary>
        [DataMember(Name="anchorXOffsetMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorXOffsetMetadata { get; set; }
        /// <summary>
        /// Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.
        /// </summary>
        /// <value>Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.</value>
        [DataMember(Name="anchorYOffset", EmitDefaultValue=false)]
        public string AnchorYOffset { get; set; }
        /// <summary>
        /// Gets or Sets AnchorYOffsetMetadata
        /// </summary>
        [DataMember(Name="anchorYOffsetMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorYOffsetMetadata { get; set; }
        /// <summary>
        /// For conditional fields this is the TabLabel of the parent tab that controls this tab&#39;s visibility.
        /// </summary>
        /// <value>For conditional fields this is the TabLabel of the parent tab that controls this tab&#39;s visibility.</value>
        [DataMember(Name="conditionalParentLabel", EmitDefaultValue=false)]
        public string ConditionalParentLabel { get; set; }
        /// <summary>
        /// Gets or Sets ConditionalParentLabelMetadata
        /// </summary>
        [DataMember(Name="conditionalParentLabelMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ConditionalParentLabelMetadata { get; set; }
        /// <summary>
        /// For conditional fields, this is the value of the parent tab that controls the tab&#39;s visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \&quot;on\&quot; as the value to show that the parent tab is active. 
        /// </summary>
        /// <value>For conditional fields, this is the value of the parent tab that controls the tab&#39;s visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \&quot;on\&quot; as the value to show that the parent tab is active. </value>
        [DataMember(Name="conditionalParentValue", EmitDefaultValue=false)]
        public string ConditionalParentValue { get; set; }
        /// <summary>
        /// Gets or Sets ConditionalParentValueMetadata
        /// </summary>
        [DataMember(Name="conditionalParentValueMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ConditionalParentValueMetadata { get; set; }
        /// <summary>
        /// The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
        /// </summary>
        /// <value>The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.</value>
        [DataMember(Name="customTabId", EmitDefaultValue=false)]
        public string CustomTabId { get; set; }
        /// <summary>
        /// Gets or Sets CustomTabIdMetadata
        /// </summary>
        [DataMember(Name="customTabIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata CustomTabIdMetadata { get; set; }
        /// <summary>
        /// Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.
        /// </summary>
        /// <value>Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }
        /// <summary>
        /// Gets or Sets DocumentIdMetadata
        /// </summary>
        [DataMember(Name="documentIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata DocumentIdMetadata { get; set; }
        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// Gets or Sets FormOrder
        /// </summary>
        [DataMember(Name="formOrder", EmitDefaultValue=false)]
        public string FormOrder { get; set; }
        /// <summary>
        /// Gets or Sets FormOrderMetadata
        /// </summary>
        [DataMember(Name="formOrderMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FormOrderMetadata { get; set; }
        /// <summary>
        /// Gets or Sets FormPageLabel
        /// </summary>
        [DataMember(Name="formPageLabel", EmitDefaultValue=false)]
        public string FormPageLabel { get; set; }
        /// <summary>
        /// Gets or Sets FormPageLabelMetadata
        /// </summary>
        [DataMember(Name="formPageLabelMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FormPageLabelMetadata { get; set; }
        /// <summary>
        /// Gets or Sets FormPageNumber
        /// </summary>
        [DataMember(Name="formPageNumber", EmitDefaultValue=false)]
        public string FormPageNumber { get; set; }
        /// <summary>
        /// Gets or Sets FormPageNumberMetadata
        /// </summary>
        [DataMember(Name="formPageNumberMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FormPageNumberMetadata { get; set; }
        /// <summary>
        /// Height of the tab in pixels.
        /// </summary>
        /// <value>Height of the tab in pixels.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public string Height { get; set; }
        /// <summary>
        /// Gets or Sets HeightMetadata
        /// </summary>
        [DataMember(Name="heightMetadata", EmitDefaultValue=false)]
        public PropertyMetadata HeightMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the signer cannot change the data of the custom tab.
        /// </summary>
        /// <value>When set to **true**, the signer cannot change the data of the custom tab.</value>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public string Locked { get; set; }
        /// <summary>
        /// Gets or Sets LockedMetadata
        /// </summary>
        [DataMember(Name="lockedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata LockedMetadata { get; set; }
        /// <summary>
        /// Gets or Sets MergeField
        /// </summary>
        [DataMember(Name="mergeField", EmitDefaultValue=false)]
        public MergeField MergeField { get; set; }
        /// <summary>
        /// Gets or Sets MergeFieldXml
        /// </summary>
        [DataMember(Name="mergeFieldXml", EmitDefaultValue=false)]
        public string MergeFieldXml { get; set; }
        /// <summary>
        /// Specifies the page number on which the tab is located.
        /// </summary>
        /// <value>Specifies the page number on which the tab is located.</value>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public string PageNumber { get; set; }
        /// <summary>
        /// Gets or Sets PageNumberMetadata
        /// </summary>
        [DataMember(Name="pageNumberMetadata", EmitDefaultValue=false)]
        public PropertyMetadata PageNumberMetadata { get; set; }
        /// <summary>
        /// Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
        /// </summary>
        /// <value>Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.</value>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; set; }
        /// <summary>
        /// Gets or Sets RecipientIdGuid
        /// </summary>
        [DataMember(Name="recipientIdGuid", EmitDefaultValue=false)]
        public string RecipientIdGuid { get; set; }
        /// <summary>
        /// Gets or Sets RecipientIdGuidMetadata
        /// </summary>
        [DataMember(Name="recipientIdGuidMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RecipientIdGuidMetadata { get; set; }
        /// <summary>
        /// Gets or Sets RecipientIdMetadata
        /// </summary>
        [DataMember(Name="recipientIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RecipientIdMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the signer is required to fill out this tab
        /// </summary>
        /// <value>When set to **true**, the signer is required to fill out this tab</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public string Required { get; set; }
        /// <summary>
        /// Gets or Sets RequiredMetadata
        /// </summary>
        [DataMember(Name="requiredMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RequiredMetadata { get; set; }
        /// <summary>
        /// Gets or Sets SmartContractInformation
        /// </summary>
        [DataMember(Name="smartContractInformation", EmitDefaultValue=false)]
        public SmartContractInformation SmartContractInformation { get; set; }
        /// <summary>
        /// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
        /// </summary>
        /// <value>Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets StatusMetadata
        /// </summary>
        [DataMember(Name="statusMetadata", EmitDefaultValue=false)]
        public PropertyMetadata StatusMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TabGroupLabels
        /// </summary>
        [DataMember(Name="tabGroupLabels", EmitDefaultValue=false)]
        public List<string> TabGroupLabels { get; set; }
        /// <summary>
        /// Gets or Sets TabGroupLabelsMetadata
        /// </summary>
        [DataMember(Name="tabGroupLabelsMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabGroupLabelsMetadata { get; set; }
        /// <summary>
        /// The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     
        /// </summary>
        /// <value>The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     </value>
        [DataMember(Name="tabId", EmitDefaultValue=false)]
        public string TabId { get; set; }
        /// <summary>
        /// Gets or Sets TabIdMetadata
        /// </summary>
        [DataMember(Name="tabIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabIdMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TabLabelMetadata
        /// </summary>
        [DataMember(Name="tabLabelMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabLabelMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TabOrder
        /// </summary>
        [DataMember(Name="tabOrder", EmitDefaultValue=false)]
        public string TabOrder { get; set; }
        /// <summary>
        /// Gets or Sets TabOrderMetadata
        /// </summary>
        [DataMember(Name="tabOrderMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabOrderMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TabType
        /// </summary>
        [DataMember(Name="tabType", EmitDefaultValue=false)]
        public string TabType { get; set; }
        /// <summary>
        /// Gets or Sets TabTypeMetadata
        /// </summary>
        [DataMember(Name="tabTypeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabTypeMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
        /// </summary>
        /// <value>When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. </value>
        [DataMember(Name="templateLocked", EmitDefaultValue=false)]
        public string TemplateLocked { get; set; }
        /// <summary>
        /// Gets or Sets TemplateLockedMetadata
        /// </summary>
        [DataMember(Name="templateLockedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TemplateLockedMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
        /// </summary>
        /// <value>When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.</value>
        [DataMember(Name="templateRequired", EmitDefaultValue=false)]
        public string TemplateRequired { get; set; }
        /// <summary>
        /// Gets or Sets TemplateRequiredMetadata
        /// </summary>
        [DataMember(Name="templateRequiredMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TemplateRequiredMetadata { get; set; }
        /// <summary>
        /// Gets or Sets Tooltip
        /// </summary>
        [DataMember(Name="tooltip", EmitDefaultValue=false)]
        public string Tooltip { get; set; }
        /// <summary>
        /// Gets or Sets ToolTipMetadata
        /// </summary>
        [DataMember(Name="toolTipMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ToolTipMetadata { get; set; }
        /// <summary>
        /// Width of the tab in pixels.
        /// </summary>
        /// <value>Width of the tab in pixels.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public string Width { get; set; }
        /// <summary>
        /// Gets or Sets WidthMetadata
        /// </summary>
        [DataMember(Name="widthMetadata", EmitDefaultValue=false)]
        public PropertyMetadata WidthMetadata { get; set; }
        /// <summary>
        /// This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.
        /// </summary>
        /// <value>This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.</value>
        [DataMember(Name="xPosition", EmitDefaultValue=false)]
        public string XPosition { get; set; }
        /// <summary>
        /// Gets or Sets XPositionMetadata
        /// </summary>
        [DataMember(Name="xPositionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata XPositionMetadata { get; set; }
        /// <summary>
        /// This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
        /// </summary>
        /// <value>This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.</value>
        [DataMember(Name="yPosition", EmitDefaultValue=false)]
        public string YPosition { get; set; }
        /// <summary>
        /// Gets or Sets YPositionMetadata
        /// </summary>
        [DataMember(Name="yPositionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata YPositionMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotaryCertificate {\n");
            sb.Append("  AnchorAllowWhiteSpaceInCharacters: ").Append(AnchorAllowWhiteSpaceInCharacters).Append("\n");
            sb.Append("  AnchorAllowWhiteSpaceInCharactersMetadata: ").Append(AnchorAllowWhiteSpaceInCharactersMetadata).Append("\n");
            sb.Append("  AnchorCaseSensitive: ").Append(AnchorCaseSensitive).Append("\n");
            sb.Append("  AnchorCaseSensitiveMetadata: ").Append(AnchorCaseSensitiveMetadata).Append("\n");
            sb.Append("  AnchorHorizontalAlignment: ").Append(AnchorHorizontalAlignment).Append("\n");
            sb.Append("  AnchorHorizontalAlignmentMetadata: ").Append(AnchorHorizontalAlignmentMetadata).Append("\n");
            sb.Append("  AnchorIgnoreIfNotPresent: ").Append(AnchorIgnoreIfNotPresent).Append("\n");
            sb.Append("  AnchorIgnoreIfNotPresentMetadata: ").Append(AnchorIgnoreIfNotPresentMetadata).Append("\n");
            sb.Append("  AnchorMatchWholeWord: ").Append(AnchorMatchWholeWord).Append("\n");
            sb.Append("  AnchorMatchWholeWordMetadata: ").Append(AnchorMatchWholeWordMetadata).Append("\n");
            sb.Append("  AnchorString: ").Append(AnchorString).Append("\n");
            sb.Append("  AnchorStringMetadata: ").Append(AnchorStringMetadata).Append("\n");
            sb.Append("  AnchorTabProcessorVersion: ").Append(AnchorTabProcessorVersion).Append("\n");
            sb.Append("  AnchorTabProcessorVersionMetadata: ").Append(AnchorTabProcessorVersionMetadata).Append("\n");
            sb.Append("  AnchorUnits: ").Append(AnchorUnits).Append("\n");
            sb.Append("  AnchorUnitsMetadata: ").Append(AnchorUnitsMetadata).Append("\n");
            sb.Append("  AnchorXOffset: ").Append(AnchorXOffset).Append("\n");
            sb.Append("  AnchorXOffsetMetadata: ").Append(AnchorXOffsetMetadata).Append("\n");
            sb.Append("  AnchorYOffset: ").Append(AnchorYOffset).Append("\n");
            sb.Append("  AnchorYOffsetMetadata: ").Append(AnchorYOffsetMetadata).Append("\n");
            sb.Append("  ConditionalParentLabel: ").Append(ConditionalParentLabel).Append("\n");
            sb.Append("  ConditionalParentLabelMetadata: ").Append(ConditionalParentLabelMetadata).Append("\n");
            sb.Append("  ConditionalParentValue: ").Append(ConditionalParentValue).Append("\n");
            sb.Append("  ConditionalParentValueMetadata: ").Append(ConditionalParentValueMetadata).Append("\n");
            sb.Append("  CustomTabId: ").Append(CustomTabId).Append("\n");
            sb.Append("  CustomTabIdMetadata: ").Append(CustomTabIdMetadata).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentIdMetadata: ").Append(DocumentIdMetadata).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  FormOrder: ").Append(FormOrder).Append("\n");
            sb.Append("  FormOrderMetadata: ").Append(FormOrderMetadata).Append("\n");
            sb.Append("  FormPageLabel: ").Append(FormPageLabel).Append("\n");
            sb.Append("  FormPageLabelMetadata: ").Append(FormPageLabelMetadata).Append("\n");
            sb.Append("  FormPageNumber: ").Append(FormPageNumber).Append("\n");
            sb.Append("  FormPageNumberMetadata: ").Append(FormPageNumberMetadata).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  HeightMetadata: ").Append(HeightMetadata).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  LockedMetadata: ").Append(LockedMetadata).Append("\n");
            sb.Append("  MergeField: ").Append(MergeField).Append("\n");
            sb.Append("  MergeFieldXml: ").Append(MergeFieldXml).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  PageNumberMetadata: ").Append(PageNumberMetadata).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  RecipientIdGuid: ").Append(RecipientIdGuid).Append("\n");
            sb.Append("  RecipientIdGuidMetadata: ").Append(RecipientIdGuidMetadata).Append("\n");
            sb.Append("  RecipientIdMetadata: ").Append(RecipientIdMetadata).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  RequiredMetadata: ").Append(RequiredMetadata).Append("\n");
            sb.Append("  SmartContractInformation: ").Append(SmartContractInformation).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusMetadata: ").Append(StatusMetadata).Append("\n");
            sb.Append("  TabGroupLabels: ").Append(TabGroupLabels).Append("\n");
            sb.Append("  TabGroupLabelsMetadata: ").Append(TabGroupLabelsMetadata).Append("\n");
            sb.Append("  TabId: ").Append(TabId).Append("\n");
            sb.Append("  TabIdMetadata: ").Append(TabIdMetadata).Append("\n");
            sb.Append("  TabLabelMetadata: ").Append(TabLabelMetadata).Append("\n");
            sb.Append("  TabOrder: ").Append(TabOrder).Append("\n");
            sb.Append("  TabOrderMetadata: ").Append(TabOrderMetadata).Append("\n");
            sb.Append("  TabType: ").Append(TabType).Append("\n");
            sb.Append("  TabTypeMetadata: ").Append(TabTypeMetadata).Append("\n");
            sb.Append("  TemplateLocked: ").Append(TemplateLocked).Append("\n");
            sb.Append("  TemplateLockedMetadata: ").Append(TemplateLockedMetadata).Append("\n");
            sb.Append("  TemplateRequired: ").Append(TemplateRequired).Append("\n");
            sb.Append("  TemplateRequiredMetadata: ").Append(TemplateRequiredMetadata).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  ToolTipMetadata: ").Append(ToolTipMetadata).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  WidthMetadata: ").Append(WidthMetadata).Append("\n");
            sb.Append("  XPosition: ").Append(XPosition).Append("\n");
            sb.Append("  XPositionMetadata: ").Append(XPositionMetadata).Append("\n");
            sb.Append("  YPosition: ").Append(YPosition).Append("\n");
            sb.Append("  YPositionMetadata: ").Append(YPositionMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NotaryCertificate);
        }

        /// <summary>
        /// Returns true if NotaryCertificate instances are equal
        /// </summary>
        /// <param name="other">Instance of NotaryCertificate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotaryCertificate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AnchorAllowWhiteSpaceInCharacters == other.AnchorAllowWhiteSpaceInCharacters ||
                    this.AnchorAllowWhiteSpaceInCharacters != null &&
                    this.AnchorAllowWhiteSpaceInCharacters.Equals(other.AnchorAllowWhiteSpaceInCharacters)
                ) && 
                (
                    this.AnchorAllowWhiteSpaceInCharactersMetadata == other.AnchorAllowWhiteSpaceInCharactersMetadata ||
                    this.AnchorAllowWhiteSpaceInCharactersMetadata != null &&
                    this.AnchorAllowWhiteSpaceInCharactersMetadata.Equals(other.AnchorAllowWhiteSpaceInCharactersMetadata)
                ) && 
                (
                    this.AnchorCaseSensitive == other.AnchorCaseSensitive ||
                    this.AnchorCaseSensitive != null &&
                    this.AnchorCaseSensitive.Equals(other.AnchorCaseSensitive)
                ) && 
                (
                    this.AnchorCaseSensitiveMetadata == other.AnchorCaseSensitiveMetadata ||
                    this.AnchorCaseSensitiveMetadata != null &&
                    this.AnchorCaseSensitiveMetadata.Equals(other.AnchorCaseSensitiveMetadata)
                ) && 
                (
                    this.AnchorHorizontalAlignment == other.AnchorHorizontalAlignment ||
                    this.AnchorHorizontalAlignment != null &&
                    this.AnchorHorizontalAlignment.Equals(other.AnchorHorizontalAlignment)
                ) && 
                (
                    this.AnchorHorizontalAlignmentMetadata == other.AnchorHorizontalAlignmentMetadata ||
                    this.AnchorHorizontalAlignmentMetadata != null &&
                    this.AnchorHorizontalAlignmentMetadata.Equals(other.AnchorHorizontalAlignmentMetadata)
                ) && 
                (
                    this.AnchorIgnoreIfNotPresent == other.AnchorIgnoreIfNotPresent ||
                    this.AnchorIgnoreIfNotPresent != null &&
                    this.AnchorIgnoreIfNotPresent.Equals(other.AnchorIgnoreIfNotPresent)
                ) && 
                (
                    this.AnchorIgnoreIfNotPresentMetadata == other.AnchorIgnoreIfNotPresentMetadata ||
                    this.AnchorIgnoreIfNotPresentMetadata != null &&
                    this.AnchorIgnoreIfNotPresentMetadata.Equals(other.AnchorIgnoreIfNotPresentMetadata)
                ) && 
                (
                    this.AnchorMatchWholeWord == other.AnchorMatchWholeWord ||
                    this.AnchorMatchWholeWord != null &&
                    this.AnchorMatchWholeWord.Equals(other.AnchorMatchWholeWord)
                ) && 
                (
                    this.AnchorMatchWholeWordMetadata == other.AnchorMatchWholeWordMetadata ||
                    this.AnchorMatchWholeWordMetadata != null &&
                    this.AnchorMatchWholeWordMetadata.Equals(other.AnchorMatchWholeWordMetadata)
                ) && 
                (
                    this.AnchorString == other.AnchorString ||
                    this.AnchorString != null &&
                    this.AnchorString.Equals(other.AnchorString)
                ) && 
                (
                    this.AnchorStringMetadata == other.AnchorStringMetadata ||
                    this.AnchorStringMetadata != null &&
                    this.AnchorStringMetadata.Equals(other.AnchorStringMetadata)
                ) && 
                (
                    this.AnchorTabProcessorVersion == other.AnchorTabProcessorVersion ||
                    this.AnchorTabProcessorVersion != null &&
                    this.AnchorTabProcessorVersion.Equals(other.AnchorTabProcessorVersion)
                ) && 
                (
                    this.AnchorTabProcessorVersionMetadata == other.AnchorTabProcessorVersionMetadata ||
                    this.AnchorTabProcessorVersionMetadata != null &&
                    this.AnchorTabProcessorVersionMetadata.Equals(other.AnchorTabProcessorVersionMetadata)
                ) && 
                (
                    this.AnchorUnits == other.AnchorUnits ||
                    this.AnchorUnits != null &&
                    this.AnchorUnits.Equals(other.AnchorUnits)
                ) && 
                (
                    this.AnchorUnitsMetadata == other.AnchorUnitsMetadata ||
                    this.AnchorUnitsMetadata != null &&
                    this.AnchorUnitsMetadata.Equals(other.AnchorUnitsMetadata)
                ) && 
                (
                    this.AnchorXOffset == other.AnchorXOffset ||
                    this.AnchorXOffset != null &&
                    this.AnchorXOffset.Equals(other.AnchorXOffset)
                ) && 
                (
                    this.AnchorXOffsetMetadata == other.AnchorXOffsetMetadata ||
                    this.AnchorXOffsetMetadata != null &&
                    this.AnchorXOffsetMetadata.Equals(other.AnchorXOffsetMetadata)
                ) && 
                (
                    this.AnchorYOffset == other.AnchorYOffset ||
                    this.AnchorYOffset != null &&
                    this.AnchorYOffset.Equals(other.AnchorYOffset)
                ) && 
                (
                    this.AnchorYOffsetMetadata == other.AnchorYOffsetMetadata ||
                    this.AnchorYOffsetMetadata != null &&
                    this.AnchorYOffsetMetadata.Equals(other.AnchorYOffsetMetadata)
                ) && 
                (
                    this.ConditionalParentLabel == other.ConditionalParentLabel ||
                    this.ConditionalParentLabel != null &&
                    this.ConditionalParentLabel.Equals(other.ConditionalParentLabel)
                ) && 
                (
                    this.ConditionalParentLabelMetadata == other.ConditionalParentLabelMetadata ||
                    this.ConditionalParentLabelMetadata != null &&
                    this.ConditionalParentLabelMetadata.Equals(other.ConditionalParentLabelMetadata)
                ) && 
                (
                    this.ConditionalParentValue == other.ConditionalParentValue ||
                    this.ConditionalParentValue != null &&
                    this.ConditionalParentValue.Equals(other.ConditionalParentValue)
                ) && 
                (
                    this.ConditionalParentValueMetadata == other.ConditionalParentValueMetadata ||
                    this.ConditionalParentValueMetadata != null &&
                    this.ConditionalParentValueMetadata.Equals(other.ConditionalParentValueMetadata)
                ) && 
                (
                    this.CustomTabId == other.CustomTabId ||
                    this.CustomTabId != null &&
                    this.CustomTabId.Equals(other.CustomTabId)
                ) && 
                (
                    this.CustomTabIdMetadata == other.CustomTabIdMetadata ||
                    this.CustomTabIdMetadata != null &&
                    this.CustomTabIdMetadata.Equals(other.CustomTabIdMetadata)
                ) && 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    this.DocumentIdMetadata == other.DocumentIdMetadata ||
                    this.DocumentIdMetadata != null &&
                    this.DocumentIdMetadata.Equals(other.DocumentIdMetadata)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.FormOrder == other.FormOrder ||
                    this.FormOrder != null &&
                    this.FormOrder.Equals(other.FormOrder)
                ) && 
                (
                    this.FormOrderMetadata == other.FormOrderMetadata ||
                    this.FormOrderMetadata != null &&
                    this.FormOrderMetadata.Equals(other.FormOrderMetadata)
                ) && 
                (
                    this.FormPageLabel == other.FormPageLabel ||
                    this.FormPageLabel != null &&
                    this.FormPageLabel.Equals(other.FormPageLabel)
                ) && 
                (
                    this.FormPageLabelMetadata == other.FormPageLabelMetadata ||
                    this.FormPageLabelMetadata != null &&
                    this.FormPageLabelMetadata.Equals(other.FormPageLabelMetadata)
                ) && 
                (
                    this.FormPageNumber == other.FormPageNumber ||
                    this.FormPageNumber != null &&
                    this.FormPageNumber.Equals(other.FormPageNumber)
                ) && 
                (
                    this.FormPageNumberMetadata == other.FormPageNumberMetadata ||
                    this.FormPageNumberMetadata != null &&
                    this.FormPageNumberMetadata.Equals(other.FormPageNumberMetadata)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.HeightMetadata == other.HeightMetadata ||
                    this.HeightMetadata != null &&
                    this.HeightMetadata.Equals(other.HeightMetadata)
                ) && 
                (
                    this.Locked == other.Locked ||
                    this.Locked != null &&
                    this.Locked.Equals(other.Locked)
                ) && 
                (
                    this.LockedMetadata == other.LockedMetadata ||
                    this.LockedMetadata != null &&
                    this.LockedMetadata.Equals(other.LockedMetadata)
                ) && 
                (
                    this.MergeField == other.MergeField ||
                    this.MergeField != null &&
                    this.MergeField.Equals(other.MergeField)
                ) && 
                (
                    this.MergeFieldXml == other.MergeFieldXml ||
                    this.MergeFieldXml != null &&
                    this.MergeFieldXml.Equals(other.MergeFieldXml)
                ) && 
                (
                    this.PageNumber == other.PageNumber ||
                    this.PageNumber != null &&
                    this.PageNumber.Equals(other.PageNumber)
                ) && 
                (
                    this.PageNumberMetadata == other.PageNumberMetadata ||
                    this.PageNumberMetadata != null &&
                    this.PageNumberMetadata.Equals(other.PageNumberMetadata)
                ) && 
                (
                    this.RecipientId == other.RecipientId ||
                    this.RecipientId != null &&
                    this.RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    this.RecipientIdGuid == other.RecipientIdGuid ||
                    this.RecipientIdGuid != null &&
                    this.RecipientIdGuid.Equals(other.RecipientIdGuid)
                ) && 
                (
                    this.RecipientIdGuidMetadata == other.RecipientIdGuidMetadata ||
                    this.RecipientIdGuidMetadata != null &&
                    this.RecipientIdGuidMetadata.Equals(other.RecipientIdGuidMetadata)
                ) && 
                (
                    this.RecipientIdMetadata == other.RecipientIdMetadata ||
                    this.RecipientIdMetadata != null &&
                    this.RecipientIdMetadata.Equals(other.RecipientIdMetadata)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.RequiredMetadata == other.RequiredMetadata ||
                    this.RequiredMetadata != null &&
                    this.RequiredMetadata.Equals(other.RequiredMetadata)
                ) && 
                (
                    this.SmartContractInformation == other.SmartContractInformation ||
                    this.SmartContractInformation != null &&
                    this.SmartContractInformation.Equals(other.SmartContractInformation)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusMetadata == other.StatusMetadata ||
                    this.StatusMetadata != null &&
                    this.StatusMetadata.Equals(other.StatusMetadata)
                ) && 
                (
                    this.TabGroupLabels == other.TabGroupLabels ||
                    this.TabGroupLabels != null &&
                    this.TabGroupLabels.SequenceEqual(other.TabGroupLabels)
                ) && 
                (
                    this.TabGroupLabelsMetadata == other.TabGroupLabelsMetadata ||
                    this.TabGroupLabelsMetadata != null &&
                    this.TabGroupLabelsMetadata.Equals(other.TabGroupLabelsMetadata)
                ) && 
                (
                    this.TabId == other.TabId ||
                    this.TabId != null &&
                    this.TabId.Equals(other.TabId)
                ) && 
                (
                    this.TabIdMetadata == other.TabIdMetadata ||
                    this.TabIdMetadata != null &&
                    this.TabIdMetadata.Equals(other.TabIdMetadata)
                ) && 
                (
                    this.TabLabelMetadata == other.TabLabelMetadata ||
                    this.TabLabelMetadata != null &&
                    this.TabLabelMetadata.Equals(other.TabLabelMetadata)
                ) && 
                (
                    this.TabOrder == other.TabOrder ||
                    this.TabOrder != null &&
                    this.TabOrder.Equals(other.TabOrder)
                ) && 
                (
                    this.TabOrderMetadata == other.TabOrderMetadata ||
                    this.TabOrderMetadata != null &&
                    this.TabOrderMetadata.Equals(other.TabOrderMetadata)
                ) && 
                (
                    this.TabType == other.TabType ||
                    this.TabType != null &&
                    this.TabType.Equals(other.TabType)
                ) && 
                (
                    this.TabTypeMetadata == other.TabTypeMetadata ||
                    this.TabTypeMetadata != null &&
                    this.TabTypeMetadata.Equals(other.TabTypeMetadata)
                ) && 
                (
                    this.TemplateLocked == other.TemplateLocked ||
                    this.TemplateLocked != null &&
                    this.TemplateLocked.Equals(other.TemplateLocked)
                ) && 
                (
                    this.TemplateLockedMetadata == other.TemplateLockedMetadata ||
                    this.TemplateLockedMetadata != null &&
                    this.TemplateLockedMetadata.Equals(other.TemplateLockedMetadata)
                ) && 
                (
                    this.TemplateRequired == other.TemplateRequired ||
                    this.TemplateRequired != null &&
                    this.TemplateRequired.Equals(other.TemplateRequired)
                ) && 
                (
                    this.TemplateRequiredMetadata == other.TemplateRequiredMetadata ||
                    this.TemplateRequiredMetadata != null &&
                    this.TemplateRequiredMetadata.Equals(other.TemplateRequiredMetadata)
                ) && 
                (
                    this.Tooltip == other.Tooltip ||
                    this.Tooltip != null &&
                    this.Tooltip.Equals(other.Tooltip)
                ) && 
                (
                    this.ToolTipMetadata == other.ToolTipMetadata ||
                    this.ToolTipMetadata != null &&
                    this.ToolTipMetadata.Equals(other.ToolTipMetadata)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                ) && 
                (
                    this.WidthMetadata == other.WidthMetadata ||
                    this.WidthMetadata != null &&
                    this.WidthMetadata.Equals(other.WidthMetadata)
                ) && 
                (
                    this.XPosition == other.XPosition ||
                    this.XPosition != null &&
                    this.XPosition.Equals(other.XPosition)
                ) && 
                (
                    this.XPositionMetadata == other.XPositionMetadata ||
                    this.XPositionMetadata != null &&
                    this.XPositionMetadata.Equals(other.XPositionMetadata)
                ) && 
                (
                    this.YPosition == other.YPosition ||
                    this.YPosition != null &&
                    this.YPosition.Equals(other.YPosition)
                ) && 
                (
                    this.YPositionMetadata == other.YPositionMetadata ||
                    this.YPositionMetadata != null &&
                    this.YPositionMetadata.Equals(other.YPositionMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AnchorAllowWhiteSpaceInCharacters != null)
                    hash = hash * 59 + this.AnchorAllowWhiteSpaceInCharacters.GetHashCode();
                if (this.AnchorAllowWhiteSpaceInCharactersMetadata != null)
                    hash = hash * 59 + this.AnchorAllowWhiteSpaceInCharactersMetadata.GetHashCode();
                if (this.AnchorCaseSensitive != null)
                    hash = hash * 59 + this.AnchorCaseSensitive.GetHashCode();
                if (this.AnchorCaseSensitiveMetadata != null)
                    hash = hash * 59 + this.AnchorCaseSensitiveMetadata.GetHashCode();
                if (this.AnchorHorizontalAlignment != null)
                    hash = hash * 59 + this.AnchorHorizontalAlignment.GetHashCode();
                if (this.AnchorHorizontalAlignmentMetadata != null)
                    hash = hash * 59 + this.AnchorHorizontalAlignmentMetadata.GetHashCode();
                if (this.AnchorIgnoreIfNotPresent != null)
                    hash = hash * 59 + this.AnchorIgnoreIfNotPresent.GetHashCode();
                if (this.AnchorIgnoreIfNotPresentMetadata != null)
                    hash = hash * 59 + this.AnchorIgnoreIfNotPresentMetadata.GetHashCode();
                if (this.AnchorMatchWholeWord != null)
                    hash = hash * 59 + this.AnchorMatchWholeWord.GetHashCode();
                if (this.AnchorMatchWholeWordMetadata != null)
                    hash = hash * 59 + this.AnchorMatchWholeWordMetadata.GetHashCode();
                if (this.AnchorString != null)
                    hash = hash * 59 + this.AnchorString.GetHashCode();
                if (this.AnchorStringMetadata != null)
                    hash = hash * 59 + this.AnchorStringMetadata.GetHashCode();
                if (this.AnchorTabProcessorVersion != null)
                    hash = hash * 59 + this.AnchorTabProcessorVersion.GetHashCode();
                if (this.AnchorTabProcessorVersionMetadata != null)
                    hash = hash * 59 + this.AnchorTabProcessorVersionMetadata.GetHashCode();
                if (this.AnchorUnits != null)
                    hash = hash * 59 + this.AnchorUnits.GetHashCode();
                if (this.AnchorUnitsMetadata != null)
                    hash = hash * 59 + this.AnchorUnitsMetadata.GetHashCode();
                if (this.AnchorXOffset != null)
                    hash = hash * 59 + this.AnchorXOffset.GetHashCode();
                if (this.AnchorXOffsetMetadata != null)
                    hash = hash * 59 + this.AnchorXOffsetMetadata.GetHashCode();
                if (this.AnchorYOffset != null)
                    hash = hash * 59 + this.AnchorYOffset.GetHashCode();
                if (this.AnchorYOffsetMetadata != null)
                    hash = hash * 59 + this.AnchorYOffsetMetadata.GetHashCode();
                if (this.ConditionalParentLabel != null)
                    hash = hash * 59 + this.ConditionalParentLabel.GetHashCode();
                if (this.ConditionalParentLabelMetadata != null)
                    hash = hash * 59 + this.ConditionalParentLabelMetadata.GetHashCode();
                if (this.ConditionalParentValue != null)
                    hash = hash * 59 + this.ConditionalParentValue.GetHashCode();
                if (this.ConditionalParentValueMetadata != null)
                    hash = hash * 59 + this.ConditionalParentValueMetadata.GetHashCode();
                if (this.CustomTabId != null)
                    hash = hash * 59 + this.CustomTabId.GetHashCode();
                if (this.CustomTabIdMetadata != null)
                    hash = hash * 59 + this.CustomTabIdMetadata.GetHashCode();
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentIdMetadata != null)
                    hash = hash * 59 + this.DocumentIdMetadata.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.FormOrder != null)
                    hash = hash * 59 + this.FormOrder.GetHashCode();
                if (this.FormOrderMetadata != null)
                    hash = hash * 59 + this.FormOrderMetadata.GetHashCode();
                if (this.FormPageLabel != null)
                    hash = hash * 59 + this.FormPageLabel.GetHashCode();
                if (this.FormPageLabelMetadata != null)
                    hash = hash * 59 + this.FormPageLabelMetadata.GetHashCode();
                if (this.FormPageNumber != null)
                    hash = hash * 59 + this.FormPageNumber.GetHashCode();
                if (this.FormPageNumberMetadata != null)
                    hash = hash * 59 + this.FormPageNumberMetadata.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.HeightMetadata != null)
                    hash = hash * 59 + this.HeightMetadata.GetHashCode();
                if (this.Locked != null)
                    hash = hash * 59 + this.Locked.GetHashCode();
                if (this.LockedMetadata != null)
                    hash = hash * 59 + this.LockedMetadata.GetHashCode();
                if (this.MergeField != null)
                    hash = hash * 59 + this.MergeField.GetHashCode();
                if (this.MergeFieldXml != null)
                    hash = hash * 59 + this.MergeFieldXml.GetHashCode();
                if (this.PageNumber != null)
                    hash = hash * 59 + this.PageNumber.GetHashCode();
                if (this.PageNumberMetadata != null)
                    hash = hash * 59 + this.PageNumberMetadata.GetHashCode();
                if (this.RecipientId != null)
                    hash = hash * 59 + this.RecipientId.GetHashCode();
                if (this.RecipientIdGuid != null)
                    hash = hash * 59 + this.RecipientIdGuid.GetHashCode();
                if (this.RecipientIdGuidMetadata != null)
                    hash = hash * 59 + this.RecipientIdGuidMetadata.GetHashCode();
                if (this.RecipientIdMetadata != null)
                    hash = hash * 59 + this.RecipientIdMetadata.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.RequiredMetadata != null)
                    hash = hash * 59 + this.RequiredMetadata.GetHashCode();
                if (this.SmartContractInformation != null)
                    hash = hash * 59 + this.SmartContractInformation.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusMetadata != null)
                    hash = hash * 59 + this.StatusMetadata.GetHashCode();
                if (this.TabGroupLabels != null)
                    hash = hash * 59 + this.TabGroupLabels.GetHashCode();
                if (this.TabGroupLabelsMetadata != null)
                    hash = hash * 59 + this.TabGroupLabelsMetadata.GetHashCode();
                if (this.TabId != null)
                    hash = hash * 59 + this.TabId.GetHashCode();
                if (this.TabIdMetadata != null)
                    hash = hash * 59 + this.TabIdMetadata.GetHashCode();
                if (this.TabLabelMetadata != null)
                    hash = hash * 59 + this.TabLabelMetadata.GetHashCode();
                if (this.TabOrder != null)
                    hash = hash * 59 + this.TabOrder.GetHashCode();
                if (this.TabOrderMetadata != null)
                    hash = hash * 59 + this.TabOrderMetadata.GetHashCode();
                if (this.TabType != null)
                    hash = hash * 59 + this.TabType.GetHashCode();
                if (this.TabTypeMetadata != null)
                    hash = hash * 59 + this.TabTypeMetadata.GetHashCode();
                if (this.TemplateLocked != null)
                    hash = hash * 59 + this.TemplateLocked.GetHashCode();
                if (this.TemplateLockedMetadata != null)
                    hash = hash * 59 + this.TemplateLockedMetadata.GetHashCode();
                if (this.TemplateRequired != null)
                    hash = hash * 59 + this.TemplateRequired.GetHashCode();
                if (this.TemplateRequiredMetadata != null)
                    hash = hash * 59 + this.TemplateRequiredMetadata.GetHashCode();
                if (this.Tooltip != null)
                    hash = hash * 59 + this.Tooltip.GetHashCode();
                if (this.ToolTipMetadata != null)
                    hash = hash * 59 + this.ToolTipMetadata.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                if (this.WidthMetadata != null)
                    hash = hash * 59 + this.WidthMetadata.GetHashCode();
                if (this.XPosition != null)
                    hash = hash * 59 + this.XPosition.GetHashCode();
                if (this.XPositionMetadata != null)
                    hash = hash * 59 + this.XPositionMetadata.GetHashCode();
                if (this.YPosition != null)
                    hash = hash * 59 + this.YPosition.GetHashCode();
                if (this.YPositionMetadata != null)
                    hash = hash * 59 + this.YPositionMetadata.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
