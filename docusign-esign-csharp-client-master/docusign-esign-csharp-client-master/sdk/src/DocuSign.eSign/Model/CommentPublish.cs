/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// CommentPublish
    /// </summary>
    [DataContract]
    public partial class CommentPublish :  IEquatable<CommentPublish>, IValidatableObject
    {
        public CommentPublish()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentPublish" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Mentions">Mentions.</param>
        /// <param name="Text">Text.</param>
        /// <param name="ThreadAnchorKeys">ThreadAnchorKeys.</param>
        /// <param name="ThreadId">ThreadId.</param>
        /// <param name="VisibleTo">VisibleTo.</param>
        public CommentPublish(string Id = default(string), List<string> Mentions = default(List<string>), string Text = default(string), Dictionary<string, string> ThreadAnchorKeys = default(Dictionary<string, string>), string ThreadId = default(string), List<string> VisibleTo = default(List<string>))
        {
            this.Id = Id;
            this.Mentions = Mentions;
            this.Text = Text;
            this.ThreadAnchorKeys = ThreadAnchorKeys;
            this.ThreadId = ThreadId;
            this.VisibleTo = VisibleTo;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Mentions
        /// </summary>
        [DataMember(Name="mentions", EmitDefaultValue=false)]
        public List<string> Mentions { get; set; }
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Gets or Sets ThreadAnchorKeys
        /// </summary>
        [DataMember(Name="threadAnchorKeys", EmitDefaultValue=false)]
        public Dictionary<string, string> ThreadAnchorKeys { get; set; }
        /// <summary>
        /// Gets or Sets ThreadId
        /// </summary>
        [DataMember(Name="threadId", EmitDefaultValue=false)]
        public string ThreadId { get; set; }
        /// <summary>
        /// Gets or Sets VisibleTo
        /// </summary>
        [DataMember(Name="visibleTo", EmitDefaultValue=false)]
        public List<string> VisibleTo { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommentPublish {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Mentions: ").Append(Mentions).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ThreadAnchorKeys: ").Append(ThreadAnchorKeys).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  VisibleTo: ").Append(VisibleTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CommentPublish);
        }

        /// <summary>
        /// Returns true if CommentPublish instances are equal
        /// </summary>
        /// <param name="other">Instance of CommentPublish to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentPublish other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Mentions == other.Mentions ||
                    this.Mentions != null &&
                    this.Mentions.SequenceEqual(other.Mentions)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.ThreadAnchorKeys == other.ThreadAnchorKeys ||
                    this.ThreadAnchorKeys != null &&
                    this.ThreadAnchorKeys.SequenceEqual(other.ThreadAnchorKeys)
                ) && 
                (
                    this.ThreadId == other.ThreadId ||
                    this.ThreadId != null &&
                    this.ThreadId.Equals(other.ThreadId)
                ) && 
                (
                    this.VisibleTo == other.VisibleTo ||
                    this.VisibleTo != null &&
                    this.VisibleTo.SequenceEqual(other.VisibleTo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Mentions != null)
                    hash = hash * 59 + this.Mentions.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.ThreadAnchorKeys != null)
                    hash = hash * 59 + this.ThreadAnchorKeys.GetHashCode();
                if (this.ThreadId != null)
                    hash = hash * 59 + this.ThreadId.GetHashCode();
                if (this.VisibleTo != null)
                    hash = hash * 59 + this.VisibleTo.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
