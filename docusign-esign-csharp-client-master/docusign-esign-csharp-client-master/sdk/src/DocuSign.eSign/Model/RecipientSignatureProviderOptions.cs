/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// RecipientSignatureProviderOptions
    /// </summary>
    [DataContract]
    public partial class RecipientSignatureProviderOptions :  IEquatable<RecipientSignatureProviderOptions>, IValidatableObject
    {
        public RecipientSignatureProviderOptions()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipientSignatureProviderOptions" /> class.
        /// </summary>
        /// <param name="CpfNumber">CpfNumber.</param>
        /// <param name="CpfNumberMetadata">CpfNumberMetadata.</param>
        /// <param name="OneTimePassword">OneTimePassword.</param>
        /// <param name="OneTimePasswordMetadata">OneTimePasswordMetadata.</param>
        /// <param name="SignerRole">SignerRole.</param>
        /// <param name="SignerRoleMetadata">SignerRoleMetadata.</param>
        /// <param name="Sms">Sms.</param>
        /// <param name="SmsMetadata">SmsMetadata.</param>
        public RecipientSignatureProviderOptions(string CpfNumber = default(string), PropertyMetadata CpfNumberMetadata = default(PropertyMetadata), string OneTimePassword = default(string), PropertyMetadata OneTimePasswordMetadata = default(PropertyMetadata), string SignerRole = default(string), PropertyMetadata SignerRoleMetadata = default(PropertyMetadata), string Sms = default(string), PropertyMetadata SmsMetadata = default(PropertyMetadata))
        {
            this.CpfNumber = CpfNumber;
            this.CpfNumberMetadata = CpfNumberMetadata;
            this.OneTimePassword = OneTimePassword;
            this.OneTimePasswordMetadata = OneTimePasswordMetadata;
            this.SignerRole = SignerRole;
            this.SignerRoleMetadata = SignerRoleMetadata;
            this.Sms = Sms;
            this.SmsMetadata = SmsMetadata;
        }
        
        /// <summary>
        /// Gets or Sets CpfNumber
        /// </summary>
        [DataMember(Name="cpfNumber", EmitDefaultValue=false)]
        public string CpfNumber { get; set; }
        /// <summary>
        /// Gets or Sets CpfNumberMetadata
        /// </summary>
        [DataMember(Name="cpfNumberMetadata", EmitDefaultValue=false)]
        public PropertyMetadata CpfNumberMetadata { get; set; }
        /// <summary>
        /// Gets or Sets OneTimePassword
        /// </summary>
        [DataMember(Name="oneTimePassword", EmitDefaultValue=false)]
        public string OneTimePassword { get; set; }
        /// <summary>
        /// Gets or Sets OneTimePasswordMetadata
        /// </summary>
        [DataMember(Name="oneTimePasswordMetadata", EmitDefaultValue=false)]
        public PropertyMetadata OneTimePasswordMetadata { get; set; }
        /// <summary>
        /// Gets or Sets SignerRole
        /// </summary>
        [DataMember(Name="signerRole", EmitDefaultValue=false)]
        public string SignerRole { get; set; }
        /// <summary>
        /// Gets or Sets SignerRoleMetadata
        /// </summary>
        [DataMember(Name="signerRoleMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SignerRoleMetadata { get; set; }
        /// <summary>
        /// Gets or Sets Sms
        /// </summary>
        [DataMember(Name="sms", EmitDefaultValue=false)]
        public string Sms { get; set; }
        /// <summary>
        /// Gets or Sets SmsMetadata
        /// </summary>
        [DataMember(Name="smsMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SmsMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecipientSignatureProviderOptions {\n");
            sb.Append("  CpfNumber: ").Append(CpfNumber).Append("\n");
            sb.Append("  CpfNumberMetadata: ").Append(CpfNumberMetadata).Append("\n");
            sb.Append("  OneTimePassword: ").Append(OneTimePassword).Append("\n");
            sb.Append("  OneTimePasswordMetadata: ").Append(OneTimePasswordMetadata).Append("\n");
            sb.Append("  SignerRole: ").Append(SignerRole).Append("\n");
            sb.Append("  SignerRoleMetadata: ").Append(SignerRoleMetadata).Append("\n");
            sb.Append("  Sms: ").Append(Sms).Append("\n");
            sb.Append("  SmsMetadata: ").Append(SmsMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RecipientSignatureProviderOptions);
        }

        /// <summary>
        /// Returns true if RecipientSignatureProviderOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of RecipientSignatureProviderOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipientSignatureProviderOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CpfNumber == other.CpfNumber ||
                    this.CpfNumber != null &&
                    this.CpfNumber.Equals(other.CpfNumber)
                ) && 
                (
                    this.CpfNumberMetadata == other.CpfNumberMetadata ||
                    this.CpfNumberMetadata != null &&
                    this.CpfNumberMetadata.Equals(other.CpfNumberMetadata)
                ) && 
                (
                    this.OneTimePassword == other.OneTimePassword ||
                    this.OneTimePassword != null &&
                    this.OneTimePassword.Equals(other.OneTimePassword)
                ) && 
                (
                    this.OneTimePasswordMetadata == other.OneTimePasswordMetadata ||
                    this.OneTimePasswordMetadata != null &&
                    this.OneTimePasswordMetadata.Equals(other.OneTimePasswordMetadata)
                ) && 
                (
                    this.SignerRole == other.SignerRole ||
                    this.SignerRole != null &&
                    this.SignerRole.Equals(other.SignerRole)
                ) && 
                (
                    this.SignerRoleMetadata == other.SignerRoleMetadata ||
                    this.SignerRoleMetadata != null &&
                    this.SignerRoleMetadata.Equals(other.SignerRoleMetadata)
                ) && 
                (
                    this.Sms == other.Sms ||
                    this.Sms != null &&
                    this.Sms.Equals(other.Sms)
                ) && 
                (
                    this.SmsMetadata == other.SmsMetadata ||
                    this.SmsMetadata != null &&
                    this.SmsMetadata.Equals(other.SmsMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CpfNumber != null)
                    hash = hash * 59 + this.CpfNumber.GetHashCode();
                if (this.CpfNumberMetadata != null)
                    hash = hash * 59 + this.CpfNumberMetadata.GetHashCode();
                if (this.OneTimePassword != null)
                    hash = hash * 59 + this.OneTimePassword.GetHashCode();
                if (this.OneTimePasswordMetadata != null)
                    hash = hash * 59 + this.OneTimePasswordMetadata.GetHashCode();
                if (this.SignerRole != null)
                    hash = hash * 59 + this.SignerRole.GetHashCode();
                if (this.SignerRoleMetadata != null)
                    hash = hash * 59 + this.SignerRoleMetadata.GetHashCode();
                if (this.Sms != null)
                    hash = hash * 59 + this.Sms.GetHashCode();
                if (this.SmsMetadata != null)
                    hash = hash * 59 + this.SmsMetadata.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
