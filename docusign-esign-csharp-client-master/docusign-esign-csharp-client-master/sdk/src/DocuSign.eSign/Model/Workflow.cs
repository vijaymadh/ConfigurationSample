/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Workflow
    /// </summary>
    [DataContract]
    public partial class Workflow :  IEquatable<Workflow>, IValidatableObject
    {
        public Workflow()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Workflow" /> class.
        /// </summary>
        /// <param name="CurrentWorkflowStepId">CurrentWorkflowStepId.</param>
        /// <param name="OverwriteUpdateMode">OverwriteUpdateMode.</param>
        /// <param name="ResumeDate">ResumeDate.</param>
        /// <param name="ScheduledSending">ScheduledSending.</param>
        /// <param name="WorkflowStatus">WorkflowStatus.</param>
        /// <param name="WorkflowSteps">WorkflowSteps.</param>
        public Workflow(string CurrentWorkflowStepId = default(string), string OverwriteUpdateMode = default(string), string ResumeDate = default(string), ScheduledSending ScheduledSending = default(ScheduledSending), string WorkflowStatus = default(string), List<WorkflowStep> WorkflowSteps = default(List<WorkflowStep>))
        {
            this.CurrentWorkflowStepId = CurrentWorkflowStepId;
            this.OverwriteUpdateMode = OverwriteUpdateMode;
            this.ResumeDate = ResumeDate;
            this.ScheduledSending = ScheduledSending;
            this.WorkflowStatus = WorkflowStatus;
            this.WorkflowSteps = WorkflowSteps;
        }
        
        /// <summary>
        /// Gets or Sets CurrentWorkflowStepId
        /// </summary>
        [DataMember(Name="currentWorkflowStepId", EmitDefaultValue=false)]
        public string CurrentWorkflowStepId { get; set; }
        /// <summary>
        /// Gets or Sets OverwriteUpdateMode
        /// </summary>
        [DataMember(Name="overwriteUpdateMode", EmitDefaultValue=false)]
        public string OverwriteUpdateMode { get; set; }
        /// <summary>
        /// Gets or Sets ResumeDate
        /// </summary>
        [DataMember(Name="resumeDate", EmitDefaultValue=false)]
        public string ResumeDate { get; set; }
        /// <summary>
        /// Gets or Sets ScheduledSending
        /// </summary>
        [DataMember(Name="scheduledSending", EmitDefaultValue=false)]
        public ScheduledSending ScheduledSending { get; set; }
        /// <summary>
        /// Gets or Sets WorkflowStatus
        /// </summary>
        [DataMember(Name="workflowStatus", EmitDefaultValue=false)]
        public string WorkflowStatus { get; set; }
        /// <summary>
        /// Gets or Sets WorkflowSteps
        /// </summary>
        [DataMember(Name="workflowSteps", EmitDefaultValue=false)]
        public List<WorkflowStep> WorkflowSteps { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Workflow {\n");
            sb.Append("  CurrentWorkflowStepId: ").Append(CurrentWorkflowStepId).Append("\n");
            sb.Append("  OverwriteUpdateMode: ").Append(OverwriteUpdateMode).Append("\n");
            sb.Append("  ResumeDate: ").Append(ResumeDate).Append("\n");
            sb.Append("  ScheduledSending: ").Append(ScheduledSending).Append("\n");
            sb.Append("  WorkflowStatus: ").Append(WorkflowStatus).Append("\n");
            sb.Append("  WorkflowSteps: ").Append(WorkflowSteps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Workflow);
        }

        /// <summary>
        /// Returns true if Workflow instances are equal
        /// </summary>
        /// <param name="other">Instance of Workflow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Workflow other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrentWorkflowStepId == other.CurrentWorkflowStepId ||
                    this.CurrentWorkflowStepId != null &&
                    this.CurrentWorkflowStepId.Equals(other.CurrentWorkflowStepId)
                ) && 
                (
                    this.OverwriteUpdateMode == other.OverwriteUpdateMode ||
                    this.OverwriteUpdateMode != null &&
                    this.OverwriteUpdateMode.Equals(other.OverwriteUpdateMode)
                ) && 
                (
                    this.ResumeDate == other.ResumeDate ||
                    this.ResumeDate != null &&
                    this.ResumeDate.Equals(other.ResumeDate)
                ) && 
                (
                    this.ScheduledSending == other.ScheduledSending ||
                    this.ScheduledSending != null &&
                    this.ScheduledSending.Equals(other.ScheduledSending)
                ) && 
                (
                    this.WorkflowStatus == other.WorkflowStatus ||
                    this.WorkflowStatus != null &&
                    this.WorkflowStatus.Equals(other.WorkflowStatus)
                ) && 
                (
                    this.WorkflowSteps == other.WorkflowSteps ||
                    this.WorkflowSteps != null &&
                    this.WorkflowSteps.SequenceEqual(other.WorkflowSteps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrentWorkflowStepId != null)
                    hash = hash * 59 + this.CurrentWorkflowStepId.GetHashCode();
                if (this.OverwriteUpdateMode != null)
                    hash = hash * 59 + this.OverwriteUpdateMode.GetHashCode();
                if (this.ResumeDate != null)
                    hash = hash * 59 + this.ResumeDate.GetHashCode();
                if (this.ScheduledSending != null)
                    hash = hash * 59 + this.ScheduledSending.GetHashCode();
                if (this.WorkflowStatus != null)
                    hash = hash * 59 + this.WorkflowStatus.GetHashCode();
                if (this.WorkflowSteps != null)
                    hash = hash * 59 + this.WorkflowSteps.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
