/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DisplayApplianceRecipient
    /// </summary>
    [DataContract]
    public partial class DisplayApplianceRecipient :  IEquatable<DisplayApplianceRecipient>, IValidatableObject
    {
        public DisplayApplianceRecipient()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayApplianceRecipient" /> class.
        /// </summary>
        /// <param name="CfrPart11">.</param>
        /// <param name="Company">.</param>
        /// <param name="DigitalSignatureBase64">.</param>
        /// <param name="Email">.</param>
        /// <param name="FullName">.</param>
        /// <param name="InitialsBase64">.</param>
        /// <param name="InPersonEmail">.</param>
        /// <param name="IsNotary">.</param>
        /// <param name="NotarySealBase64">.</param>
        /// <param name="PhoneNumber">.</param>
        /// <param name="RecipientCompleteCount">.</param>
        /// <param name="RecipientGuidId">.</param>
        /// <param name="RecipientId">Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document..</param>
        /// <param name="RecipientStatus">.</param>
        /// <param name="RecipientType">.</param>
        /// <param name="RowState">.</param>
        /// <param name="SignatureBase64">.</param>
        /// <param name="Signed">.</param>
        /// <param name="SignerApplyTabs">.</param>
        /// <param name="SignerAttachmentBase64">.</param>
        /// <param name="UserName">.</param>
        public DisplayApplianceRecipient(bool? CfrPart11 = default(bool?), string Company = default(string), string DigitalSignatureBase64 = default(string), string Email = default(string), string FullName = default(string), string InitialsBase64 = default(string), string InPersonEmail = default(string), bool? IsNotary = default(bool?), string NotarySealBase64 = default(string), string PhoneNumber = default(string), int? RecipientCompleteCount = default(int?), string RecipientGuidId = default(string), string RecipientId = default(string), string RecipientStatus = default(string), string RecipientType = default(string), string RowState = default(string), string SignatureBase64 = default(string), bool? Signed = default(bool?), bool? SignerApplyTabs = default(bool?), string SignerAttachmentBase64 = default(string), string UserName = default(string))
        {
            this.CfrPart11 = CfrPart11;
            this.Company = Company;
            this.DigitalSignatureBase64 = DigitalSignatureBase64;
            this.Email = Email;
            this.FullName = FullName;
            this.InitialsBase64 = InitialsBase64;
            this.InPersonEmail = InPersonEmail;
            this.IsNotary = IsNotary;
            this.NotarySealBase64 = NotarySealBase64;
            this.PhoneNumber = PhoneNumber;
            this.RecipientCompleteCount = RecipientCompleteCount;
            this.RecipientGuidId = RecipientGuidId;
            this.RecipientId = RecipientId;
            this.RecipientStatus = RecipientStatus;
            this.RecipientType = RecipientType;
            this.RowState = RowState;
            this.SignatureBase64 = SignatureBase64;
            this.Signed = Signed;
            this.SignerApplyTabs = SignerApplyTabs;
            this.SignerAttachmentBase64 = SignerAttachmentBase64;
            this.UserName = UserName;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="cfrPart11", EmitDefaultValue=false)]
        public bool? CfrPart11 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="digitalSignatureBase64", EmitDefaultValue=false)]
        public string DigitalSignatureBase64 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="initialsBase64", EmitDefaultValue=false)]
        public string InitialsBase64 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="inPersonEmail", EmitDefaultValue=false)]
        public string InPersonEmail { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isNotary", EmitDefaultValue=false)]
        public bool? IsNotary { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="notarySealBase64", EmitDefaultValue=false)]
        public string NotarySealBase64 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="recipientCompleteCount", EmitDefaultValue=false)]
        public int? RecipientCompleteCount { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="recipientGuidId", EmitDefaultValue=false)]
        public string RecipientGuidId { get; set; }
        /// <summary>
        /// Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
        /// </summary>
        /// <value>Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.</value>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="recipientStatus", EmitDefaultValue=false)]
        public string RecipientStatus { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="recipientType", EmitDefaultValue=false)]
        public string RecipientType { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="rowState", EmitDefaultValue=false)]
        public string RowState { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="signatureBase64", EmitDefaultValue=false)]
        public string SignatureBase64 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="signed", EmitDefaultValue=false)]
        public bool? Signed { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="signerApplyTabs", EmitDefaultValue=false)]
        public bool? SignerApplyTabs { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="signerAttachmentBase64", EmitDefaultValue=false)]
        public string SignerAttachmentBase64 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisplayApplianceRecipient {\n");
            sb.Append("  CfrPart11: ").Append(CfrPart11).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  DigitalSignatureBase64: ").Append(DigitalSignatureBase64).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  InitialsBase64: ").Append(InitialsBase64).Append("\n");
            sb.Append("  InPersonEmail: ").Append(InPersonEmail).Append("\n");
            sb.Append("  IsNotary: ").Append(IsNotary).Append("\n");
            sb.Append("  NotarySealBase64: ").Append(NotarySealBase64).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  RecipientCompleteCount: ").Append(RecipientCompleteCount).Append("\n");
            sb.Append("  RecipientGuidId: ").Append(RecipientGuidId).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  RecipientStatus: ").Append(RecipientStatus).Append("\n");
            sb.Append("  RecipientType: ").Append(RecipientType).Append("\n");
            sb.Append("  RowState: ").Append(RowState).Append("\n");
            sb.Append("  SignatureBase64: ").Append(SignatureBase64).Append("\n");
            sb.Append("  Signed: ").Append(Signed).Append("\n");
            sb.Append("  SignerApplyTabs: ").Append(SignerApplyTabs).Append("\n");
            sb.Append("  SignerAttachmentBase64: ").Append(SignerAttachmentBase64).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DisplayApplianceRecipient);
        }

        /// <summary>
        /// Returns true if DisplayApplianceRecipient instances are equal
        /// </summary>
        /// <param name="other">Instance of DisplayApplianceRecipient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplayApplianceRecipient other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CfrPart11 == other.CfrPart11 ||
                    this.CfrPart11 != null &&
                    this.CfrPart11.Equals(other.CfrPart11)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.DigitalSignatureBase64 == other.DigitalSignatureBase64 ||
                    this.DigitalSignatureBase64 != null &&
                    this.DigitalSignatureBase64.Equals(other.DigitalSignatureBase64)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.InitialsBase64 == other.InitialsBase64 ||
                    this.InitialsBase64 != null &&
                    this.InitialsBase64.Equals(other.InitialsBase64)
                ) && 
                (
                    this.InPersonEmail == other.InPersonEmail ||
                    this.InPersonEmail != null &&
                    this.InPersonEmail.Equals(other.InPersonEmail)
                ) && 
                (
                    this.IsNotary == other.IsNotary ||
                    this.IsNotary != null &&
                    this.IsNotary.Equals(other.IsNotary)
                ) && 
                (
                    this.NotarySealBase64 == other.NotarySealBase64 ||
                    this.NotarySealBase64 != null &&
                    this.NotarySealBase64.Equals(other.NotarySealBase64)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.RecipientCompleteCount == other.RecipientCompleteCount ||
                    this.RecipientCompleteCount != null &&
                    this.RecipientCompleteCount.Equals(other.RecipientCompleteCount)
                ) && 
                (
                    this.RecipientGuidId == other.RecipientGuidId ||
                    this.RecipientGuidId != null &&
                    this.RecipientGuidId.Equals(other.RecipientGuidId)
                ) && 
                (
                    this.RecipientId == other.RecipientId ||
                    this.RecipientId != null &&
                    this.RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    this.RecipientStatus == other.RecipientStatus ||
                    this.RecipientStatus != null &&
                    this.RecipientStatus.Equals(other.RecipientStatus)
                ) && 
                (
                    this.RecipientType == other.RecipientType ||
                    this.RecipientType != null &&
                    this.RecipientType.Equals(other.RecipientType)
                ) && 
                (
                    this.RowState == other.RowState ||
                    this.RowState != null &&
                    this.RowState.Equals(other.RowState)
                ) && 
                (
                    this.SignatureBase64 == other.SignatureBase64 ||
                    this.SignatureBase64 != null &&
                    this.SignatureBase64.Equals(other.SignatureBase64)
                ) && 
                (
                    this.Signed == other.Signed ||
                    this.Signed != null &&
                    this.Signed.Equals(other.Signed)
                ) && 
                (
                    this.SignerApplyTabs == other.SignerApplyTabs ||
                    this.SignerApplyTabs != null &&
                    this.SignerApplyTabs.Equals(other.SignerApplyTabs)
                ) && 
                (
                    this.SignerAttachmentBase64 == other.SignerAttachmentBase64 ||
                    this.SignerAttachmentBase64 != null &&
                    this.SignerAttachmentBase64.Equals(other.SignerAttachmentBase64)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CfrPart11 != null)
                    hash = hash * 59 + this.CfrPart11.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.DigitalSignatureBase64 != null)
                    hash = hash * 59 + this.DigitalSignatureBase64.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.InitialsBase64 != null)
                    hash = hash * 59 + this.InitialsBase64.GetHashCode();
                if (this.InPersonEmail != null)
                    hash = hash * 59 + this.InPersonEmail.GetHashCode();
                if (this.IsNotary != null)
                    hash = hash * 59 + this.IsNotary.GetHashCode();
                if (this.NotarySealBase64 != null)
                    hash = hash * 59 + this.NotarySealBase64.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.RecipientCompleteCount != null)
                    hash = hash * 59 + this.RecipientCompleteCount.GetHashCode();
                if (this.RecipientGuidId != null)
                    hash = hash * 59 + this.RecipientGuidId.GetHashCode();
                if (this.RecipientId != null)
                    hash = hash * 59 + this.RecipientId.GetHashCode();
                if (this.RecipientStatus != null)
                    hash = hash * 59 + this.RecipientStatus.GetHashCode();
                if (this.RecipientType != null)
                    hash = hash * 59 + this.RecipientType.GetHashCode();
                if (this.RowState != null)
                    hash = hash * 59 + this.RowState.GetHashCode();
                if (this.SignatureBase64 != null)
                    hash = hash * 59 + this.SignatureBase64.GetHashCode();
                if (this.Signed != null)
                    hash = hash * 59 + this.Signed.GetHashCode();
                if (this.SignerApplyTabs != null)
                    hash = hash * 59 + this.SignerApplyTabs.GetHashCode();
                if (this.SignerAttachmentBase64 != null)
                    hash = hash * 59 + this.SignerAttachmentBase64.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
