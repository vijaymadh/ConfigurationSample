/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.eSign.Client.SwaggerDateConverter;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// CommentHistoryResult
    /// </summary>
    [DataContract]
    public partial class CommentHistoryResult :  IEquatable<CommentHistoryResult>, IValidatableObject
    {
        public CommentHistoryResult()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentHistoryResult" /> class.
        /// </summary>
        /// <param name="Comments">Comments.</param>
        /// <param name="Count">Count.</param>
        /// <param name="EndTimetoken">EndTimetoken.</param>
        /// <param name="StartTimetoken">StartTimetoken.</param>
        public CommentHistoryResult(List<Comment> Comments = default(List<Comment>), int? Count = default(int?), string EndTimetoken = default(string), string StartTimetoken = default(string))
        {
            this.Comments = Comments;
            this.Count = Count;
            this.EndTimetoken = EndTimetoken;
            this.StartTimetoken = StartTimetoken;
        }
        
        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public List<Comment> Comments { get; set; }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }
        /// <summary>
        /// Gets or Sets EndTimetoken
        /// </summary>
        [DataMember(Name="endTimetoken", EmitDefaultValue=false)]
        public string EndTimetoken { get; set; }
        /// <summary>
        /// Gets or Sets StartTimetoken
        /// </summary>
        [DataMember(Name="startTimetoken", EmitDefaultValue=false)]
        public string StartTimetoken { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommentHistoryResult {\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  EndTimetoken: ").Append(EndTimetoken).Append("\n");
            sb.Append("  StartTimetoken: ").Append(StartTimetoken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CommentHistoryResult);
        }

        /// <summary>
        /// Returns true if CommentHistoryResult instances are equal
        /// </summary>
        /// <param name="other">Instance of CommentHistoryResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentHistoryResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Comments == other.Comments ||
                    this.Comments != null &&
                    this.Comments.SequenceEqual(other.Comments)
                ) && 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.EndTimetoken == other.EndTimetoken ||
                    this.EndTimetoken != null &&
                    this.EndTimetoken.Equals(other.EndTimetoken)
                ) && 
                (
                    this.StartTimetoken == other.StartTimetoken ||
                    this.StartTimetoken != null &&
                    this.StartTimetoken.Equals(other.StartTimetoken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Comments != null)
                    hash = hash * 59 + this.Comments.GetHashCode();
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.EndTimetoken != null)
                    hash = hash * 59 + this.EndTimetoken.GetHashCode();
                if (this.StartTimetoken != null)
                    hash = hash * 59 + this.StartTimetoken.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
