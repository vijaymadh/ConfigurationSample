/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DisplayApplianceEnvelope
    /// </summary>
    [DataContract]
    public partial class DisplayApplianceEnvelope :  IEquatable<DisplayApplianceEnvelope>, IValidatableObject
    {
        public DisplayApplianceEnvelope()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayApplianceEnvelope" /> class.
        /// </summary>
        /// <param name="AddDemoStamp">.</param>
        /// <param name="AllowMultipleAttachments">.</param>
        /// <param name="BurnDefaultTabData">.</param>
        /// <param name="ConvertPdfFields">.</param>
        /// <param name="EnvelopeId">The envelope ID of the envelope status that failed to post..</param>
        /// <param name="EnvelopeType">.</param>
        /// <param name="IncludeSigsBeforeComplete">.</param>
        /// <param name="IsConcatMode">.</param>
        /// <param name="IsEnvelopeIDStampingEnabled">.</param>
        /// <param name="PdfFormConversionFontScale100">.</param>
        /// <param name="ShouldFlatten">.</param>
        /// <param name="ShowEnvelopeChanges">.</param>
        /// <param name="SignOnline">.</param>
        /// <param name="Status">Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later..</param>
        /// <param name="UserId">.</param>
        public DisplayApplianceEnvelope(bool? AddDemoStamp = default(bool?), bool? AllowMultipleAttachments = default(bool?), bool? BurnDefaultTabData = default(bool?), bool? ConvertPdfFields = default(bool?), string EnvelopeId = default(string), string EnvelopeType = default(string), bool? IncludeSigsBeforeComplete = default(bool?), bool? IsConcatMode = default(bool?), bool? IsEnvelopeIDStampingEnabled = default(bool?), bool? PdfFormConversionFontScale100 = default(bool?), bool? ShouldFlatten = default(bool?), bool? ShowEnvelopeChanges = default(bool?), bool? SignOnline = default(bool?), string Status = default(string), string UserId = default(string))
        {
            this.AddDemoStamp = AddDemoStamp;
            this.AllowMultipleAttachments = AllowMultipleAttachments;
            this.BurnDefaultTabData = BurnDefaultTabData;
            this.ConvertPdfFields = ConvertPdfFields;
            this.EnvelopeId = EnvelopeId;
            this.EnvelopeType = EnvelopeType;
            this.IncludeSigsBeforeComplete = IncludeSigsBeforeComplete;
            this.IsConcatMode = IsConcatMode;
            this.IsEnvelopeIDStampingEnabled = IsEnvelopeIDStampingEnabled;
            this.PdfFormConversionFontScale100 = PdfFormConversionFontScale100;
            this.ShouldFlatten = ShouldFlatten;
            this.ShowEnvelopeChanges = ShowEnvelopeChanges;
            this.SignOnline = SignOnline;
            this.Status = Status;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="addDemoStamp", EmitDefaultValue=false)]
        public bool? AddDemoStamp { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="allowMultipleAttachments", EmitDefaultValue=false)]
        public bool? AllowMultipleAttachments { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="burnDefaultTabData", EmitDefaultValue=false)]
        public bool? BurnDefaultTabData { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="convertPdfFields", EmitDefaultValue=false)]
        public bool? ConvertPdfFields { get; set; }
        /// <summary>
        /// The envelope ID of the envelope status that failed to post.
        /// </summary>
        /// <value>The envelope ID of the envelope status that failed to post.</value>
        [DataMember(Name="envelopeId", EmitDefaultValue=false)]
        public string EnvelopeId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="envelopeType", EmitDefaultValue=false)]
        public string EnvelopeType { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="includeSigsBeforeComplete", EmitDefaultValue=false)]
        public bool? IncludeSigsBeforeComplete { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isConcatMode", EmitDefaultValue=false)]
        public bool? IsConcatMode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="isEnvelopeIDStampingEnabled", EmitDefaultValue=false)]
        public bool? IsEnvelopeIDStampingEnabled { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="pdfFormConversionFontScale100", EmitDefaultValue=false)]
        public bool? PdfFormConversionFontScale100 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="shouldFlatten", EmitDefaultValue=false)]
        public bool? ShouldFlatten { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="showEnvelopeChanges", EmitDefaultValue=false)]
        public bool? ShowEnvelopeChanges { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="signOnline", EmitDefaultValue=false)]
        public bool? SignOnline { get; set; }
        /// <summary>
        /// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
        /// </summary>
        /// <value>Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisplayApplianceEnvelope {\n");
            sb.Append("  AddDemoStamp: ").Append(AddDemoStamp).Append("\n");
            sb.Append("  AllowMultipleAttachments: ").Append(AllowMultipleAttachments).Append("\n");
            sb.Append("  BurnDefaultTabData: ").Append(BurnDefaultTabData).Append("\n");
            sb.Append("  ConvertPdfFields: ").Append(ConvertPdfFields).Append("\n");
            sb.Append("  EnvelopeId: ").Append(EnvelopeId).Append("\n");
            sb.Append("  EnvelopeType: ").Append(EnvelopeType).Append("\n");
            sb.Append("  IncludeSigsBeforeComplete: ").Append(IncludeSigsBeforeComplete).Append("\n");
            sb.Append("  IsConcatMode: ").Append(IsConcatMode).Append("\n");
            sb.Append("  IsEnvelopeIDStampingEnabled: ").Append(IsEnvelopeIDStampingEnabled).Append("\n");
            sb.Append("  PdfFormConversionFontScale100: ").Append(PdfFormConversionFontScale100).Append("\n");
            sb.Append("  ShouldFlatten: ").Append(ShouldFlatten).Append("\n");
            sb.Append("  ShowEnvelopeChanges: ").Append(ShowEnvelopeChanges).Append("\n");
            sb.Append("  SignOnline: ").Append(SignOnline).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DisplayApplianceEnvelope);
        }

        /// <summary>
        /// Returns true if DisplayApplianceEnvelope instances are equal
        /// </summary>
        /// <param name="other">Instance of DisplayApplianceEnvelope to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplayApplianceEnvelope other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AddDemoStamp == other.AddDemoStamp ||
                    this.AddDemoStamp != null &&
                    this.AddDemoStamp.Equals(other.AddDemoStamp)
                ) && 
                (
                    this.AllowMultipleAttachments == other.AllowMultipleAttachments ||
                    this.AllowMultipleAttachments != null &&
                    this.AllowMultipleAttachments.Equals(other.AllowMultipleAttachments)
                ) && 
                (
                    this.BurnDefaultTabData == other.BurnDefaultTabData ||
                    this.BurnDefaultTabData != null &&
                    this.BurnDefaultTabData.Equals(other.BurnDefaultTabData)
                ) && 
                (
                    this.ConvertPdfFields == other.ConvertPdfFields ||
                    this.ConvertPdfFields != null &&
                    this.ConvertPdfFields.Equals(other.ConvertPdfFields)
                ) && 
                (
                    this.EnvelopeId == other.EnvelopeId ||
                    this.EnvelopeId != null &&
                    this.EnvelopeId.Equals(other.EnvelopeId)
                ) && 
                (
                    this.EnvelopeType == other.EnvelopeType ||
                    this.EnvelopeType != null &&
                    this.EnvelopeType.Equals(other.EnvelopeType)
                ) && 
                (
                    this.IncludeSigsBeforeComplete == other.IncludeSigsBeforeComplete ||
                    this.IncludeSigsBeforeComplete != null &&
                    this.IncludeSigsBeforeComplete.Equals(other.IncludeSigsBeforeComplete)
                ) && 
                (
                    this.IsConcatMode == other.IsConcatMode ||
                    this.IsConcatMode != null &&
                    this.IsConcatMode.Equals(other.IsConcatMode)
                ) && 
                (
                    this.IsEnvelopeIDStampingEnabled == other.IsEnvelopeIDStampingEnabled ||
                    this.IsEnvelopeIDStampingEnabled != null &&
                    this.IsEnvelopeIDStampingEnabled.Equals(other.IsEnvelopeIDStampingEnabled)
                ) && 
                (
                    this.PdfFormConversionFontScale100 == other.PdfFormConversionFontScale100 ||
                    this.PdfFormConversionFontScale100 != null &&
                    this.PdfFormConversionFontScale100.Equals(other.PdfFormConversionFontScale100)
                ) && 
                (
                    this.ShouldFlatten == other.ShouldFlatten ||
                    this.ShouldFlatten != null &&
                    this.ShouldFlatten.Equals(other.ShouldFlatten)
                ) && 
                (
                    this.ShowEnvelopeChanges == other.ShowEnvelopeChanges ||
                    this.ShowEnvelopeChanges != null &&
                    this.ShowEnvelopeChanges.Equals(other.ShowEnvelopeChanges)
                ) && 
                (
                    this.SignOnline == other.SignOnline ||
                    this.SignOnline != null &&
                    this.SignOnline.Equals(other.SignOnline)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AddDemoStamp != null)
                    hash = hash * 59 + this.AddDemoStamp.GetHashCode();
                if (this.AllowMultipleAttachments != null)
                    hash = hash * 59 + this.AllowMultipleAttachments.GetHashCode();
                if (this.BurnDefaultTabData != null)
                    hash = hash * 59 + this.BurnDefaultTabData.GetHashCode();
                if (this.ConvertPdfFields != null)
                    hash = hash * 59 + this.ConvertPdfFields.GetHashCode();
                if (this.EnvelopeId != null)
                    hash = hash * 59 + this.EnvelopeId.GetHashCode();
                if (this.EnvelopeType != null)
                    hash = hash * 59 + this.EnvelopeType.GetHashCode();
                if (this.IncludeSigsBeforeComplete != null)
                    hash = hash * 59 + this.IncludeSigsBeforeComplete.GetHashCode();
                if (this.IsConcatMode != null)
                    hash = hash * 59 + this.IsConcatMode.GetHashCode();
                if (this.IsEnvelopeIDStampingEnabled != null)
                    hash = hash * 59 + this.IsEnvelopeIDStampingEnabled.GetHashCode();
                if (this.PdfFormConversionFontScale100 != null)
                    hash = hash * 59 + this.PdfFormConversionFontScale100.GetHashCode();
                if (this.ShouldFlatten != null)
                    hash = hash * 59 + this.ShouldFlatten.GetHashCode();
                if (this.ShowEnvelopeChanges != null)
                    hash = hash * 59 + this.ShowEnvelopeChanges.GetHashCode();
                if (this.SignOnline != null)
                    hash = hash * 59 + this.SignOnline.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
