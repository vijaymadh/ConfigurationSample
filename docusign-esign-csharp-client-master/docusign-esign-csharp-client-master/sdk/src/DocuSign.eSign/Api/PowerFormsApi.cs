/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPowerFormsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns></returns>
        PowerForm CreatePowerForm(string accountId, PowerForm powerForm = null);

        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<PowerForm> CreatePowerFormWithHttpInfo(string accountId, PowerForm powerForm = null);
        /// <summary>
        /// Delete a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns></returns>
        void DeletePowerForm(string accountId, string powerFormId);

        /// <summary>
        /// Delete a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePowerFormWithHttpInfo(string accountId, string powerFormId);
        /// <summary>
        /// Deletes one or more PowerForms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns></returns>
        PowerFormsResponse DeletePowerForms(string accountId, PowerFormsRequest powerFormsRequest = null);

        /// <summary>
        /// Deletes one or more PowerForms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<PowerFormsResponse> DeletePowerFormsWithHttpInfo(string accountId, PowerFormsRequest powerFormsRequest = null);
        /// <summary>
        /// Returns a single PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns></returns>
        PowerForm GetPowerForm(string accountId, string powerFormId);

        /// <summary>
        /// Returns a single PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<PowerForm> GetPowerFormWithHttpInfo(string accountId, string powerFormId);
        /// <summary>
        /// Returns the form data associated with the usage of a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        PowerFormsFormDataResponse GetPowerFormData(string accountId, string powerFormId, PowerFormsApi.GetPowerFormDataOptions options = null);

        /// <summary>
        /// Returns the form data associated with the usage of a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<PowerFormsFormDataResponse> GetPowerFormDataWithHttpInfo(string accountId, string powerFormId, PowerFormsApi.GetPowerFormDataOptions options = null);
        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        PowerFormSendersResponse ListPowerFormSenders(string accountId, PowerFormsApi.ListPowerFormSendersOptions options = null);

        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<PowerFormSendersResponse> ListPowerFormSendersWithHttpInfo(string accountId, PowerFormsApi.ListPowerFormSendersOptions options = null);
        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        PowerFormsResponse ListPowerForms(string accountId, PowerFormsApi.ListPowerFormsOptions options = null);

        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<PowerFormsResponse> ListPowerFormsWithHttpInfo(string accountId, PowerFormsApi.ListPowerFormsOptions options = null);
        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns></returns>
        PowerForm UpdatePowerForm(string accountId, string powerFormId, PowerForm powerForm = null);

        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<PowerForm> UpdatePowerFormWithHttpInfo(string accountId, string powerFormId, PowerForm powerForm = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>Task of PowerForm</returns>
        System.Threading.Tasks.Task<PowerForm> CreatePowerFormAsync(string accountId, PowerForm powerForm = null);

        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerForm)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerForm>> CreatePowerFormAsyncWithHttpInfo(string accountId, PowerForm powerForm = null);
        /// <summary>
        /// Delete a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePowerFormAsync(string accountId, string powerFormId);

        /// <summary>
        /// Delete a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePowerFormAsyncWithHttpInfo(string accountId, string powerFormId);
        /// <summary>
        /// Deletes one or more PowerForms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>Task of PowerFormsResponse</returns>
        System.Threading.Tasks.Task<PowerFormsResponse> DeletePowerFormsAsync(string accountId, PowerFormsRequest powerFormsRequest = null);

        /// <summary>
        /// Deletes one or more PowerForms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerFormsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerFormsResponse>> DeletePowerFormsAsyncWithHttpInfo(string accountId, PowerFormsRequest powerFormsRequest = null);
        /// <summary>
        /// Returns a single PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of PowerForm</returns>
        System.Threading.Tasks.Task<PowerForm> GetPowerFormAsync(string accountId, string powerFormId);

        /// <summary>
        /// Returns a single PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of ApiResponse (PowerForm)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerForm>> GetPowerFormAsyncWithHttpInfo(string accountId, string powerFormId);
        /// <summary>
        /// Returns the form data associated with the usage of a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of PowerFormsFormDataResponse</returns>
        System.Threading.Tasks.Task<PowerFormsFormDataResponse> GetPowerFormDataAsync(string accountId, string powerFormId, PowerFormsApi.GetPowerFormDataOptions options = null);

        /// <summary>
        /// Returns the form data associated with the usage of a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (PowerFormsFormDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerFormsFormDataResponse>> GetPowerFormDataAsyncWithHttpInfo(string accountId, string powerFormId, PowerFormsApi.GetPowerFormDataOptions options = null);
        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of PowerFormSendersResponse</returns>
        System.Threading.Tasks.Task<PowerFormSendersResponse> ListPowerFormSendersAsync(string accountId, PowerFormsApi.ListPowerFormSendersOptions options = null);

        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (PowerFormSendersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerFormSendersResponse>> ListPowerFormSendersAsyncWithHttpInfo(string accountId, PowerFormsApi.ListPowerFormSendersOptions options = null);
        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of PowerFormsResponse</returns>
        System.Threading.Tasks.Task<PowerFormsResponse> ListPowerFormsAsync(string accountId, PowerFormsApi.ListPowerFormsOptions options = null);

        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (PowerFormsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerFormsResponse>> ListPowerFormsAsyncWithHttpInfo(string accountId, PowerFormsApi.ListPowerFormsOptions options = null);
        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>Task of PowerForm</returns>
        System.Threading.Tasks.Task<PowerForm> UpdatePowerFormAsync(string accountId, string powerFormId, PowerForm powerForm = null);

        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerForm)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerForm>> UpdatePowerFormAsyncWithHttpInfo(string accountId, string powerFormId, PowerForm powerForm = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PowerFormsApi : IPowerFormsApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PowerFormsApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public PowerFormsApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>PowerForm</returns>
        public PowerForm CreatePowerForm(string accountId, PowerForm powerForm = null)
        {
             ApiResponse<PowerForm> localVarResponse = CreatePowerFormWithHttpInfo(accountId, powerForm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>ApiResponse of PowerForm</returns>
        public ApiResponse<PowerForm> CreatePowerFormWithHttpInfo(string accountId, PowerForm powerForm = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->CreatePowerForm");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (powerForm != null && powerForm.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(powerForm); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerForm; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<PowerForm>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerForm)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(PowerForm)));
            }
            else
            {
                return new ApiResponse<PowerForm>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerForm)this.ApiClient.Deserialize(localVarResponse, typeof(PowerForm)));
            }
            
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>Task of PowerForm</returns>
        public async System.Threading.Tasks.Task<PowerForm> CreatePowerFormAsync(string accountId, PowerForm powerForm = null)
        {
             ApiResponse<PowerForm> localVarResponse = await CreatePowerFormAsyncWithHttpInfo(accountId, powerForm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerForm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerForm>> CreatePowerFormAsyncWithHttpInfo(string accountId, PowerForm powerForm = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->CreatePowerForm");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerForm != null && powerForm.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(powerForm); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerForm; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerForm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PowerForm)this.ApiClient.Deserialize(localVarResponse, typeof(PowerForm)));
            
        }



        /// <summary>
        /// Delete a PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns></returns>
        public void DeletePowerForm(string accountId, string powerFormId)
        {
             DeletePowerFormWithHttpInfo(accountId, powerFormId);
        }

        /// <summary>
        /// Delete a PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePowerFormWithHttpInfo(string accountId, string powerFormId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->DeletePowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->DeletePowerForm");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", this.ApiClient.ParameterToString(powerFormId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePowerFormAsync(string accountId, string powerFormId)
        {
             await DeletePowerFormAsyncWithHttpInfo(accountId, powerFormId);
        }

        /// <summary>
        /// Delete a PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePowerFormAsyncWithHttpInfo(string accountId, string powerFormId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->DeletePowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->DeletePowerForm");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", this.ApiClient.ParameterToString(powerFormId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }



        /// <summary>
        /// Deletes one or more PowerForms 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>PowerFormsResponse</returns>
        public PowerFormsResponse DeletePowerForms(string accountId, PowerFormsRequest powerFormsRequest = null)
        {
             ApiResponse<PowerFormsResponse> localVarResponse = DeletePowerFormsWithHttpInfo(accountId, powerFormsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more PowerForms 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>ApiResponse of PowerFormsResponse</returns>
        public ApiResponse<PowerFormsResponse> DeletePowerFormsWithHttpInfo(string accountId, PowerFormsRequest powerFormsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->DeletePowerForms");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (powerFormsRequest != null && powerFormsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(powerFormsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerFormsRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePowerForms", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<PowerFormsResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerFormsResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(PowerFormsResponse)));
            }
            else
            {
                return new ApiResponse<PowerFormsResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerFormsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(PowerFormsResponse)));
            }
            
        }

        /// <summary>
        /// Deletes one or more PowerForms 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>Task of PowerFormsResponse</returns>
        public async System.Threading.Tasks.Task<PowerFormsResponse> DeletePowerFormsAsync(string accountId, PowerFormsRequest powerFormsRequest = null)
        {
             ApiResponse<PowerFormsResponse> localVarResponse = await DeletePowerFormsAsyncWithHttpInfo(accountId, powerFormsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more PowerForms 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerFormsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerFormsResponse>> DeletePowerFormsAsyncWithHttpInfo(string accountId, PowerFormsRequest powerFormsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->DeletePowerForms");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormsRequest != null && powerFormsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(powerFormsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerFormsRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePowerForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerFormsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PowerFormsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(PowerFormsResponse)));
            
        }



        /// <summary>
        /// Returns a single PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>PowerForm</returns>
        public PowerForm GetPowerForm(string accountId, string powerFormId)
        {
             ApiResponse<PowerForm> localVarResponse = GetPowerFormWithHttpInfo(accountId, powerFormId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a single PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>ApiResponse of PowerForm</returns>
        public ApiResponse<PowerForm> GetPowerFormWithHttpInfo(string accountId, string powerFormId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->GetPowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->GetPowerForm");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", this.ApiClient.ParameterToString(powerFormId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<PowerForm>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerForm)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(PowerForm)));
            }
            else
            {
                return new ApiResponse<PowerForm>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerForm)this.ApiClient.Deserialize(localVarResponse, typeof(PowerForm)));
            }
            
        }

        /// <summary>
        /// Returns a single PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of PowerForm</returns>
        public async System.Threading.Tasks.Task<PowerForm> GetPowerFormAsync(string accountId, string powerFormId)
        {
             ApiResponse<PowerForm> localVarResponse = await GetPowerFormAsyncWithHttpInfo(accountId, powerFormId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a single PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of ApiResponse (PowerForm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerForm>> GetPowerFormAsyncWithHttpInfo(string accountId, string powerFormId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->GetPowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->GetPowerForm");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", this.ApiClient.ParameterToString(powerFormId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerForm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PowerForm)this.ApiClient.Deserialize(localVarResponse, typeof(PowerForm)));
            
        }


        /// <summary>
        /// Returns the form data associated with the usage of a PowerForm. 
        /// </summary>
        public class GetPowerFormDataOptions
        {
            /// 
            public string dataLayout {get; set;}
            /// 
            public string fromDate {get; set;}
            /// 
            public string toDate {get; set;}
        }

        /// <summary>
        /// Returns the form data associated with the usage of a PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>PowerFormsFormDataResponse</returns>
        public PowerFormsFormDataResponse GetPowerFormData(string accountId, string powerFormId, PowerFormsApi.GetPowerFormDataOptions options = null)
        {
             ApiResponse<PowerFormsFormDataResponse> localVarResponse = GetPowerFormDataWithHttpInfo(accountId, powerFormId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the form data associated with the usage of a PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of PowerFormsFormDataResponse</returns>
        public ApiResponse<PowerFormsFormDataResponse> GetPowerFormDataWithHttpInfo(string accountId, string powerFormId, PowerFormsApi.GetPowerFormDataOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->GetPowerFormData");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->GetPowerFormData");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms/{powerFormId}/form_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", this.ApiClient.ParameterToString(powerFormId)); // path parameter

            if (options != null)
            {
                if (options.dataLayout != null) localVarQueryParams.Add("data_layout", this.ApiClient.ParameterToString(options.dataLayout)); // query parameter
                if (options.fromDate != null) localVarQueryParams.Add("from_date", this.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", this.ApiClient.ParameterToString(options.toDate)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPowerFormData", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<PowerFormsFormDataResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerFormsFormDataResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(PowerFormsFormDataResponse)));
            }
            else
            {
                return new ApiResponse<PowerFormsFormDataResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerFormsFormDataResponse)this.ApiClient.Deserialize(localVarResponse, typeof(PowerFormsFormDataResponse)));
            }
            
        }

        /// <summary>
        /// Returns the form data associated with the usage of a PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of PowerFormsFormDataResponse</returns>
        public async System.Threading.Tasks.Task<PowerFormsFormDataResponse> GetPowerFormDataAsync(string accountId, string powerFormId, PowerFormsApi.GetPowerFormDataOptions options = null)
        {
             ApiResponse<PowerFormsFormDataResponse> localVarResponse = await GetPowerFormDataAsyncWithHttpInfo(accountId, powerFormId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the form data associated with the usage of a PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (PowerFormsFormDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerFormsFormDataResponse>> GetPowerFormDataAsyncWithHttpInfo(string accountId, string powerFormId, PowerFormsApi.GetPowerFormDataOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->GetPowerFormData");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->GetPowerFormData");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms/{powerFormId}/form_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", this.ApiClient.ParameterToString(powerFormId)); // path parameter
            if (options != null)
            {
                if (options.dataLayout != null) localVarQueryParams.Add("data_layout", this.ApiClient.ParameterToString(options.dataLayout)); // query parameter
                if (options.fromDate != null) localVarQueryParams.Add("from_date", this.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", this.ApiClient.ParameterToString(options.toDate)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPowerFormData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerFormsFormDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PowerFormsFormDataResponse)this.ApiClient.Deserialize(localVarResponse, typeof(PowerFormsFormDataResponse)));
            
        }


        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        public class ListPowerFormSendersOptions
        {
            /// 
            public string startPosition {get; set;}
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>PowerFormSendersResponse</returns>
        public PowerFormSendersResponse ListPowerFormSenders(string accountId, PowerFormsApi.ListPowerFormSendersOptions options = null)
        {
             ApiResponse<PowerFormSendersResponse> localVarResponse = ListPowerFormSendersWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of PowerFormSendersResponse</returns>
        public ApiResponse<PowerFormSendersResponse> ListPowerFormSendersWithHttpInfo(string accountId, PowerFormsApi.ListPowerFormSendersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->ListPowerFormSenders");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPowerFormSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<PowerFormSendersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerFormSendersResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(PowerFormSendersResponse)));
            }
            else
            {
                return new ApiResponse<PowerFormSendersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerFormSendersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(PowerFormSendersResponse)));
            }
            
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of PowerFormSendersResponse</returns>
        public async System.Threading.Tasks.Task<PowerFormSendersResponse> ListPowerFormSendersAsync(string accountId, PowerFormsApi.ListPowerFormSendersOptions options = null)
        {
             ApiResponse<PowerFormSendersResponse> localVarResponse = await ListPowerFormSendersAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (PowerFormSendersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerFormSendersResponse>> ListPowerFormSendersAsyncWithHttpInfo(string accountId, PowerFormsApi.ListPowerFormSendersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->ListPowerFormSenders");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPowerFormSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerFormSendersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PowerFormSendersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(PowerFormSendersResponse)));
            
        }


        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        public class ListPowerFormsOptions
        {
            /// 
            public string fromDate {get; set;}
            /// 
            public string order {get; set;}
            /// 
            public string orderBy {get; set;}
            /// 
            public string searchFields {get; set;}
            /// 
            public string searchText {get; set;}
            /// 
            public string toDate {get; set;}
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>PowerFormsResponse</returns>
        public PowerFormsResponse ListPowerForms(string accountId, PowerFormsApi.ListPowerFormsOptions options = null)
        {
             ApiResponse<PowerFormsResponse> localVarResponse = ListPowerFormsWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of PowerFormsResponse</returns>
        public ApiResponse<PowerFormsResponse> ListPowerFormsWithHttpInfo(string accountId, PowerFormsApi.ListPowerFormsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->ListPowerForms");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.fromDate != null) localVarQueryParams.Add("from_date", this.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.order != null) localVarQueryParams.Add("order", this.ApiClient.ParameterToString(options.order)); // query parameter
                if (options.orderBy != null) localVarQueryParams.Add("order_by", this.ApiClient.ParameterToString(options.orderBy)); // query parameter
                if (options.searchFields != null) localVarQueryParams.Add("search_fields", this.ApiClient.ParameterToString(options.searchFields)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", this.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", this.ApiClient.ParameterToString(options.toDate)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPowerForms", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<PowerFormsResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerFormsResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(PowerFormsResponse)));
            }
            else
            {
                return new ApiResponse<PowerFormsResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerFormsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(PowerFormsResponse)));
            }
            
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of PowerFormsResponse</returns>
        public async System.Threading.Tasks.Task<PowerFormsResponse> ListPowerFormsAsync(string accountId, PowerFormsApi.ListPowerFormsOptions options = null)
        {
             ApiResponse<PowerFormsResponse> localVarResponse = await ListPowerFormsAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (PowerFormsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerFormsResponse>> ListPowerFormsAsyncWithHttpInfo(string accountId, PowerFormsApi.ListPowerFormsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->ListPowerForms");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.fromDate != null) localVarQueryParams.Add("from_date", this.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.order != null) localVarQueryParams.Add("order", this.ApiClient.ParameterToString(options.order)); // query parameter
                if (options.orderBy != null) localVarQueryParams.Add("order_by", this.ApiClient.ParameterToString(options.orderBy)); // query parameter
                if (options.searchFields != null) localVarQueryParams.Add("search_fields", this.ApiClient.ParameterToString(options.searchFields)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", this.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", this.ApiClient.ParameterToString(options.toDate)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPowerForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerFormsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PowerFormsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(PowerFormsResponse)));
            
        }



        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>PowerForm</returns>
        public PowerForm UpdatePowerForm(string accountId, string powerFormId, PowerForm powerForm = null)
        {
             ApiResponse<PowerForm> localVarResponse = UpdatePowerFormWithHttpInfo(accountId, powerFormId, powerForm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>ApiResponse of PowerForm</returns>
        public ApiResponse<PowerForm> UpdatePowerFormWithHttpInfo(string accountId, string powerFormId, PowerForm powerForm = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->UpdatePowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->UpdatePowerForm");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", this.ApiClient.ParameterToString(powerFormId)); // path parameter


            if (powerForm != null && powerForm.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(powerForm); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerForm; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<PowerForm>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerForm)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(PowerForm)));
            }
            else
            {
                return new ApiResponse<PowerForm>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (PowerForm)this.ApiClient.Deserialize(localVarResponse, typeof(PowerForm)));
            }
            
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>Task of PowerForm</returns>
        public async System.Threading.Tasks.Task<PowerForm> UpdatePowerFormAsync(string accountId, string powerFormId, PowerForm powerForm = null)
        {
             ApiResponse<PowerForm> localVarResponse = await UpdatePowerFormAsyncWithHttpInfo(accountId, powerFormId, powerForm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForm"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerForm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerForm>> UpdatePowerFormAsyncWithHttpInfo(string accountId, string powerFormId, PowerForm powerForm = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->UpdatePowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->UpdatePowerForm");

            var localVarPath = "/v2.1/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", this.ApiClient.ParameterToString(powerFormId)); // path parameter
            if (powerForm != null && powerForm.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(powerForm); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerForm; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerForm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PowerForm)this.ApiClient.Deserialize(localVarResponse, typeof(PowerForm)));
            
        }

    }
}