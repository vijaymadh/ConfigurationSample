/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBulkProcessDataSendApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Uses the specified bulk envelopes list to update the envelopes specified in the payload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <param name="bulkProcessRequest"> (optional)</param>
        /// <returns></returns>
        BulkProcessResponse CreateBulkProcessRequestToQueue(string accountId, string processAction, string bulkProcessListId, BulkProcessRequest bulkProcessRequest = null);

        /// <summary>
        /// Uses the specified bulk envelopes list to update the envelopes specified in the payload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <param name="bulkProcessRequest"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<BulkProcessResponse> CreateBulkProcessRequestToQueueWithHttpInfo(string accountId, string processAction, string bulkProcessListId, BulkProcessRequest bulkProcessRequest = null);
        /// <summary>
        /// Deletes a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns></returns>
        BulkProcessResult DeleteBulkProcessList(string accountId, string processAction, string bulkProcessListId);

        /// <summary>
        /// Deletes a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<BulkProcessResult> DeleteBulkProcessListWithHttpInfo(string accountId, string processAction, string bulkProcessListId);
        /// <summary>
        /// Gets a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns></returns>
        void GetBulkProcessList(string accountId, string processAction, string bulkProcessListId);

        /// <summary>
        /// Gets a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetBulkProcessListWithHttpInfo(string accountId, string processAction, string bulkProcessListId);
        /// <summary>
        /// Updates a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns></returns>
        void UpdateBulkProcessList(string accountId, string processAction, string bulkProcessListId);

        /// <summary>
        /// Updates a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBulkProcessListWithHttpInfo(string accountId, string processAction, string bulkProcessListId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Uses the specified bulk envelopes list to update the envelopes specified in the payload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <param name="bulkProcessRequest"> (optional)</param>
        /// <returns>Task of BulkProcessResponse</returns>
        System.Threading.Tasks.Task<BulkProcessResponse> CreateBulkProcessRequestToQueueAsync(string accountId, string processAction, string bulkProcessListId, BulkProcessRequest bulkProcessRequest = null);

        /// <summary>
        /// Uses the specified bulk envelopes list to update the envelopes specified in the payload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <param name="bulkProcessRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (BulkProcessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkProcessResponse>> CreateBulkProcessRequestToQueueAsyncWithHttpInfo(string accountId, string processAction, string bulkProcessListId, BulkProcessRequest bulkProcessRequest = null);
        /// <summary>
        /// Deletes a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of BulkProcessResult</returns>
        System.Threading.Tasks.Task<BulkProcessResult> DeleteBulkProcessListAsync(string accountId, string processAction, string bulkProcessListId);

        /// <summary>
        /// Deletes a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of ApiResponse (BulkProcessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkProcessResult>> DeleteBulkProcessListAsyncWithHttpInfo(string accountId, string processAction, string bulkProcessListId);
        /// <summary>
        /// Gets a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetBulkProcessListAsync(string accountId, string processAction, string bulkProcessListId);

        /// <summary>
        /// Gets a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetBulkProcessListAsyncWithHttpInfo(string accountId, string processAction, string bulkProcessListId);
        /// <summary>
        /// Updates a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBulkProcessListAsync(string accountId, string processAction, string bulkProcessListId);

        /// <summary>
        /// Updates a specific bulk process list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBulkProcessListAsyncWithHttpInfo(string accountId, string processAction, string bulkProcessListId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BulkProcessDataSendApi : IBulkProcessDataSendApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkProcessDataSendApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public BulkProcessDataSendApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Uses the specified bulk envelopes list to update the envelopes specified in the payload 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <param name="bulkProcessRequest"> (optional)</param>
        /// <returns>BulkProcessResponse</returns>
        public BulkProcessResponse CreateBulkProcessRequestToQueue(string accountId, string processAction, string bulkProcessListId, BulkProcessRequest bulkProcessRequest = null)
        {
             ApiResponse<BulkProcessResponse> localVarResponse = CreateBulkProcessRequestToQueueWithHttpInfo(accountId, processAction, bulkProcessListId, bulkProcessRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uses the specified bulk envelopes list to update the envelopes specified in the payload 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <param name="bulkProcessRequest"> (optional)</param>
        /// <returns>ApiResponse of BulkProcessResponse</returns>
        public ApiResponse<BulkProcessResponse> CreateBulkProcessRequestToQueueWithHttpInfo(string accountId, string processAction, string bulkProcessListId, BulkProcessRequest bulkProcessRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkProcessDataSendApi->CreateBulkProcessRequestToQueue");
            // verify the required parameter 'processAction' is set
            if (processAction == null)
                throw new ApiException(400, "Missing required parameter 'processAction' when calling BulkProcessDataSendApi->CreateBulkProcessRequestToQueue");
            // verify the required parameter 'bulkProcessListId' is set
            if (bulkProcessListId == null)
                throw new ApiException(400, "Missing required parameter 'bulkProcessListId' when calling BulkProcessDataSendApi->CreateBulkProcessRequestToQueue");

            var localVarPath = "/v2.1/accounts/{accountId}/bulk_process_data/actions/{processAction}/{bulkProcessListId}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (processAction != null) localVarPathParams.Add("processAction", this.ApiClient.ParameterToString(processAction)); // path parameter
            if (bulkProcessListId != null) localVarPathParams.Add("bulkProcessListId", this.ApiClient.ParameterToString(bulkProcessListId)); // path parameter


            if (bulkProcessRequest != null && bulkProcessRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(bulkProcessRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bulkProcessRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkProcessRequestToQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<BulkProcessResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (BulkProcessResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(BulkProcessResponse)));
            }
            else
            {
                return new ApiResponse<BulkProcessResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (BulkProcessResponse)this.ApiClient.Deserialize(localVarResponse, typeof(BulkProcessResponse)));
            }
            
        }

        /// <summary>
        /// Uses the specified bulk envelopes list to update the envelopes specified in the payload 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <param name="bulkProcessRequest"> (optional)</param>
        /// <returns>Task of BulkProcessResponse</returns>
        public async System.Threading.Tasks.Task<BulkProcessResponse> CreateBulkProcessRequestToQueueAsync(string accountId, string processAction, string bulkProcessListId, BulkProcessRequest bulkProcessRequest = null)
        {
             ApiResponse<BulkProcessResponse> localVarResponse = await CreateBulkProcessRequestToQueueAsyncWithHttpInfo(accountId, processAction, bulkProcessListId, bulkProcessRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uses the specified bulk envelopes list to update the envelopes specified in the payload 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <param name="bulkProcessRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (BulkProcessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkProcessResponse>> CreateBulkProcessRequestToQueueAsyncWithHttpInfo(string accountId, string processAction, string bulkProcessListId, BulkProcessRequest bulkProcessRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkProcessDataSendApi->CreateBulkProcessRequestToQueue");
            // verify the required parameter 'processAction' is set
            if (processAction == null)
                throw new ApiException(400, "Missing required parameter 'processAction' when calling BulkProcessDataSendApi->CreateBulkProcessRequestToQueue");
            // verify the required parameter 'bulkProcessListId' is set
            if (bulkProcessListId == null)
                throw new ApiException(400, "Missing required parameter 'bulkProcessListId' when calling BulkProcessDataSendApi->CreateBulkProcessRequestToQueue");

            var localVarPath = "/v2.1/accounts/{accountId}/bulk_process_data/actions/{processAction}/{bulkProcessListId}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (processAction != null) localVarPathParams.Add("processAction", this.ApiClient.ParameterToString(processAction)); // path parameter
            if (bulkProcessListId != null) localVarPathParams.Add("bulkProcessListId", this.ApiClient.ParameterToString(bulkProcessListId)); // path parameter
            if (bulkProcessRequest != null && bulkProcessRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(bulkProcessRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bulkProcessRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkProcessRequestToQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkProcessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BulkProcessResponse)this.ApiClient.Deserialize(localVarResponse, typeof(BulkProcessResponse)));
            
        }



        /// <summary>
        /// Deletes a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>BulkProcessResult</returns>
        public BulkProcessResult DeleteBulkProcessList(string accountId, string processAction, string bulkProcessListId)
        {
             ApiResponse<BulkProcessResult> localVarResponse = DeleteBulkProcessListWithHttpInfo(accountId, processAction, bulkProcessListId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>ApiResponse of BulkProcessResult</returns>
        public ApiResponse<BulkProcessResult> DeleteBulkProcessListWithHttpInfo(string accountId, string processAction, string bulkProcessListId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkProcessDataSendApi->DeleteBulkProcessList");
            // verify the required parameter 'processAction' is set
            if (processAction == null)
                throw new ApiException(400, "Missing required parameter 'processAction' when calling BulkProcessDataSendApi->DeleteBulkProcessList");
            // verify the required parameter 'bulkProcessListId' is set
            if (bulkProcessListId == null)
                throw new ApiException(400, "Missing required parameter 'bulkProcessListId' when calling BulkProcessDataSendApi->DeleteBulkProcessList");

            var localVarPath = "/v2.1/accounts/{accountId}/bulk_process_data/actions/{processAction}/{bulkProcessListId}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (processAction != null) localVarPathParams.Add("processAction", this.ApiClient.ParameterToString(processAction)); // path parameter
            if (bulkProcessListId != null) localVarPathParams.Add("bulkProcessListId", this.ApiClient.ParameterToString(bulkProcessListId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBulkProcessList", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<BulkProcessResult>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (BulkProcessResult)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(BulkProcessResult)));
            }
            else
            {
                return new ApiResponse<BulkProcessResult>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (BulkProcessResult)this.ApiClient.Deserialize(localVarResponse, typeof(BulkProcessResult)));
            }
            
        }

        /// <summary>
        /// Deletes a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of BulkProcessResult</returns>
        public async System.Threading.Tasks.Task<BulkProcessResult> DeleteBulkProcessListAsync(string accountId, string processAction, string bulkProcessListId)
        {
             ApiResponse<BulkProcessResult> localVarResponse = await DeleteBulkProcessListAsyncWithHttpInfo(accountId, processAction, bulkProcessListId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of ApiResponse (BulkProcessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkProcessResult>> DeleteBulkProcessListAsyncWithHttpInfo(string accountId, string processAction, string bulkProcessListId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkProcessDataSendApi->DeleteBulkProcessList");
            // verify the required parameter 'processAction' is set
            if (processAction == null)
                throw new ApiException(400, "Missing required parameter 'processAction' when calling BulkProcessDataSendApi->DeleteBulkProcessList");
            // verify the required parameter 'bulkProcessListId' is set
            if (bulkProcessListId == null)
                throw new ApiException(400, "Missing required parameter 'bulkProcessListId' when calling BulkProcessDataSendApi->DeleteBulkProcessList");

            var localVarPath = "/v2.1/accounts/{accountId}/bulk_process_data/actions/{processAction}/{bulkProcessListId}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (processAction != null) localVarPathParams.Add("processAction", this.ApiClient.ParameterToString(processAction)); // path parameter
            if (bulkProcessListId != null) localVarPathParams.Add("bulkProcessListId", this.ApiClient.ParameterToString(bulkProcessListId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBulkProcessList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkProcessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BulkProcessResult)this.ApiClient.Deserialize(localVarResponse, typeof(BulkProcessResult)));
            
        }



        /// <summary>
        /// Gets a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns></returns>
        public void GetBulkProcessList(string accountId, string processAction, string bulkProcessListId)
        {
             GetBulkProcessListWithHttpInfo(accountId, processAction, bulkProcessListId);
        }

        /// <summary>
        /// Gets a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetBulkProcessListWithHttpInfo(string accountId, string processAction, string bulkProcessListId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkProcessDataSendApi->GetBulkProcessList");
            // verify the required parameter 'processAction' is set
            if (processAction == null)
                throw new ApiException(400, "Missing required parameter 'processAction' when calling BulkProcessDataSendApi->GetBulkProcessList");
            // verify the required parameter 'bulkProcessListId' is set
            if (bulkProcessListId == null)
                throw new ApiException(400, "Missing required parameter 'bulkProcessListId' when calling BulkProcessDataSendApi->GetBulkProcessList");

            var localVarPath = "/v2.1/accounts/{accountId}/bulk_process_data/actions/{processAction}/{bulkProcessListId}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (processAction != null) localVarPathParams.Add("processAction", this.ApiClient.ParameterToString(processAction)); // path parameter
            if (bulkProcessListId != null) localVarPathParams.Add("bulkProcessListId", this.ApiClient.ParameterToString(bulkProcessListId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkProcessList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetBulkProcessListAsync(string accountId, string processAction, string bulkProcessListId)
        {
             await GetBulkProcessListAsyncWithHttpInfo(accountId, processAction, bulkProcessListId);
        }

        /// <summary>
        /// Gets a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetBulkProcessListAsyncWithHttpInfo(string accountId, string processAction, string bulkProcessListId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkProcessDataSendApi->GetBulkProcessList");
            // verify the required parameter 'processAction' is set
            if (processAction == null)
                throw new ApiException(400, "Missing required parameter 'processAction' when calling BulkProcessDataSendApi->GetBulkProcessList");
            // verify the required parameter 'bulkProcessListId' is set
            if (bulkProcessListId == null)
                throw new ApiException(400, "Missing required parameter 'bulkProcessListId' when calling BulkProcessDataSendApi->GetBulkProcessList");

            var localVarPath = "/v2.1/accounts/{accountId}/bulk_process_data/actions/{processAction}/{bulkProcessListId}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (processAction != null) localVarPathParams.Add("processAction", this.ApiClient.ParameterToString(processAction)); // path parameter
            if (bulkProcessListId != null) localVarPathParams.Add("bulkProcessListId", this.ApiClient.ParameterToString(bulkProcessListId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkProcessList", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }



        /// <summary>
        /// Updates a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns></returns>
        public void UpdateBulkProcessList(string accountId, string processAction, string bulkProcessListId)
        {
             UpdateBulkProcessListWithHttpInfo(accountId, processAction, bulkProcessListId);
        }

        /// <summary>
        /// Updates a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateBulkProcessListWithHttpInfo(string accountId, string processAction, string bulkProcessListId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkProcessDataSendApi->UpdateBulkProcessList");
            // verify the required parameter 'processAction' is set
            if (processAction == null)
                throw new ApiException(400, "Missing required parameter 'processAction' when calling BulkProcessDataSendApi->UpdateBulkProcessList");
            // verify the required parameter 'bulkProcessListId' is set
            if (bulkProcessListId == null)
                throw new ApiException(400, "Missing required parameter 'bulkProcessListId' when calling BulkProcessDataSendApi->UpdateBulkProcessList");

            var localVarPath = "/v2.1/accounts/{accountId}/bulk_process_data/actions/{processAction}/{bulkProcessListId}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (processAction != null) localVarPathParams.Add("processAction", this.ApiClient.ParameterToString(processAction)); // path parameter
            if (bulkProcessListId != null) localVarPathParams.Add("bulkProcessListId", this.ApiClient.ParameterToString(bulkProcessListId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBulkProcessList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBulkProcessListAsync(string accountId, string processAction, string bulkProcessListId)
        {
             await UpdateBulkProcessListAsyncWithHttpInfo(accountId, processAction, bulkProcessListId);
        }

        /// <summary>
        /// Updates a specific bulk process list 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="processAction"></param>
        /// <param name="bulkProcessListId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBulkProcessListAsyncWithHttpInfo(string accountId, string processAction, string bulkProcessListId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkProcessDataSendApi->UpdateBulkProcessList");
            // verify the required parameter 'processAction' is set
            if (processAction == null)
                throw new ApiException(400, "Missing required parameter 'processAction' when calling BulkProcessDataSendApi->UpdateBulkProcessList");
            // verify the required parameter 'bulkProcessListId' is set
            if (bulkProcessListId == null)
                throw new ApiException(400, "Missing required parameter 'bulkProcessListId' when calling BulkProcessDataSendApi->UpdateBulkProcessList");

            var localVarPath = "/v2.1/accounts/{accountId}/bulk_process_data/actions/{processAction}/{bulkProcessListId}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (processAction != null) localVarPathParams.Add("processAction", this.ApiClient.ParameterToString(processAction)); // path parameter
            if (bulkProcessListId != null) localVarPathParams.Add("bulkProcessListId", this.ApiClient.ParameterToString(bulkProcessListId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBulkProcessList", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}