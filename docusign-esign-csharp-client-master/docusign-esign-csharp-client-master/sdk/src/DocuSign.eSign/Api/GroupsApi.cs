/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates one or more groups for the account.
        /// </summary>
        /// <remarks>
        /// Creates one or more groups for the account.  Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the &#x60;userSettings&#x60; property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns></returns>
        GroupInformation CreateGroups(string accountId, GroupInformation groupInformation = null);

        /// <summary>
        /// Creates one or more groups for the account.
        /// </summary>
        /// <remarks>
        /// Creates one or more groups for the account.  Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the &#x60;userSettings&#x60; property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<GroupInformation> CreateGroupsWithHttpInfo(string accountId, GroupInformation groupInformation = null);
        /// <summary>
        /// Deletes brand information from the requested group.
        /// </summary>
        /// <remarks>
        /// Deletes brand information from the requested group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns></returns>
        GroupBrands DeleteBrands(string accountId, string groupId, BrandsRequest brandsRequest = null);

        /// <summary>
        /// Deletes brand information from the requested group.
        /// </summary>
        /// <remarks>
        /// Deletes brand information from the requested group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<GroupBrands> DeleteBrandsWithHttpInfo(string accountId, string groupId, BrandsRequest brandsRequest = null);
        /// <summary>
        /// Deletes one or more users from a gro
        /// </summary>
        /// <remarks>
        /// Deletes one or more users from a group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns></returns>
        UsersResponse DeleteGroupUsers(string accountId, string groupId, UserInfoList userInfoList = null);

        /// <summary>
        /// Deletes one or more users from a gro
        /// </summary>
        /// <remarks>
        /// Deletes one or more users from a group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UsersResponse> DeleteGroupUsersWithHttpInfo(string accountId, string groupId, UserInfoList userInfoList = null);
        /// <summary>
        /// Deletes an existing user group.
        /// </summary>
        /// <remarks>
        /// Deletes an existing user group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns></returns>
        GroupInformation DeleteGroups(string accountId, GroupInformation groupInformation = null);

        /// <summary>
        /// Deletes an existing user group.
        /// </summary>
        /// <remarks>
        /// Deletes an existing user group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<GroupInformation> DeleteGroupsWithHttpInfo(string accountId, GroupInformation groupInformation = null);
        /// <summary>
        /// Gets group brand ID Information. 
        /// </summary>
        /// <remarks>
        /// Retrieves information about the brands associated with the requested group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <returns></returns>
        GroupBrands GetBrands(string accountId, string groupId);

        /// <summary>
        /// Gets group brand ID Information. 
        /// </summary>
        /// <remarks>
        /// Retrieves information about the brands associated with the requested group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<GroupBrands> GetBrandsWithHttpInfo(string accountId, string groupId);
        /// <summary>
        /// Gets a list of users in a group.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users in a group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        UsersResponse ListGroupUsers(string accountId, string groupId, GroupsApi.ListGroupUsersOptions options = null);

        /// <summary>
        /// Gets a list of users in a group.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users in a group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UsersResponse> ListGroupUsersWithHttpInfo(string accountId, string groupId, GroupsApi.ListGroupUsersOptions options = null);
        /// <summary>
        /// Gets information about groups associated with the account.
        /// </summary>
        /// <remarks>
        /// Retrieves information about groups associated with the account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        GroupInformation ListGroups(string accountId, GroupsApi.ListGroupsOptions options = null);

        /// <summary>
        /// Gets information about groups associated with the account.
        /// </summary>
        /// <remarks>
        /// Retrieves information about groups associated with the account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<GroupInformation> ListGroupsWithHttpInfo(string accountId, GroupsApi.ListGroupsOptions options = null);
        /// <summary>
        /// Adds group brand ID information to a group.
        /// </summary>
        /// <remarks>
        /// Adds group brand ID information to a group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns></returns>
        GroupBrands UpdateBrands(string accountId, string groupId, BrandsRequest brandsRequest = null);

        /// <summary>
        /// Adds group brand ID information to a group.
        /// </summary>
        /// <remarks>
        /// Adds group brand ID information to a group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<GroupBrands> UpdateBrandsWithHttpInfo(string accountId, string groupId, BrandsRequest brandsRequest = null);
        /// <summary>
        /// Adds one or more users to an existing group.
        /// </summary>
        /// <remarks>
        /// Adds one or more users to an existing group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns></returns>
        UsersResponse UpdateGroupUsers(string accountId, string groupId, UserInfoList userInfoList = null);

        /// <summary>
        /// Adds one or more users to an existing group.
        /// </summary>
        /// <remarks>
        /// Adds one or more users to an existing group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UsersResponse> UpdateGroupUsersWithHttpInfo(string accountId, string groupId, UserInfoList userInfoList = null);
        /// <summary>
        /// Updates the group information for a group.
        /// </summary>
        /// <remarks>
        /// Updates the group name and modifies, or sets, the permission profile for the group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns></returns>
        GroupInformation UpdateGroups(string accountId, GroupInformation groupInformation = null);

        /// <summary>
        /// Updates the group information for a group.
        /// </summary>
        /// <remarks>
        /// Updates the group name and modifies, or sets, the permission profile for the group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<GroupInformation> UpdateGroupsWithHttpInfo(string accountId, GroupInformation groupInformation = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates one or more groups for the account.
        /// </summary>
        /// <remarks>
        /// Creates one or more groups for the account.  Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the &#x60;userSettings&#x60; property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of GroupInformation</returns>
        System.Threading.Tasks.Task<GroupInformation> CreateGroupsAsync(string accountId, GroupInformation groupInformation = null);

        /// <summary>
        /// Creates one or more groups for the account.
        /// </summary>
        /// <remarks>
        /// Creates one or more groups for the account.  Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the &#x60;userSettings&#x60; property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInformation>> CreateGroupsAsyncWithHttpInfo(string accountId, GroupInformation groupInformation = null);
        /// <summary>
        /// Deletes brand information from the requested group.
        /// </summary>
        /// <remarks>
        /// Deletes brand information from the requested group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of GroupBrands</returns>
        System.Threading.Tasks.Task<GroupBrands> DeleteBrandsAsync(string accountId, string groupId, BrandsRequest brandsRequest = null);

        /// <summary>
        /// Deletes brand information from the requested group.
        /// </summary>
        /// <remarks>
        /// Deletes brand information from the requested group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupBrands)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrands>> DeleteBrandsAsyncWithHttpInfo(string accountId, string groupId, BrandsRequest brandsRequest = null);
        /// <summary>
        /// Deletes one or more users from a gro
        /// </summary>
        /// <remarks>
        /// Deletes one or more users from a group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        System.Threading.Tasks.Task<UsersResponse> DeleteGroupUsersAsync(string accountId, string groupId, UserInfoList userInfoList = null);

        /// <summary>
        /// Deletes one or more users from a gro
        /// </summary>
        /// <remarks>
        /// Deletes one or more users from a group. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponse>> DeleteGroupUsersAsyncWithHttpInfo(string accountId, string groupId, UserInfoList userInfoList = null);
        /// <summary>
        /// Deletes an existing user group.
        /// </summary>
        /// <remarks>
        /// Deletes an existing user group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of GroupInformation</returns>
        System.Threading.Tasks.Task<GroupInformation> DeleteGroupsAsync(string accountId, GroupInformation groupInformation = null);

        /// <summary>
        /// Deletes an existing user group.
        /// </summary>
        /// <remarks>
        /// Deletes an existing user group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInformation>> DeleteGroupsAsyncWithHttpInfo(string accountId, GroupInformation groupInformation = null);
        /// <summary>
        /// Gets group brand ID Information. 
        /// </summary>
        /// <remarks>
        /// Retrieves information about the brands associated with the requested group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <returns>Task of GroupBrands</returns>
        System.Threading.Tasks.Task<GroupBrands> GetBrandsAsync(string accountId, string groupId);

        /// <summary>
        /// Gets group brand ID Information. 
        /// </summary>
        /// <remarks>
        /// Retrieves information about the brands associated with the requested group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <returns>Task of ApiResponse (GroupBrands)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrands>> GetBrandsAsyncWithHttpInfo(string accountId, string groupId);
        /// <summary>
        /// Gets a list of users in a group.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users in a group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of UsersResponse</returns>
        System.Threading.Tasks.Task<UsersResponse> ListGroupUsersAsync(string accountId, string groupId, GroupsApi.ListGroupUsersOptions options = null);

        /// <summary>
        /// Gets a list of users in a group.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users in a group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponse>> ListGroupUsersAsyncWithHttpInfo(string accountId, string groupId, GroupsApi.ListGroupUsersOptions options = null);
        /// <summary>
        /// Gets information about groups associated with the account.
        /// </summary>
        /// <remarks>
        /// Retrieves information about groups associated with the account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of GroupInformation</returns>
        System.Threading.Tasks.Task<GroupInformation> ListGroupsAsync(string accountId, GroupsApi.ListGroupsOptions options = null);

        /// <summary>
        /// Gets information about groups associated with the account.
        /// </summary>
        /// <remarks>
        /// Retrieves information about groups associated with the account.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInformation>> ListGroupsAsyncWithHttpInfo(string accountId, GroupsApi.ListGroupsOptions options = null);
        /// <summary>
        /// Adds group brand ID information to a group.
        /// </summary>
        /// <remarks>
        /// Adds group brand ID information to a group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of GroupBrands</returns>
        System.Threading.Tasks.Task<GroupBrands> UpdateBrandsAsync(string accountId, string groupId, BrandsRequest brandsRequest = null);

        /// <summary>
        /// Adds group brand ID information to a group.
        /// </summary>
        /// <remarks>
        /// Adds group brand ID information to a group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupBrands)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrands>> UpdateBrandsAsyncWithHttpInfo(string accountId, string groupId, BrandsRequest brandsRequest = null);
        /// <summary>
        /// Adds one or more users to an existing group.
        /// </summary>
        /// <remarks>
        /// Adds one or more users to an existing group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        System.Threading.Tasks.Task<UsersResponse> UpdateGroupUsersAsync(string accountId, string groupId, UserInfoList userInfoList = null);

        /// <summary>
        /// Adds one or more users to an existing group.
        /// </summary>
        /// <remarks>
        /// Adds one or more users to an existing group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponse>> UpdateGroupUsersAsyncWithHttpInfo(string accountId, string groupId, UserInfoList userInfoList = null);
        /// <summary>
        /// Updates the group information for a group.
        /// </summary>
        /// <remarks>
        /// Updates the group name and modifies, or sets, the permission profile for the group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of GroupInformation</returns>
        System.Threading.Tasks.Task<GroupInformation> UpdateGroupsAsync(string accountId, GroupInformation groupInformation = null);

        /// <summary>
        /// Updates the group information for a group.
        /// </summary>
        /// <remarks>
        /// Updates the group name and modifies, or sets, the permission profile for the group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInformation>> UpdateGroupsAsyncWithHttpInfo(string accountId, GroupInformation groupInformation = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public GroupsApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Creates one or more groups for the account. Creates one or more groups for the account.  Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the &#x60;userSettings&#x60; property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>GroupInformation</returns>
        public GroupInformation CreateGroups(string accountId, GroupInformation groupInformation = null)
        {
             ApiResponse<GroupInformation> localVarResponse = CreateGroupsWithHttpInfo(accountId, groupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more groups for the account. Creates one or more groups for the account.  Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the &#x60;userSettings&#x60; property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>ApiResponse of GroupInformation</returns>
        public ApiResponse<GroupInformation> CreateGroupsWithHttpInfo(string accountId, GroupInformation groupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->CreateGroups");

            var localVarPath = "/v2.1/accounts/{accountId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (groupInformation != null && groupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(groupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<GroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupInformation)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(GroupInformation)));
            }
            else
            {
                return new ApiResponse<GroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
            }
            
        }

        /// <summary>
        /// Creates one or more groups for the account. Creates one or more groups for the account.  Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the &#x60;userSettings&#x60; property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of GroupInformation</returns>
        public async System.Threading.Tasks.Task<GroupInformation> CreateGroupsAsync(string accountId, GroupInformation groupInformation = null)
        {
             ApiResponse<GroupInformation> localVarResponse = await CreateGroupsAsyncWithHttpInfo(accountId, groupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more groups for the account. Creates one or more groups for the account.  Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the &#x60;userSettings&#x60; property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInformation>> CreateGroupsAsyncWithHttpInfo(string accountId, GroupInformation groupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->CreateGroups");

            var localVarPath = "/v2.1/accounts/{accountId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupInformation != null && groupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(groupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
            
        }



        /// <summary>
        /// Deletes brand information from the requested group. Deletes brand information from the requested group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>GroupBrands</returns>
        public GroupBrands DeleteBrands(string accountId, string groupId, BrandsRequest brandsRequest = null)
        {
             ApiResponse<GroupBrands> localVarResponse = DeleteBrandsWithHttpInfo(accountId, groupId, brandsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes brand information from the requested group. Deletes brand information from the requested group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>ApiResponse of GroupBrands</returns>
        public ApiResponse<GroupBrands> DeleteBrandsWithHttpInfo(string accountId, string groupId, BrandsRequest brandsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->DeleteBrands");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteBrands");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter


            if (brandsRequest != null && brandsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(brandsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brandsRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<GroupBrands>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupBrands)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(GroupBrands)));
            }
            else
            {
                return new ApiResponse<GroupBrands>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupBrands)this.ApiClient.Deserialize(localVarResponse, typeof(GroupBrands)));
            }
            
        }

        /// <summary>
        /// Deletes brand information from the requested group. Deletes brand information from the requested group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of GroupBrands</returns>
        public async System.Threading.Tasks.Task<GroupBrands> DeleteBrandsAsync(string accountId, string groupId, BrandsRequest brandsRequest = null)
        {
             ApiResponse<GroupBrands> localVarResponse = await DeleteBrandsAsyncWithHttpInfo(accountId, groupId, brandsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes brand information from the requested group. Deletes brand information from the requested group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupBrands)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupBrands>> DeleteBrandsAsyncWithHttpInfo(string accountId, string groupId, BrandsRequest brandsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->DeleteBrands");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteBrands");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter
            if (brandsRequest != null && brandsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(brandsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brandsRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrands>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GroupBrands)this.ApiClient.Deserialize(localVarResponse, typeof(GroupBrands)));
            
        }



        /// <summary>
        /// Deletes one or more users from a gro Deletes one or more users from a group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>UsersResponse</returns>
        public UsersResponse DeleteGroupUsers(string accountId, string groupId, UserInfoList userInfoList = null)
        {
             ApiResponse<UsersResponse> localVarResponse = DeleteGroupUsersWithHttpInfo(accountId, groupId, userInfoList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more users from a gro Deletes one or more users from a group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        public ApiResponse<UsersResponse> DeleteGroupUsersWithHttpInfo(string accountId, string groupId, UserInfoList userInfoList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->DeleteGroupUsers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupUsers");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter


            if (userInfoList != null && userInfoList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(userInfoList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInfoList; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<UsersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (UsersResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(UsersResponse)));
            }
            else
            {
                return new ApiResponse<UsersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (UsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
            }
            
        }

        /// <summary>
        /// Deletes one or more users from a gro Deletes one or more users from a group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        public async System.Threading.Tasks.Task<UsersResponse> DeleteGroupUsersAsync(string accountId, string groupId, UserInfoList userInfoList = null)
        {
             ApiResponse<UsersResponse> localVarResponse = await DeleteGroupUsersAsyncWithHttpInfo(accountId, groupId, userInfoList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more users from a gro Deletes one or more users from a group. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersResponse>> DeleteGroupUsersAsyncWithHttpInfo(string accountId, string groupId, UserInfoList userInfoList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->DeleteGroupUsers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupUsers");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter
            if (userInfoList != null && userInfoList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(userInfoList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInfoList; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
            
        }



        /// <summary>
        /// Deletes an existing user group. Deletes an existing user group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>GroupInformation</returns>
        public GroupInformation DeleteGroups(string accountId, GroupInformation groupInformation = null)
        {
             ApiResponse<GroupInformation> localVarResponse = DeleteGroupsWithHttpInfo(accountId, groupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing user group. Deletes an existing user group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>ApiResponse of GroupInformation</returns>
        public ApiResponse<GroupInformation> DeleteGroupsWithHttpInfo(string accountId, GroupInformation groupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->DeleteGroups");

            var localVarPath = "/v2.1/accounts/{accountId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (groupInformation != null && groupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(groupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<GroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupInformation)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(GroupInformation)));
            }
            else
            {
                return new ApiResponse<GroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
            }
            
        }

        /// <summary>
        /// Deletes an existing user group. Deletes an existing user group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of GroupInformation</returns>
        public async System.Threading.Tasks.Task<GroupInformation> DeleteGroupsAsync(string accountId, GroupInformation groupInformation = null)
        {
             ApiResponse<GroupInformation> localVarResponse = await DeleteGroupsAsyncWithHttpInfo(accountId, groupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing user group. Deletes an existing user group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInformation>> DeleteGroupsAsyncWithHttpInfo(string accountId, GroupInformation groupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->DeleteGroups");

            var localVarPath = "/v2.1/accounts/{accountId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupInformation != null && groupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(groupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
            
        }



        /// <summary>
        /// Gets group brand ID Information.  Retrieves information about the brands associated with the requested group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <returns>GroupBrands</returns>
        public GroupBrands GetBrands(string accountId, string groupId)
        {
             ApiResponse<GroupBrands> localVarResponse = GetBrandsWithHttpInfo(accountId, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets group brand ID Information.  Retrieves information about the brands associated with the requested group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <returns>ApiResponse of GroupBrands</returns>
        public ApiResponse<GroupBrands> GetBrandsWithHttpInfo(string accountId, string groupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->GetBrands");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetBrands");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<GroupBrands>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupBrands)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(GroupBrands)));
            }
            else
            {
                return new ApiResponse<GroupBrands>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupBrands)this.ApiClient.Deserialize(localVarResponse, typeof(GroupBrands)));
            }
            
        }

        /// <summary>
        /// Gets group brand ID Information.  Retrieves information about the brands associated with the requested group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <returns>Task of GroupBrands</returns>
        public async System.Threading.Tasks.Task<GroupBrands> GetBrandsAsync(string accountId, string groupId)
        {
             ApiResponse<GroupBrands> localVarResponse = await GetBrandsAsyncWithHttpInfo(accountId, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets group brand ID Information.  Retrieves information about the brands associated with the requested group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <returns>Task of ApiResponse (GroupBrands)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupBrands>> GetBrandsAsyncWithHttpInfo(string accountId, string groupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->GetBrands");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetBrands");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrands>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GroupBrands)this.ApiClient.Deserialize(localVarResponse, typeof(GroupBrands)));
            
        }


        /// <summary>
        /// Gets a list of users in a group. Retrieves a list of users in a group.
        /// </summary>
        public class ListGroupUsersOptions
        {
            /// Number of records to return. The number must be greater than 1 and less than or equal to 100.  
            public string count {get; set;}
            /// Starting value for the list. 
            public string startPosition {get; set;}
        }

        /// <summary>
        /// Gets a list of users in a group. Retrieves a list of users in a group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>UsersResponse</returns>
        public UsersResponse ListGroupUsers(string accountId, string groupId, GroupsApi.ListGroupUsersOptions options = null)
        {
             ApiResponse<UsersResponse> localVarResponse = ListGroupUsersWithHttpInfo(accountId, groupId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of users in a group. Retrieves a list of users in a group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        public ApiResponse<UsersResponse> ListGroupUsersWithHttpInfo(string accountId, string groupId, GroupsApi.ListGroupUsersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->ListGroupUsers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->ListGroupUsers");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<UsersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (UsersResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(UsersResponse)));
            }
            else
            {
                return new ApiResponse<UsersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (UsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
            }
            
        }

        /// <summary>
        /// Gets a list of users in a group. Retrieves a list of users in a group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of UsersResponse</returns>
        public async System.Threading.Tasks.Task<UsersResponse> ListGroupUsersAsync(string accountId, string groupId, GroupsApi.ListGroupUsersOptions options = null)
        {
             ApiResponse<UsersResponse> localVarResponse = await ListGroupUsersAsyncWithHttpInfo(accountId, groupId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of users in a group. Retrieves a list of users in a group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersResponse>> ListGroupUsersAsyncWithHttpInfo(string accountId, string groupId, GroupsApi.ListGroupUsersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->ListGroupUsers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->ListGroupUsers");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
            
        }


        /// <summary>
        /// Gets information about groups associated with the account. Retrieves information about groups associated with the account.
        /// </summary>
        public class ListGroupsOptions
        {
            /// Number of records to return. The number must be greater than 1 and less than or equal to 100. 
            public string count {get; set;}
            /// 
            public string groupType {get; set;}
            /// 
            public string includeUsercount {get; set;}
            /// 
            public string searchText {get; set;}
            /// Starting value for the list. 
            public string startPosition {get; set;}
        }

        /// <summary>
        /// Gets information about groups associated with the account. Retrieves information about groups associated with the account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>GroupInformation</returns>
        public GroupInformation ListGroups(string accountId, GroupsApi.ListGroupsOptions options = null)
        {
             ApiResponse<GroupInformation> localVarResponse = ListGroupsWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about groups associated with the account. Retrieves information about groups associated with the account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of GroupInformation</returns>
        public ApiResponse<GroupInformation> ListGroupsWithHttpInfo(string accountId, GroupsApi.ListGroupsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->ListGroups");

            var localVarPath = "/v2.1/accounts/{accountId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.groupType != null) localVarQueryParams.Add("group_type", this.ApiClient.ParameterToString(options.groupType)); // query parameter
                if (options.includeUsercount != null) localVarQueryParams.Add("include_usercount", this.ApiClient.ParameterToString(options.includeUsercount)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", this.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<GroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupInformation)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(GroupInformation)));
            }
            else
            {
                return new ApiResponse<GroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
            }
            
        }

        /// <summary>
        /// Gets information about groups associated with the account. Retrieves information about groups associated with the account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of GroupInformation</returns>
        public async System.Threading.Tasks.Task<GroupInformation> ListGroupsAsync(string accountId, GroupsApi.ListGroupsOptions options = null)
        {
             ApiResponse<GroupInformation> localVarResponse = await ListGroupsAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about groups associated with the account. Retrieves information about groups associated with the account.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInformation>> ListGroupsAsyncWithHttpInfo(string accountId, GroupsApi.ListGroupsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->ListGroups");

            var localVarPath = "/v2.1/accounts/{accountId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.groupType != null) localVarQueryParams.Add("group_type", this.ApiClient.ParameterToString(options.groupType)); // query parameter
                if (options.includeUsercount != null) localVarQueryParams.Add("include_usercount", this.ApiClient.ParameterToString(options.includeUsercount)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", this.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
            
        }



        /// <summary>
        /// Adds group brand ID information to a group. Adds group brand ID information to a group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>GroupBrands</returns>
        public GroupBrands UpdateBrands(string accountId, string groupId, BrandsRequest brandsRequest = null)
        {
             ApiResponse<GroupBrands> localVarResponse = UpdateBrandsWithHttpInfo(accountId, groupId, brandsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds group brand ID information to a group. Adds group brand ID information to a group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>ApiResponse of GroupBrands</returns>
        public ApiResponse<GroupBrands> UpdateBrandsWithHttpInfo(string accountId, string groupId, BrandsRequest brandsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->UpdateBrands");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateBrands");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter


            if (brandsRequest != null && brandsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(brandsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brandsRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<GroupBrands>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupBrands)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(GroupBrands)));
            }
            else
            {
                return new ApiResponse<GroupBrands>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupBrands)this.ApiClient.Deserialize(localVarResponse, typeof(GroupBrands)));
            }
            
        }

        /// <summary>
        /// Adds group brand ID information to a group. Adds group brand ID information to a group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of GroupBrands</returns>
        public async System.Threading.Tasks.Task<GroupBrands> UpdateBrandsAsync(string accountId, string groupId, BrandsRequest brandsRequest = null)
        {
             ApiResponse<GroupBrands> localVarResponse = await UpdateBrandsAsyncWithHttpInfo(accountId, groupId, brandsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds group brand ID information to a group. Adds group brand ID information to a group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupBrands)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupBrands>> UpdateBrandsAsyncWithHttpInfo(string accountId, string groupId, BrandsRequest brandsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->UpdateBrands");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateBrands");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter
            if (brandsRequest != null && brandsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(brandsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brandsRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrands>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GroupBrands)this.ApiClient.Deserialize(localVarResponse, typeof(GroupBrands)));
            
        }



        /// <summary>
        /// Adds one or more users to an existing group. Adds one or more users to an existing group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>UsersResponse</returns>
        public UsersResponse UpdateGroupUsers(string accountId, string groupId, UserInfoList userInfoList = null)
        {
             ApiResponse<UsersResponse> localVarResponse = UpdateGroupUsersWithHttpInfo(accountId, groupId, userInfoList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds one or more users to an existing group. Adds one or more users to an existing group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        public ApiResponse<UsersResponse> UpdateGroupUsersWithHttpInfo(string accountId, string groupId, UserInfoList userInfoList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->UpdateGroupUsers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupUsers");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter


            if (userInfoList != null && userInfoList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(userInfoList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInfoList; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<UsersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (UsersResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(UsersResponse)));
            }
            else
            {
                return new ApiResponse<UsersResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (UsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
            }
            
        }

        /// <summary>
        /// Adds one or more users to an existing group. Adds one or more users to an existing group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        public async System.Threading.Tasks.Task<UsersResponse> UpdateGroupUsersAsync(string accountId, string groupId, UserInfoList userInfoList = null)
        {
             ApiResponse<UsersResponse> localVarResponse = await UpdateGroupUsersAsyncWithHttpInfo(accountId, groupId, userInfoList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds one or more users to an existing group. Adds one or more users to an existing group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupId">The ID of the group being accessed.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersResponse>> UpdateGroupUsersAsyncWithHttpInfo(string accountId, string groupId, UserInfoList userInfoList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->UpdateGroupUsers");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdateGroupUsers");

            var localVarPath = "/v2.1/accounts/{accountId}/groups/{groupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.ApiClient.ParameterToString(groupId)); // path parameter
            if (userInfoList != null && userInfoList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(userInfoList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInfoList; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
            
        }



        /// <summary>
        /// Updates the group information for a group. Updates the group name and modifies, or sets, the permission profile for the group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>GroupInformation</returns>
        public GroupInformation UpdateGroups(string accountId, GroupInformation groupInformation = null)
        {
             ApiResponse<GroupInformation> localVarResponse = UpdateGroupsWithHttpInfo(accountId, groupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the group information for a group. Updates the group name and modifies, or sets, the permission profile for the group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>ApiResponse of GroupInformation</returns>
        public ApiResponse<GroupInformation> UpdateGroupsWithHttpInfo(string accountId, GroupInformation groupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->UpdateGroups");

            var localVarPath = "/v2.1/accounts/{accountId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (groupInformation != null && groupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(groupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<GroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupInformation)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(GroupInformation)));
            }
            else
            {
                return new ApiResponse<GroupInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
            }
            
        }

        /// <summary>
        /// Updates the group information for a group. Updates the group name and modifies, or sets, the permission profile for the group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of GroupInformation</returns>
        public async System.Threading.Tasks.Task<GroupInformation> UpdateGroupsAsync(string accountId, GroupInformation groupInformation = null)
        {
             ApiResponse<GroupInformation> localVarResponse = await UpdateGroupsAsyncWithHttpInfo(accountId, groupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the group information for a group. Updates the group name and modifies, or sets, the permission profile for the group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInformation>> UpdateGroupsAsyncWithHttpInfo(string accountId, GroupInformation groupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling GroupsApi->UpdateGroups");

            var localVarPath = "/v2.1/accounts/{accountId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupInformation != null && groupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(groupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
            
        }

    }
}