/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a connect configuration for the specified account.
        /// </summary>
        /// <remarks>
        /// Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns></returns>
        ConnectCustomConfiguration CreateConfiguration(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null);

        /// <summary>
        /// Creates a connect configuration for the specified account.
        /// </summary>
        /// <remarks>
        /// Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ConnectCustomConfiguration> CreateConfigurationWithHttpInfo(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null);
        /// <summary>
        /// Deletes the specified connect configuration.
        /// </summary>
        /// <remarks>
        /// Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns></returns>
        void DeleteConfiguration(string accountId, string connectId);

        /// <summary>
        /// Deletes the specified connect configuration.
        /// </summary>
        /// <remarks>
        /// Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConfigurationWithHttpInfo(string accountId, string connectId);
        /// <summary>
        /// Deletes a Connect failure log entry.
        /// </summary>
        /// <remarks>
        /// Deletes the Connect failure log information for the specified entry.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns></returns>
        ConnectDeleteFailureResult DeleteEventFailureLog(string accountId, string failureId);

        /// <summary>
        /// Deletes a Connect failure log entry.
        /// </summary>
        /// <remarks>
        /// Deletes the Connect failure log information for the specified entry.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ConnectDeleteFailureResult> DeleteEventFailureLogWithHttpInfo(string accountId, string failureId);
        /// <summary>
        /// Deletes a specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Deletes a specified entry from the Connect Log. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns></returns>
        void DeleteEventLog(string accountId, string logId);

        /// <summary>
        /// Deletes a specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Deletes a specified entry from the Connect Log. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEventLogWithHttpInfo(string accountId, string logId);
        /// <summary>
        /// Gets a list of Connect log entries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns></returns>
        void DeleteEventLogs(string accountId);

        /// <summary>
        /// Gets a list of Connect log entries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEventLogsWithHttpInfo(string accountId);
        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns></returns>
        MobileNotifierConfigurationInformation DeleteMobileNotifiers(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null);

        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<MobileNotifierConfigurationInformation> DeleteMobileNotifiersWithHttpInfo(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null);
        /// <summary>
        /// Get a Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns></returns>
        ConnectConfigResults GetConfiguration(string accountId, string connectId);

        /// <summary>
        /// Get a Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ConnectConfigResults> GetConfigurationWithHttpInfo(string accountId, string connectId);
        /// <summary>
        /// Returns all users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        IntegratedConnectUserInfoList GetConnectAllUsers(string accountId, string connectId, ConnectApi.GetConnectAllUsersOptions options = null);

        /// <summary>
        /// Returns all users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<IntegratedConnectUserInfoList> GetConnectAllUsersWithHttpInfo(string accountId, string connectId, ConnectApi.GetConnectAllUsersOptions options = null);
        /// <summary>
        /// Get the specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        ConnectLog GetEventLog(string accountId, string logId, ConnectApi.GetEventLogOptions options = null);

        /// <summary>
        /// Get the specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ConnectLog> GetEventLogWithHttpInfo(string accountId, string logId, ConnectApi.GetEventLogOptions options = null);
        /// <summary>
        /// Get Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns></returns>
        ConnectConfigResults ListConfigurations(string accountId);

        /// <summary>
        /// Get Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ConnectConfigResults> ListConfigurationsWithHttpInfo(string accountId);
        /// <summary>
        /// Gets the Connect failure log information.
        /// </summary>
        /// <remarks>
        /// Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        ConnectLogs ListEventFailureLogs(string accountId, ConnectApi.ListEventFailureLogsOptions options = null);

        /// <summary>
        /// Gets the Connect failure log information.
        /// </summary>
        /// <remarks>
        /// Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ConnectLogs> ListEventFailureLogsWithHttpInfo(string accountId, ConnectApi.ListEventFailureLogsOptions options = null);
        /// <summary>
        /// Gets the Connect log.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        ConnectLogs ListEventLogs(string accountId, ConnectApi.ListEventLogsOptions options = null);

        /// <summary>
        /// Gets the Connect log.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ConnectLogs> ListEventLogsWithHttpInfo(string accountId, ConnectApi.ListEventLogsOptions options = null);
        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns></returns>
        MobileNotifierConfigurationInformation ListMobileNotifiers(string accountId);

        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<MobileNotifierConfigurationInformation> ListMobileNotifiersWithHttpInfo(string accountId);
        /// <summary>
        /// Returns users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// Returns users from the configured Connect service.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        IntegratedUserInfoList ListUsers(string accountId, string connectId, ConnectApi.ListUsersOptions options = null);

        /// <summary>
        /// Returns users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// Returns users from the configured Connect service.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<IntegratedUserInfoList> ListUsersWithHttpInfo(string accountId, string connectId, ConnectApi.ListUsersOptions options = null);
        /// <summary>
        /// Republishes Connect information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the specified envelope.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelopeId Guid of the envelope being accessed.</param>
        /// <returns></returns>
        ConnectFailureResults RetryEventForEnvelope(string accountId, string envelopeId);

        /// <summary>
        /// Republishes Connect information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the specified envelope.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelopeId Guid of the envelope being accessed.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ConnectFailureResults> RetryEventForEnvelopeWithHttpInfo(string accountId, string envelopeId);
        /// <summary>
        /// Republishes Connect information for multiple envelopes.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns></returns>
        ConnectFailureResults RetryEventForEnvelopes(string accountId, ConnectFailureFilter connectFailureFilter = null);

        /// <summary>
        /// Republishes Connect information for multiple envelopes.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ConnectFailureResults> RetryEventForEnvelopesWithHttpInfo(string accountId, ConnectFailureFilter connectFailureFilter = null);
        /// <summary>
        /// Updates a specified Connect configuration.
        /// </summary>
        /// <remarks>
        /// Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns></returns>
        ConnectCustomConfiguration UpdateConfiguration(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null);

        /// <summary>
        /// Updates a specified Connect configuration.
        /// </summary>
        /// <remarks>
        /// Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ConnectCustomConfiguration> UpdateConfigurationWithHttpInfo(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null);
        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns></returns>
        MobileNotifierConfigurationInformation UpdateMobileNotifiers(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null);

        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<MobileNotifierConfigurationInformation> UpdateMobileNotifiersWithHttpInfo(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a connect configuration for the specified account.
        /// </summary>
        /// <remarks>
        /// Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>Task of ConnectCustomConfiguration</returns>
        System.Threading.Tasks.Task<ConnectCustomConfiguration> CreateConfigurationAsync(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null);

        /// <summary>
        /// Creates a connect configuration for the specified account.
        /// </summary>
        /// <remarks>
        /// Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectCustomConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectCustomConfiguration>> CreateConfigurationAsyncWithHttpInfo(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null);
        /// <summary>
        /// Deletes the specified connect configuration.
        /// </summary>
        /// <remarks>
        /// Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConfigurationAsync(string accountId, string connectId);

        /// <summary>
        /// Deletes the specified connect configuration.
        /// </summary>
        /// <remarks>
        /// Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConfigurationAsyncWithHttpInfo(string accountId, string connectId);
        /// <summary>
        /// Deletes a Connect failure log entry.
        /// </summary>
        /// <remarks>
        /// Deletes the Connect failure log information for the specified entry.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>Task of ConnectDeleteFailureResult</returns>
        System.Threading.Tasks.Task<ConnectDeleteFailureResult> DeleteEventFailureLogAsync(string accountId, string failureId);

        /// <summary>
        /// Deletes a Connect failure log entry.
        /// </summary>
        /// <remarks>
        /// Deletes the Connect failure log information for the specified entry.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>Task of ApiResponse (ConnectDeleteFailureResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectDeleteFailureResult>> DeleteEventFailureLogAsyncWithHttpInfo(string accountId, string failureId);
        /// <summary>
        /// Deletes a specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Deletes a specified entry from the Connect Log. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEventLogAsync(string accountId, string logId);

        /// <summary>
        /// Deletes a specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Deletes a specified entry from the Connect Log. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventLogAsyncWithHttpInfo(string accountId, string logId);
        /// <summary>
        /// Gets a list of Connect log entries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEventLogsAsync(string accountId);

        /// <summary>
        /// Gets a list of Connect log entries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventLogsAsyncWithHttpInfo(string accountId);
        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>Task of MobileNotifierConfigurationInformation</returns>
        System.Threading.Tasks.Task<MobileNotifierConfigurationInformation> DeleteMobileNotifiersAsync(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null);

        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (MobileNotifierConfigurationInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<MobileNotifierConfigurationInformation>> DeleteMobileNotifiersAsyncWithHttpInfo(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null);
        /// <summary>
        /// Get a Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ConnectConfigResults</returns>
        System.Threading.Tasks.Task<ConnectConfigResults> GetConfigurationAsync(string accountId, string connectId);

        /// <summary>
        /// Get a Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ApiResponse (ConnectConfigResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectConfigResults>> GetConfigurationAsyncWithHttpInfo(string accountId, string connectId);
        /// <summary>
        /// Returns all users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of IntegratedConnectUserInfoList</returns>
        System.Threading.Tasks.Task<IntegratedConnectUserInfoList> GetConnectAllUsersAsync(string accountId, string connectId, ConnectApi.GetConnectAllUsersOptions options = null);

        /// <summary>
        /// Returns all users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (IntegratedConnectUserInfoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegratedConnectUserInfoList>> GetConnectAllUsersAsyncWithHttpInfo(string accountId, string connectId, ConnectApi.GetConnectAllUsersOptions options = null);
        /// <summary>
        /// Get the specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ConnectLog</returns>
        System.Threading.Tasks.Task<ConnectLog> GetEventLogAsync(string accountId, string logId, ConnectApi.GetEventLogOptions options = null);

        /// <summary>
        /// Get the specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (ConnectLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectLog>> GetEventLogAsyncWithHttpInfo(string accountId, string logId, ConnectApi.GetEventLogOptions options = null);
        /// <summary>
        /// Get Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ConnectConfigResults</returns>
        System.Threading.Tasks.Task<ConnectConfigResults> ListConfigurationsAsync(string accountId);

        /// <summary>
        /// Get Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse (ConnectConfigResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectConfigResults>> ListConfigurationsAsyncWithHttpInfo(string accountId);
        /// <summary>
        /// Gets the Connect failure log information.
        /// </summary>
        /// <remarks>
        /// Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ConnectLogs</returns>
        System.Threading.Tasks.Task<ConnectLogs> ListEventFailureLogsAsync(string accountId, ConnectApi.ListEventFailureLogsOptions options = null);

        /// <summary>
        /// Gets the Connect failure log information.
        /// </summary>
        /// <remarks>
        /// Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (ConnectLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectLogs>> ListEventFailureLogsAsyncWithHttpInfo(string accountId, ConnectApi.ListEventFailureLogsOptions options = null);
        /// <summary>
        /// Gets the Connect log.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ConnectLogs</returns>
        System.Threading.Tasks.Task<ConnectLogs> ListEventLogsAsync(string accountId, ConnectApi.ListEventLogsOptions options = null);

        /// <summary>
        /// Gets the Connect log.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (ConnectLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectLogs>> ListEventLogsAsyncWithHttpInfo(string accountId, ConnectApi.ListEventLogsOptions options = null);
        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of MobileNotifierConfigurationInformation</returns>
        System.Threading.Tasks.Task<MobileNotifierConfigurationInformation> ListMobileNotifiersAsync(string accountId);

        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse (MobileNotifierConfigurationInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<MobileNotifierConfigurationInformation>> ListMobileNotifiersAsyncWithHttpInfo(string accountId);
        /// <summary>
        /// Returns users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// Returns users from the configured Connect service.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of IntegratedUserInfoList</returns>
        System.Threading.Tasks.Task<IntegratedUserInfoList> ListUsersAsync(string accountId, string connectId, ConnectApi.ListUsersOptions options = null);

        /// <summary>
        /// Returns users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// Returns users from the configured Connect service.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (IntegratedUserInfoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegratedUserInfoList>> ListUsersAsyncWithHttpInfo(string accountId, string connectId, ConnectApi.ListUsersOptions options = null);
        /// <summary>
        /// Republishes Connect information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the specified envelope.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelopeId Guid of the envelope being accessed.</param>
        /// <returns>Task of ConnectFailureResults</returns>
        System.Threading.Tasks.Task<ConnectFailureResults> RetryEventForEnvelopeAsync(string accountId, string envelopeId);

        /// <summary>
        /// Republishes Connect information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the specified envelope.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelopeId Guid of the envelope being accessed.</param>
        /// <returns>Task of ApiResponse (ConnectFailureResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectFailureResults>> RetryEventForEnvelopeAsyncWithHttpInfo(string accountId, string envelopeId);
        /// <summary>
        /// Republishes Connect information for multiple envelopes.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>Task of ConnectFailureResults</returns>
        System.Threading.Tasks.Task<ConnectFailureResults> RetryEventForEnvelopesAsync(string accountId, ConnectFailureFilter connectFailureFilter = null);

        /// <summary>
        /// Republishes Connect information for multiple envelopes.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectFailureResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectFailureResults>> RetryEventForEnvelopesAsyncWithHttpInfo(string accountId, ConnectFailureFilter connectFailureFilter = null);
        /// <summary>
        /// Updates a specified Connect configuration.
        /// </summary>
        /// <remarks>
        /// Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>Task of ConnectCustomConfiguration</returns>
        System.Threading.Tasks.Task<ConnectCustomConfiguration> UpdateConfigurationAsync(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null);

        /// <summary>
        /// Updates a specified Connect configuration.
        /// </summary>
        /// <remarks>
        /// Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectCustomConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectCustomConfiguration>> UpdateConfigurationAsyncWithHttpInfo(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null);
        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>Task of MobileNotifierConfigurationInformation</returns>
        System.Threading.Tasks.Task<MobileNotifierConfigurationInformation> UpdateMobileNotifiersAsync(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null);

        /// <summary>
        /// Reserved
        /// </summary>
        /// <remarks>
        /// Reserved:
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (MobileNotifierConfigurationInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<MobileNotifierConfigurationInformation>> UpdateMobileNotifiersAsyncWithHttpInfo(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConnectApi : IConnectApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public ConnectApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Creates a connect configuration for the specified account. Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>ConnectCustomConfiguration</returns>
        public ConnectCustomConfiguration CreateConfiguration(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null)
        {
             ApiResponse<ConnectCustomConfiguration> localVarResponse = CreateConfigurationWithHttpInfo(accountId, connectCustomConfiguration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a connect configuration for the specified account. Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>ApiResponse of ConnectCustomConfiguration</returns>
        public ApiResponse<ConnectCustomConfiguration> CreateConfigurationWithHttpInfo(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->CreateConfiguration");

            var localVarPath = "/v2.1/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (connectCustomConfiguration != null && connectCustomConfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(connectCustomConfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectCustomConfiguration; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<ConnectCustomConfiguration>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectCustomConfiguration)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(ConnectCustomConfiguration)));
            }
            else
            {
                return new ApiResponse<ConnectCustomConfiguration>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectCustomConfiguration)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectCustomConfiguration)));
            }
            
        }

        /// <summary>
        /// Creates a connect configuration for the specified account. Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>Task of ConnectCustomConfiguration</returns>
        public async System.Threading.Tasks.Task<ConnectCustomConfiguration> CreateConfigurationAsync(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null)
        {
             ApiResponse<ConnectCustomConfiguration> localVarResponse = await CreateConfigurationAsyncWithHttpInfo(accountId, connectCustomConfiguration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a connect configuration for the specified account. Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectCustomConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectCustomConfiguration>> CreateConfigurationAsyncWithHttpInfo(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->CreateConfiguration");

            var localVarPath = "/v2.1/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectCustomConfiguration != null && connectCustomConfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(connectCustomConfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectCustomConfiguration; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectCustomConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConnectCustomConfiguration)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectCustomConfiguration)));
            
        }



        /// <summary>
        /// Deletes the specified connect configuration. Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns></returns>
        public void DeleteConfiguration(string accountId, string connectId)
        {
             DeleteConfigurationWithHttpInfo(accountId, connectId);
        }

        /// <summary>
        /// Deletes the specified connect configuration. Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteConfigurationWithHttpInfo(string accountId, string connectId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->DeleteConfiguration");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectApi->DeleteConfiguration");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/{connectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", this.ApiClient.ParameterToString(connectId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified connect configuration. Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConfigurationAsync(string accountId, string connectId)
        {
             await DeleteConfigurationAsyncWithHttpInfo(accountId, connectId);
        }

        /// <summary>
        /// Deletes the specified connect configuration. Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConfigurationAsyncWithHttpInfo(string accountId, string connectId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->DeleteConfiguration");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectApi->DeleteConfiguration");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/{connectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", this.ApiClient.ParameterToString(connectId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }



        /// <summary>
        /// Deletes a Connect failure log entry. Deletes the Connect failure log information for the specified entry.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>ConnectDeleteFailureResult</returns>
        public ConnectDeleteFailureResult DeleteEventFailureLog(string accountId, string failureId)
        {
             ApiResponse<ConnectDeleteFailureResult> localVarResponse = DeleteEventFailureLogWithHttpInfo(accountId, failureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a Connect failure log entry. Deletes the Connect failure log information for the specified entry.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>ApiResponse of ConnectDeleteFailureResult</returns>
        public ApiResponse<ConnectDeleteFailureResult> DeleteEventFailureLogWithHttpInfo(string accountId, string failureId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->DeleteEventFailureLog");
            // verify the required parameter 'failureId' is set
            if (failureId == null)
                throw new ApiException(400, "Missing required parameter 'failureId' when calling ConnectApi->DeleteEventFailureLog");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/failures/{failureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (failureId != null) localVarPathParams.Add("failureId", this.ApiClient.ParameterToString(failureId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventFailureLog", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<ConnectDeleteFailureResult>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectDeleteFailureResult)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(ConnectDeleteFailureResult)));
            }
            else
            {
                return new ApiResponse<ConnectDeleteFailureResult>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectDeleteFailureResult)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectDeleteFailureResult)));
            }
            
        }

        /// <summary>
        /// Deletes a Connect failure log entry. Deletes the Connect failure log information for the specified entry.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>Task of ConnectDeleteFailureResult</returns>
        public async System.Threading.Tasks.Task<ConnectDeleteFailureResult> DeleteEventFailureLogAsync(string accountId, string failureId)
        {
             ApiResponse<ConnectDeleteFailureResult> localVarResponse = await DeleteEventFailureLogAsyncWithHttpInfo(accountId, failureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a Connect failure log entry. Deletes the Connect failure log information for the specified entry.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>Task of ApiResponse (ConnectDeleteFailureResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectDeleteFailureResult>> DeleteEventFailureLogAsyncWithHttpInfo(string accountId, string failureId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->DeleteEventFailureLog");
            // verify the required parameter 'failureId' is set
            if (failureId == null)
                throw new ApiException(400, "Missing required parameter 'failureId' when calling ConnectApi->DeleteEventFailureLog");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/failures/{failureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (failureId != null) localVarPathParams.Add("failureId", this.ApiClient.ParameterToString(failureId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventFailureLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectDeleteFailureResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConnectDeleteFailureResult)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectDeleteFailureResult)));
            
        }



        /// <summary>
        /// Deletes a specified Connect log entry. Deletes a specified entry from the Connect Log. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns></returns>
        public void DeleteEventLog(string accountId, string logId)
        {
             DeleteEventLogWithHttpInfo(accountId, logId);
        }

        /// <summary>
        /// Deletes a specified Connect log entry. Deletes a specified entry from the Connect Log. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEventLogWithHttpInfo(string accountId, string logId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->DeleteEventLog");
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling ConnectApi->DeleteEventLog");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/logs/{logId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (logId != null) localVarPathParams.Add("logId", this.ApiClient.ParameterToString(logId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a specified Connect log entry. Deletes a specified entry from the Connect Log. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEventLogAsync(string accountId, string logId)
        {
             await DeleteEventLogAsyncWithHttpInfo(accountId, logId);
        }

        /// <summary>
        /// Deletes a specified Connect log entry. Deletes a specified entry from the Connect Log. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventLogAsyncWithHttpInfo(string accountId, string logId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->DeleteEventLog");
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling ConnectApi->DeleteEventLog");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/logs/{logId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (logId != null) localVarPathParams.Add("logId", this.ApiClient.ParameterToString(logId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventLog", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }



        /// <summary>
        /// Gets a list of Connect log entries. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns></returns>
        public void DeleteEventLogs(string accountId)
        {
             DeleteEventLogsWithHttpInfo(accountId);
        }

        /// <summary>
        /// Gets a list of Connect log entries. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEventLogsWithHttpInfo(string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->DeleteEventLogs");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a list of Connect log entries. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEventLogsAsync(string accountId)
        {
             await DeleteEventLogsAsyncWithHttpInfo(accountId);
        }

        /// <summary>
        /// Gets a list of Connect log entries. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventLogsAsyncWithHttpInfo(string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->DeleteEventLogs");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }



        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>MobileNotifierConfigurationInformation</returns>
        public MobileNotifierConfigurationInformation DeleteMobileNotifiers(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null)
        {
             ApiResponse<MobileNotifierConfigurationInformation> localVarResponse = DeleteMobileNotifiersWithHttpInfo(accountId, mobileNotifierConfigurationInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>ApiResponse of MobileNotifierConfigurationInformation</returns>
        public ApiResponse<MobileNotifierConfigurationInformation> DeleteMobileNotifiersWithHttpInfo(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->DeleteMobileNotifiers");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/mobile_notifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (mobileNotifierConfigurationInformation != null && mobileNotifierConfigurationInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(mobileNotifierConfigurationInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mobileNotifierConfigurationInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMobileNotifiers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<MobileNotifierConfigurationInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (MobileNotifierConfigurationInformation)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(MobileNotifierConfigurationInformation)));
            }
            else
            {
                return new ApiResponse<MobileNotifierConfigurationInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (MobileNotifierConfigurationInformation)this.ApiClient.Deserialize(localVarResponse, typeof(MobileNotifierConfigurationInformation)));
            }
            
        }

        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>Task of MobileNotifierConfigurationInformation</returns>
        public async System.Threading.Tasks.Task<MobileNotifierConfigurationInformation> DeleteMobileNotifiersAsync(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null)
        {
             ApiResponse<MobileNotifierConfigurationInformation> localVarResponse = await DeleteMobileNotifiersAsyncWithHttpInfo(accountId, mobileNotifierConfigurationInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (MobileNotifierConfigurationInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MobileNotifierConfigurationInformation>> DeleteMobileNotifiersAsyncWithHttpInfo(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->DeleteMobileNotifiers");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/mobile_notifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (mobileNotifierConfigurationInformation != null && mobileNotifierConfigurationInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(mobileNotifierConfigurationInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mobileNotifierConfigurationInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMobileNotifiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MobileNotifierConfigurationInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MobileNotifierConfigurationInformation)this.ApiClient.Deserialize(localVarResponse, typeof(MobileNotifierConfigurationInformation)));
            
        }



        /// <summary>
        /// Get a Connect Configuration Information Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ConnectConfigResults</returns>
        public ConnectConfigResults GetConfiguration(string accountId, string connectId)
        {
             ApiResponse<ConnectConfigResults> localVarResponse = GetConfigurationWithHttpInfo(accountId, connectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Connect Configuration Information Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ApiResponse of ConnectConfigResults</returns>
        public ApiResponse<ConnectConfigResults> GetConfigurationWithHttpInfo(string accountId, string connectId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->GetConfiguration");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectApi->GetConfiguration");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/{connectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", this.ApiClient.ParameterToString(connectId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<ConnectConfigResults>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectConfigResults)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(ConnectConfigResults)));
            }
            else
            {
                return new ApiResponse<ConnectConfigResults>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectConfigResults)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigResults)));
            }
            
        }

        /// <summary>
        /// Get a Connect Configuration Information Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ConnectConfigResults</returns>
        public async System.Threading.Tasks.Task<ConnectConfigResults> GetConfigurationAsync(string accountId, string connectId)
        {
             ApiResponse<ConnectConfigResults> localVarResponse = await GetConfigurationAsyncWithHttpInfo(accountId, connectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Connect Configuration Information Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ApiResponse (ConnectConfigResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectConfigResults>> GetConfigurationAsyncWithHttpInfo(string accountId, string connectId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->GetConfiguration");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectApi->GetConfiguration");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/{connectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", this.ApiClient.ParameterToString(connectId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectConfigResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConnectConfigResults)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigResults)));
            
        }


        /// <summary>
        /// Returns all users from the configured Connect service. 
        /// </summary>
        public class GetConnectAllUsersOptions
        {
            /// 
            public string count {get; set;}
            /// 
            public string domainUsersOnly {get; set;}
            /// 
            public string emailSubstring {get; set;}
            /// 
            public string startPosition {get; set;}
            /// 
            public string status {get; set;}
            /// 
            public string userNameSubstring {get; set;}
        }

        /// <summary>
        /// Returns all users from the configured Connect service. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>IntegratedConnectUserInfoList</returns>
        public IntegratedConnectUserInfoList GetConnectAllUsers(string accountId, string connectId, ConnectApi.GetConnectAllUsersOptions options = null)
        {
             ApiResponse<IntegratedConnectUserInfoList> localVarResponse = GetConnectAllUsersWithHttpInfo(accountId, connectId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all users from the configured Connect service. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of IntegratedConnectUserInfoList</returns>
        public ApiResponse<IntegratedConnectUserInfoList> GetConnectAllUsersWithHttpInfo(string accountId, string connectId, ConnectApi.GetConnectAllUsersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->GetConnectAllUsers");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectApi->GetConnectAllUsers");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/{connectId}/all/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", this.ApiClient.ParameterToString(connectId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.domainUsersOnly != null) localVarQueryParams.Add("domain_users_only", this.ApiClient.ParameterToString(options.domainUsersOnly)); // query parameter
                if (options.emailSubstring != null) localVarQueryParams.Add("email_substring", this.ApiClient.ParameterToString(options.emailSubstring)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.status != null) localVarQueryParams.Add("status", this.ApiClient.ParameterToString(options.status)); // query parameter
                if (options.userNameSubstring != null) localVarQueryParams.Add("user_name_substring", this.ApiClient.ParameterToString(options.userNameSubstring)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectAllUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<IntegratedConnectUserInfoList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (IntegratedConnectUserInfoList)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(IntegratedConnectUserInfoList)));
            }
            else
            {
                return new ApiResponse<IntegratedConnectUserInfoList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (IntegratedConnectUserInfoList)this.ApiClient.Deserialize(localVarResponse, typeof(IntegratedConnectUserInfoList)));
            }
            
        }

        /// <summary>
        /// Returns all users from the configured Connect service. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of IntegratedConnectUserInfoList</returns>
        public async System.Threading.Tasks.Task<IntegratedConnectUserInfoList> GetConnectAllUsersAsync(string accountId, string connectId, ConnectApi.GetConnectAllUsersOptions options = null)
        {
             ApiResponse<IntegratedConnectUserInfoList> localVarResponse = await GetConnectAllUsersAsyncWithHttpInfo(accountId, connectId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all users from the configured Connect service. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (IntegratedConnectUserInfoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegratedConnectUserInfoList>> GetConnectAllUsersAsyncWithHttpInfo(string accountId, string connectId, ConnectApi.GetConnectAllUsersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->GetConnectAllUsers");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectApi->GetConnectAllUsers");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/{connectId}/all/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", this.ApiClient.ParameterToString(connectId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.domainUsersOnly != null) localVarQueryParams.Add("domain_users_only", this.ApiClient.ParameterToString(options.domainUsersOnly)); // query parameter
                if (options.emailSubstring != null) localVarQueryParams.Add("email_substring", this.ApiClient.ParameterToString(options.emailSubstring)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.status != null) localVarQueryParams.Add("status", this.ApiClient.ParameterToString(options.status)); // query parameter
                if (options.userNameSubstring != null) localVarQueryParams.Add("user_name_substring", this.ApiClient.ParameterToString(options.userNameSubstring)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectAllUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegratedConnectUserInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IntegratedConnectUserInfoList)this.ApiClient.Deserialize(localVarResponse, typeof(IntegratedConnectUserInfoList)));
            
        }


        /// <summary>
        /// Get the specified Connect log entry. Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        public class GetEventLogOptions
        {
            /// When true, the connectDebugLog information is included in the response. 
            public string additionalInfo {get; set;}
        }

        /// <summary>
        /// Get the specified Connect log entry. Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ConnectLog</returns>
        public ConnectLog GetEventLog(string accountId, string logId, ConnectApi.GetEventLogOptions options = null)
        {
             ApiResponse<ConnectLog> localVarResponse = GetEventLogWithHttpInfo(accountId, logId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the specified Connect log entry. Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of ConnectLog</returns>
        public ApiResponse<ConnectLog> GetEventLogWithHttpInfo(string accountId, string logId, ConnectApi.GetEventLogOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->GetEventLog");
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling ConnectApi->GetEventLog");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/logs/{logId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (logId != null) localVarPathParams.Add("logId", this.ApiClient.ParameterToString(logId)); // path parameter

            if (options != null)
            {
                if (options.additionalInfo != null) localVarQueryParams.Add("additional_info", this.ApiClient.ParameterToString(options.additionalInfo)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventLog", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<ConnectLog>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectLog)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(ConnectLog)));
            }
            else
            {
                return new ApiResponse<ConnectLog>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectLog)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectLog)));
            }
            
        }

        /// <summary>
        /// Get the specified Connect log entry. Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ConnectLog</returns>
        public async System.Threading.Tasks.Task<ConnectLog> GetEventLogAsync(string accountId, string logId, ConnectApi.GetEventLogOptions options = null)
        {
             ApiResponse<ConnectLog> localVarResponse = await GetEventLogAsyncWithHttpInfo(accountId, logId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the specified Connect log entry. Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (ConnectLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectLog>> GetEventLogAsyncWithHttpInfo(string accountId, string logId, ConnectApi.GetEventLogOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->GetEventLog");
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling ConnectApi->GetEventLog");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/logs/{logId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (logId != null) localVarPathParams.Add("logId", this.ApiClient.ParameterToString(logId)); // path parameter
            if (options != null)
            {
                if (options.additionalInfo != null) localVarQueryParams.Add("additional_info", this.ApiClient.ParameterToString(options.additionalInfo)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConnectLog)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectLog)));
            
        }



        /// <summary>
        /// Get Connect Configuration Information Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ConnectConfigResults</returns>
        public ConnectConfigResults ListConfigurations(string accountId)
        {
             ApiResponse<ConnectConfigResults> localVarResponse = ListConfigurationsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connect Configuration Information Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of ConnectConfigResults</returns>
        public ApiResponse<ConnectConfigResults> ListConfigurationsWithHttpInfo(string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->ListConfigurations");

            var localVarPath = "/v2.1/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<ConnectConfigResults>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectConfigResults)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(ConnectConfigResults)));
            }
            else
            {
                return new ApiResponse<ConnectConfigResults>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectConfigResults)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigResults)));
            }
            
        }

        /// <summary>
        /// Get Connect Configuration Information Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ConnectConfigResults</returns>
        public async System.Threading.Tasks.Task<ConnectConfigResults> ListConfigurationsAsync(string accountId)
        {
             ApiResponse<ConnectConfigResults> localVarResponse = await ListConfigurationsAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connect Configuration Information Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse (ConnectConfigResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectConfigResults>> ListConfigurationsAsyncWithHttpInfo(string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->ListConfigurations");

            var localVarPath = "/v2.1/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectConfigResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConnectConfigResults)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigResults)));
            
        }


        /// <summary>
        /// Gets the Connect failure log information. Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </summary>
        public class ListEventFailureLogsOptions
        {
            /// 
            public string fromDate {get; set;}
            /// 
            public string toDate {get; set;}
        }

        /// <summary>
        /// Gets the Connect failure log information. Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ConnectLogs</returns>
        public ConnectLogs ListEventFailureLogs(string accountId, ConnectApi.ListEventFailureLogsOptions options = null)
        {
             ApiResponse<ConnectLogs> localVarResponse = ListEventFailureLogsWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Connect failure log information. Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of ConnectLogs</returns>
        public ApiResponse<ConnectLogs> ListEventFailureLogsWithHttpInfo(string accountId, ConnectApi.ListEventFailureLogsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->ListEventFailureLogs");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/failures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.fromDate != null) localVarQueryParams.Add("from_date", this.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", this.ApiClient.ParameterToString(options.toDate)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEventFailureLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<ConnectLogs>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectLogs)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(ConnectLogs)));
            }
            else
            {
                return new ApiResponse<ConnectLogs>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectLogs)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectLogs)));
            }
            
        }

        /// <summary>
        /// Gets the Connect failure log information. Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ConnectLogs</returns>
        public async System.Threading.Tasks.Task<ConnectLogs> ListEventFailureLogsAsync(string accountId, ConnectApi.ListEventFailureLogsOptions options = null)
        {
             ApiResponse<ConnectLogs> localVarResponse = await ListEventFailureLogsAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Connect failure log information. Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (ConnectLogs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectLogs>> ListEventFailureLogsAsyncWithHttpInfo(string accountId, ConnectApi.ListEventFailureLogsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->ListEventFailureLogs");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/failures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.fromDate != null) localVarQueryParams.Add("from_date", this.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", this.ApiClient.ParameterToString(options.toDate)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEventFailureLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConnectLogs)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectLogs)));
            
        }


        /// <summary>
        /// Gets the Connect log. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        public class ListEventLogsOptions
        {
            /// 
            public string fromDate {get; set;}
            /// 
            public string toDate {get; set;}
        }

        /// <summary>
        /// Gets the Connect log. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ConnectLogs</returns>
        public ConnectLogs ListEventLogs(string accountId, ConnectApi.ListEventLogsOptions options = null)
        {
             ApiResponse<ConnectLogs> localVarResponse = ListEventLogsWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Connect log. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of ConnectLogs</returns>
        public ApiResponse<ConnectLogs> ListEventLogsWithHttpInfo(string accountId, ConnectApi.ListEventLogsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->ListEventLogs");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.fromDate != null) localVarQueryParams.Add("from_date", this.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", this.ApiClient.ParameterToString(options.toDate)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEventLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<ConnectLogs>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectLogs)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(ConnectLogs)));
            }
            else
            {
                return new ApiResponse<ConnectLogs>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectLogs)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectLogs)));
            }
            
        }

        /// <summary>
        /// Gets the Connect log. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ConnectLogs</returns>
        public async System.Threading.Tasks.Task<ConnectLogs> ListEventLogsAsync(string accountId, ConnectApi.ListEventLogsOptions options = null)
        {
             ApiResponse<ConnectLogs> localVarResponse = await ListEventLogsAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Connect log. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (ConnectLogs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectLogs>> ListEventLogsAsyncWithHttpInfo(string accountId, ConnectApi.ListEventLogsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->ListEventLogs");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.fromDate != null) localVarQueryParams.Add("from_date", this.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", this.ApiClient.ParameterToString(options.toDate)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEventLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConnectLogs)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectLogs)));
            
        }



        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>MobileNotifierConfigurationInformation</returns>
        public MobileNotifierConfigurationInformation ListMobileNotifiers(string accountId)
        {
             ApiResponse<MobileNotifierConfigurationInformation> localVarResponse = ListMobileNotifiersWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of MobileNotifierConfigurationInformation</returns>
        public ApiResponse<MobileNotifierConfigurationInformation> ListMobileNotifiersWithHttpInfo(string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->ListMobileNotifiers");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/mobile_notifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMobileNotifiers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<MobileNotifierConfigurationInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (MobileNotifierConfigurationInformation)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(MobileNotifierConfigurationInformation)));
            }
            else
            {
                return new ApiResponse<MobileNotifierConfigurationInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (MobileNotifierConfigurationInformation)this.ApiClient.Deserialize(localVarResponse, typeof(MobileNotifierConfigurationInformation)));
            }
            
        }

        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of MobileNotifierConfigurationInformation</returns>
        public async System.Threading.Tasks.Task<MobileNotifierConfigurationInformation> ListMobileNotifiersAsync(string accountId)
        {
             ApiResponse<MobileNotifierConfigurationInformation> localVarResponse = await ListMobileNotifiersAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse (MobileNotifierConfigurationInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MobileNotifierConfigurationInformation>> ListMobileNotifiersAsyncWithHttpInfo(string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->ListMobileNotifiers");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/mobile_notifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMobileNotifiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MobileNotifierConfigurationInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MobileNotifierConfigurationInformation)this.ApiClient.Deserialize(localVarResponse, typeof(MobileNotifierConfigurationInformation)));
            
        }


        /// <summary>
        /// Returns users from the configured Connect service. Returns users from the configured Connect service.
        /// </summary>
        public class ListUsersOptions
        {
            /// 
            public string count {get; set;}
            /// 
            public string emailSubstring {get; set;}
            /// 
            public string listIncludedUsers {get; set;}
            /// 
            public string startPosition {get; set;}
            /// 
            public string status {get; set;}
            /// 
            public string userNameSubstring {get; set;}
        }

        /// <summary>
        /// Returns users from the configured Connect service. Returns users from the configured Connect service.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>IntegratedUserInfoList</returns>
        public IntegratedUserInfoList ListUsers(string accountId, string connectId, ConnectApi.ListUsersOptions options = null)
        {
             ApiResponse<IntegratedUserInfoList> localVarResponse = ListUsersWithHttpInfo(accountId, connectId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns users from the configured Connect service. Returns users from the configured Connect service.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of IntegratedUserInfoList</returns>
        public ApiResponse<IntegratedUserInfoList> ListUsersWithHttpInfo(string accountId, string connectId, ConnectApi.ListUsersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->ListUsers");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectApi->ListUsers");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/{connectId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", this.ApiClient.ParameterToString(connectId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.emailSubstring != null) localVarQueryParams.Add("email_substring", this.ApiClient.ParameterToString(options.emailSubstring)); // query parameter
                if (options.listIncludedUsers != null) localVarQueryParams.Add("list_included_users", this.ApiClient.ParameterToString(options.listIncludedUsers)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.status != null) localVarQueryParams.Add("status", this.ApiClient.ParameterToString(options.status)); // query parameter
                if (options.userNameSubstring != null) localVarQueryParams.Add("user_name_substring", this.ApiClient.ParameterToString(options.userNameSubstring)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<IntegratedUserInfoList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (IntegratedUserInfoList)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(IntegratedUserInfoList)));
            }
            else
            {
                return new ApiResponse<IntegratedUserInfoList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (IntegratedUserInfoList)this.ApiClient.Deserialize(localVarResponse, typeof(IntegratedUserInfoList)));
            }
            
        }

        /// <summary>
        /// Returns users from the configured Connect service. Returns users from the configured Connect service.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of IntegratedUserInfoList</returns>
        public async System.Threading.Tasks.Task<IntegratedUserInfoList> ListUsersAsync(string accountId, string connectId, ConnectApi.ListUsersOptions options = null)
        {
             ApiResponse<IntegratedUserInfoList> localVarResponse = await ListUsersAsyncWithHttpInfo(accountId, connectId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns users from the configured Connect service. Returns users from the configured Connect service.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (IntegratedUserInfoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegratedUserInfoList>> ListUsersAsyncWithHttpInfo(string accountId, string connectId, ConnectApi.ListUsersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->ListUsers");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectApi->ListUsers");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/{connectId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", this.ApiClient.ParameterToString(connectId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.emailSubstring != null) localVarQueryParams.Add("email_substring", this.ApiClient.ParameterToString(options.emailSubstring)); // query parameter
                if (options.listIncludedUsers != null) localVarQueryParams.Add("list_included_users", this.ApiClient.ParameterToString(options.listIncludedUsers)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.status != null) localVarQueryParams.Add("status", this.ApiClient.ParameterToString(options.status)); // query parameter
                if (options.userNameSubstring != null) localVarQueryParams.Add("user_name_substring", this.ApiClient.ParameterToString(options.userNameSubstring)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegratedUserInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IntegratedUserInfoList)this.ApiClient.Deserialize(localVarResponse, typeof(IntegratedUserInfoList)));
            
        }



        /// <summary>
        /// Republishes Connect information for the specified envelope. Republishes Connect information for the specified envelope.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelopeId Guid of the envelope being accessed.</param>
        /// <returns>ConnectFailureResults</returns>
        public ConnectFailureResults RetryEventForEnvelope(string accountId, string envelopeId)
        {
             ApiResponse<ConnectFailureResults> localVarResponse = RetryEventForEnvelopeWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Republishes Connect information for the specified envelope. Republishes Connect information for the specified envelope.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelopeId Guid of the envelope being accessed.</param>
        /// <returns>ApiResponse of ConnectFailureResults</returns>
        public ApiResponse<ConnectFailureResults> RetryEventForEnvelopeWithHttpInfo(string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->RetryEventForEnvelope");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling ConnectApi->RetryEventForEnvelope");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/envelopes/{envelopeId}/retry_queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", this.ApiClient.ParameterToString(envelopeId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryEventForEnvelope", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<ConnectFailureResults>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectFailureResults)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(ConnectFailureResults)));
            }
            else
            {
                return new ApiResponse<ConnectFailureResults>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectFailureResults)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectFailureResults)));
            }
            
        }

        /// <summary>
        /// Republishes Connect information for the specified envelope. Republishes Connect information for the specified envelope.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelopeId Guid of the envelope being accessed.</param>
        /// <returns>Task of ConnectFailureResults</returns>
        public async System.Threading.Tasks.Task<ConnectFailureResults> RetryEventForEnvelopeAsync(string accountId, string envelopeId)
        {
             ApiResponse<ConnectFailureResults> localVarResponse = await RetryEventForEnvelopeAsyncWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Republishes Connect information for the specified envelope. Republishes Connect information for the specified envelope.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelopeId Guid of the envelope being accessed.</param>
        /// <returns>Task of ApiResponse (ConnectFailureResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectFailureResults>> RetryEventForEnvelopeAsyncWithHttpInfo(string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->RetryEventForEnvelope");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling ConnectApi->RetryEventForEnvelope");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/envelopes/{envelopeId}/retry_queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", this.ApiClient.ParameterToString(envelopeId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryEventForEnvelope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectFailureResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConnectFailureResults)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectFailureResults)));
            
        }



        /// <summary>
        /// Republishes Connect information for multiple envelopes. Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>ConnectFailureResults</returns>
        public ConnectFailureResults RetryEventForEnvelopes(string accountId, ConnectFailureFilter connectFailureFilter = null)
        {
             ApiResponse<ConnectFailureResults> localVarResponse = RetryEventForEnvelopesWithHttpInfo(accountId, connectFailureFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Republishes Connect information for multiple envelopes. Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>ApiResponse of ConnectFailureResults</returns>
        public ApiResponse<ConnectFailureResults> RetryEventForEnvelopesWithHttpInfo(string accountId, ConnectFailureFilter connectFailureFilter = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->RetryEventForEnvelopes");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/envelopes/retry_queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (connectFailureFilter != null && connectFailureFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(connectFailureFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectFailureFilter; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryEventForEnvelopes", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<ConnectFailureResults>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectFailureResults)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(ConnectFailureResults)));
            }
            else
            {
                return new ApiResponse<ConnectFailureResults>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectFailureResults)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectFailureResults)));
            }
            
        }

        /// <summary>
        /// Republishes Connect information for multiple envelopes. Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>Task of ConnectFailureResults</returns>
        public async System.Threading.Tasks.Task<ConnectFailureResults> RetryEventForEnvelopesAsync(string accountId, ConnectFailureFilter connectFailureFilter = null)
        {
             ApiResponse<ConnectFailureResults> localVarResponse = await RetryEventForEnvelopesAsyncWithHttpInfo(accountId, connectFailureFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Republishes Connect information for multiple envelopes. Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectFailureResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectFailureResults>> RetryEventForEnvelopesAsyncWithHttpInfo(string accountId, ConnectFailureFilter connectFailureFilter = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->RetryEventForEnvelopes");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/envelopes/retry_queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectFailureFilter != null && connectFailureFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(connectFailureFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectFailureFilter; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryEventForEnvelopes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectFailureResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConnectFailureResults)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectFailureResults)));
            
        }



        /// <summary>
        /// Updates a specified Connect configuration. Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>ConnectCustomConfiguration</returns>
        public ConnectCustomConfiguration UpdateConfiguration(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null)
        {
             ApiResponse<ConnectCustomConfiguration> localVarResponse = UpdateConfigurationWithHttpInfo(accountId, connectCustomConfiguration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specified Connect configuration. Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>ApiResponse of ConnectCustomConfiguration</returns>
        public ApiResponse<ConnectCustomConfiguration> UpdateConfigurationWithHttpInfo(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->UpdateConfiguration");

            var localVarPath = "/v2.1/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (connectCustomConfiguration != null && connectCustomConfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(connectCustomConfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectCustomConfiguration; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<ConnectCustomConfiguration>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectCustomConfiguration)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(ConnectCustomConfiguration)));
            }
            else
            {
                return new ApiResponse<ConnectCustomConfiguration>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (ConnectCustomConfiguration)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectCustomConfiguration)));
            }
            
        }

        /// <summary>
        /// Updates a specified Connect configuration. Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>Task of ConnectCustomConfiguration</returns>
        public async System.Threading.Tasks.Task<ConnectCustomConfiguration> UpdateConfigurationAsync(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null)
        {
             ApiResponse<ConnectCustomConfiguration> localVarResponse = await UpdateConfigurationAsyncWithHttpInfo(accountId, connectCustomConfiguration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specified Connect configuration. Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectCustomConfiguration"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectCustomConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectCustomConfiguration>> UpdateConfigurationAsyncWithHttpInfo(string accountId, ConnectCustomConfiguration connectCustomConfiguration = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->UpdateConfiguration");

            var localVarPath = "/v2.1/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectCustomConfiguration != null && connectCustomConfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(connectCustomConfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectCustomConfiguration; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectCustomConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConnectCustomConfiguration)this.ApiClient.Deserialize(localVarResponse, typeof(ConnectCustomConfiguration)));
            
        }



        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>MobileNotifierConfigurationInformation</returns>
        public MobileNotifierConfigurationInformation UpdateMobileNotifiers(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null)
        {
             ApiResponse<MobileNotifierConfigurationInformation> localVarResponse = UpdateMobileNotifiersWithHttpInfo(accountId, mobileNotifierConfigurationInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>ApiResponse of MobileNotifierConfigurationInformation</returns>
        public ApiResponse<MobileNotifierConfigurationInformation> UpdateMobileNotifiersWithHttpInfo(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->UpdateMobileNotifiers");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/mobile_notifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (mobileNotifierConfigurationInformation != null && mobileNotifierConfigurationInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(mobileNotifierConfigurationInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mobileNotifierConfigurationInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMobileNotifiers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<MobileNotifierConfigurationInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (MobileNotifierConfigurationInformation)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(MobileNotifierConfigurationInformation)));
            }
            else
            {
                return new ApiResponse<MobileNotifierConfigurationInformation>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (MobileNotifierConfigurationInformation)this.ApiClient.Deserialize(localVarResponse, typeof(MobileNotifierConfigurationInformation)));
            }
            
        }

        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>Task of MobileNotifierConfigurationInformation</returns>
        public async System.Threading.Tasks.Task<MobileNotifierConfigurationInformation> UpdateMobileNotifiersAsync(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null)
        {
             ApiResponse<MobileNotifierConfigurationInformation> localVarResponse = await UpdateMobileNotifiersAsyncWithHttpInfo(accountId, mobileNotifierConfigurationInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reserved Reserved:
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="mobileNotifierConfigurationInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (MobileNotifierConfigurationInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MobileNotifierConfigurationInformation>> UpdateMobileNotifiersAsyncWithHttpInfo(string accountId, MobileNotifierConfigurationInformation mobileNotifierConfigurationInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectApi->UpdateMobileNotifiers");

            var localVarPath = "/v2.1/accounts/{accountId}/connect/mobile_notifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (mobileNotifierConfigurationInformation != null && mobileNotifierConfigurationInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(mobileNotifierConfigurationInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mobileNotifierConfigurationInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMobileNotifiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MobileNotifierConfigurationInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MobileNotifierConfigurationInformation)this.ApiClient.Deserialize(localVarResponse, typeof(MobileNotifierConfigurationInformation)));
            
        }

    }
}