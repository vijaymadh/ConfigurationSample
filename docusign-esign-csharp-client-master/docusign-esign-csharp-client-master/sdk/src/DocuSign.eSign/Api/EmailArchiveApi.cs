/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailArchiveApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a blind carbon copy email archive entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchive"> (optional)</param>
        /// <returns></returns>
        BccEmailArchive CreateBCCEmailArchive(string accountId, BccEmailArchive bccEmailArchive = null);

        /// <summary>
        /// Creates a blind carbon copy email archive entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchive"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<BccEmailArchive> CreateBCCEmailArchiveWithHttpInfo(string accountId, BccEmailArchive bccEmailArchive = null);
        /// <summary>
        /// Delete a blind carbon copy email archive for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <returns></returns>
        void DeleteBCCEmailArchive(string accountId, string bccEmailArchiveId);

        /// <summary>
        /// Delete a blind carbon copy email archive for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBCCEmailArchiveWithHttpInfo(string accountId, string bccEmailArchiveId);
        /// <summary>
        /// Get the blind carbon copy email archive history entries for the specified archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        BccEmailArchiveHistoryList GetBCCEmailArchiveHistoryList(string accountId, string bccEmailArchiveId, EmailArchiveApi.GetBCCEmailArchiveHistoryListOptions options = null);

        /// <summary>
        /// Get the blind carbon copy email archive history entries for the specified archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<BccEmailArchiveHistoryList> GetBCCEmailArchiveHistoryListWithHttpInfo(string accountId, string bccEmailArchiveId, EmailArchiveApi.GetBCCEmailArchiveHistoryListOptions options = null);
        /// <summary>
        /// Get the blind carbon copy email archive entries owned by the specified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        BccEmailArchiveList GetBCCEmailArchiveList(string accountId, EmailArchiveApi.GetBCCEmailArchiveListOptions options = null);

        /// <summary>
        /// Get the blind carbon copy email archive entries owned by the specified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<BccEmailArchiveList> GetBCCEmailArchiveListWithHttpInfo(string accountId, EmailArchiveApi.GetBCCEmailArchiveListOptions options = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a blind carbon copy email archive entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchive"> (optional)</param>
        /// <returns>Task of BccEmailArchive</returns>
        System.Threading.Tasks.Task<BccEmailArchive> CreateBCCEmailArchiveAsync(string accountId, BccEmailArchive bccEmailArchive = null);

        /// <summary>
        /// Creates a blind carbon copy email archive entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchive"> (optional)</param>
        /// <returns>Task of ApiResponse (BccEmailArchive)</returns>
        System.Threading.Tasks.Task<ApiResponse<BccEmailArchive>> CreateBCCEmailArchiveAsyncWithHttpInfo(string accountId, BccEmailArchive bccEmailArchive = null);
        /// <summary>
        /// Delete a blind carbon copy email archive for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBCCEmailArchiveAsync(string accountId, string bccEmailArchiveId);

        /// <summary>
        /// Delete a blind carbon copy email archive for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBCCEmailArchiveAsyncWithHttpInfo(string accountId, string bccEmailArchiveId);
        /// <summary>
        /// Get the blind carbon copy email archive history entries for the specified archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of BccEmailArchiveHistoryList</returns>
        System.Threading.Tasks.Task<BccEmailArchiveHistoryList> GetBCCEmailArchiveHistoryListAsync(string accountId, string bccEmailArchiveId, EmailArchiveApi.GetBCCEmailArchiveHistoryListOptions options = null);

        /// <summary>
        /// Get the blind carbon copy email archive history entries for the specified archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (BccEmailArchiveHistoryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<BccEmailArchiveHistoryList>> GetBCCEmailArchiveHistoryListAsyncWithHttpInfo(string accountId, string bccEmailArchiveId, EmailArchiveApi.GetBCCEmailArchiveHistoryListOptions options = null);
        /// <summary>
        /// Get the blind carbon copy email archive entries owned by the specified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of BccEmailArchiveList</returns>
        System.Threading.Tasks.Task<BccEmailArchiveList> GetBCCEmailArchiveListAsync(string accountId, EmailArchiveApi.GetBCCEmailArchiveListOptions options = null);

        /// <summary>
        /// Get the blind carbon copy email archive entries owned by the specified account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (BccEmailArchiveList)</returns>
        System.Threading.Tasks.Task<ApiResponse<BccEmailArchiveList>> GetBCCEmailArchiveListAsyncWithHttpInfo(string accountId, EmailArchiveApi.GetBCCEmailArchiveListOptions options = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailArchiveApi : IEmailArchiveApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailArchiveApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public EmailArchiveApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Creates a blind carbon copy email archive entry 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchive"> (optional)</param>
        /// <returns>BccEmailArchive</returns>
        public BccEmailArchive CreateBCCEmailArchive(string accountId, BccEmailArchive bccEmailArchive = null)
        {
             ApiResponse<BccEmailArchive> localVarResponse = CreateBCCEmailArchiveWithHttpInfo(accountId, bccEmailArchive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a blind carbon copy email archive entry 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchive"> (optional)</param>
        /// <returns>ApiResponse of BccEmailArchive</returns>
        public ApiResponse<BccEmailArchive> CreateBCCEmailArchiveWithHttpInfo(string accountId, BccEmailArchive bccEmailArchive = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EmailArchiveApi->CreateBCCEmailArchive");

            var localVarPath = "/v2.1/accounts/{accountId}/settings/bcc_email_archives";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (bccEmailArchive != null && bccEmailArchive.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(bccEmailArchive); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bccEmailArchive; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBCCEmailArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<BccEmailArchive>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (BccEmailArchive)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(BccEmailArchive)));
            }
            else
            {
                return new ApiResponse<BccEmailArchive>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (BccEmailArchive)this.ApiClient.Deserialize(localVarResponse, typeof(BccEmailArchive)));
            }
            
        }

        /// <summary>
        /// Creates a blind carbon copy email archive entry 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchive"> (optional)</param>
        /// <returns>Task of BccEmailArchive</returns>
        public async System.Threading.Tasks.Task<BccEmailArchive> CreateBCCEmailArchiveAsync(string accountId, BccEmailArchive bccEmailArchive = null)
        {
             ApiResponse<BccEmailArchive> localVarResponse = await CreateBCCEmailArchiveAsyncWithHttpInfo(accountId, bccEmailArchive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a blind carbon copy email archive entry 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchive"> (optional)</param>
        /// <returns>Task of ApiResponse (BccEmailArchive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BccEmailArchive>> CreateBCCEmailArchiveAsyncWithHttpInfo(string accountId, BccEmailArchive bccEmailArchive = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EmailArchiveApi->CreateBCCEmailArchive");

            var localVarPath = "/v2.1/accounts/{accountId}/settings/bcc_email_archives";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (bccEmailArchive != null && bccEmailArchive.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(bccEmailArchive); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bccEmailArchive; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBCCEmailArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BccEmailArchive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BccEmailArchive)this.ApiClient.Deserialize(localVarResponse, typeof(BccEmailArchive)));
            
        }



        /// <summary>
        /// Delete a blind carbon copy email archive for an account. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <returns></returns>
        public void DeleteBCCEmailArchive(string accountId, string bccEmailArchiveId)
        {
             DeleteBCCEmailArchiveWithHttpInfo(accountId, bccEmailArchiveId);
        }

        /// <summary>
        /// Delete a blind carbon copy email archive for an account. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBCCEmailArchiveWithHttpInfo(string accountId, string bccEmailArchiveId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EmailArchiveApi->DeleteBCCEmailArchive");
            // verify the required parameter 'bccEmailArchiveId' is set
            if (bccEmailArchiveId == null)
                throw new ApiException(400, "Missing required parameter 'bccEmailArchiveId' when calling EmailArchiveApi->DeleteBCCEmailArchive");

            var localVarPath = "/v2.1/accounts/{accountId}/settings/bcc_email_archives/{bccEmailArchiveId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (bccEmailArchiveId != null) localVarPathParams.Add("bccEmailArchiveId", this.ApiClient.ParameterToString(bccEmailArchiveId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBCCEmailArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a blind carbon copy email archive for an account. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBCCEmailArchiveAsync(string accountId, string bccEmailArchiveId)
        {
             await DeleteBCCEmailArchiveAsyncWithHttpInfo(accountId, bccEmailArchiveId);
        }

        /// <summary>
        /// Delete a blind carbon copy email archive for an account. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBCCEmailArchiveAsyncWithHttpInfo(string accountId, string bccEmailArchiveId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EmailArchiveApi->DeleteBCCEmailArchive");
            // verify the required parameter 'bccEmailArchiveId' is set
            if (bccEmailArchiveId == null)
                throw new ApiException(400, "Missing required parameter 'bccEmailArchiveId' when calling EmailArchiveApi->DeleteBCCEmailArchive");

            var localVarPath = "/v2.1/accounts/{accountId}/settings/bcc_email_archives/{bccEmailArchiveId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (bccEmailArchiveId != null) localVarPathParams.Add("bccEmailArchiveId", this.ApiClient.ParameterToString(bccEmailArchiveId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBCCEmailArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }


        /// <summary>
        /// Get the blind carbon copy email archive history entries for the specified archive 
        /// </summary>
        public class GetBCCEmailArchiveHistoryListOptions
        {
            /// 
            public string count {get; set;}
            /// 
            public string startPosition {get; set;}
        }

        /// <summary>
        /// Get the blind carbon copy email archive history entries for the specified archive 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>BccEmailArchiveHistoryList</returns>
        public BccEmailArchiveHistoryList GetBCCEmailArchiveHistoryList(string accountId, string bccEmailArchiveId, EmailArchiveApi.GetBCCEmailArchiveHistoryListOptions options = null)
        {
             ApiResponse<BccEmailArchiveHistoryList> localVarResponse = GetBCCEmailArchiveHistoryListWithHttpInfo(accountId, bccEmailArchiveId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the blind carbon copy email archive history entries for the specified archive 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of BccEmailArchiveHistoryList</returns>
        public ApiResponse<BccEmailArchiveHistoryList> GetBCCEmailArchiveHistoryListWithHttpInfo(string accountId, string bccEmailArchiveId, EmailArchiveApi.GetBCCEmailArchiveHistoryListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EmailArchiveApi->GetBCCEmailArchiveHistoryList");
            // verify the required parameter 'bccEmailArchiveId' is set
            if (bccEmailArchiveId == null)
                throw new ApiException(400, "Missing required parameter 'bccEmailArchiveId' when calling EmailArchiveApi->GetBCCEmailArchiveHistoryList");

            var localVarPath = "/v2.1/accounts/{accountId}/settings/bcc_email_archives/{bccEmailArchiveId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (bccEmailArchiveId != null) localVarPathParams.Add("bccEmailArchiveId", this.ApiClient.ParameterToString(bccEmailArchiveId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBCCEmailArchiveHistoryList", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<BccEmailArchiveHistoryList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (BccEmailArchiveHistoryList)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(BccEmailArchiveHistoryList)));
            }
            else
            {
                return new ApiResponse<BccEmailArchiveHistoryList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (BccEmailArchiveHistoryList)this.ApiClient.Deserialize(localVarResponse, typeof(BccEmailArchiveHistoryList)));
            }
            
        }

        /// <summary>
        /// Get the blind carbon copy email archive history entries for the specified archive 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of BccEmailArchiveHistoryList</returns>
        public async System.Threading.Tasks.Task<BccEmailArchiveHistoryList> GetBCCEmailArchiveHistoryListAsync(string accountId, string bccEmailArchiveId, EmailArchiveApi.GetBCCEmailArchiveHistoryListOptions options = null)
        {
             ApiResponse<BccEmailArchiveHistoryList> localVarResponse = await GetBCCEmailArchiveHistoryListAsyncWithHttpInfo(accountId, bccEmailArchiveId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the blind carbon copy email archive history entries for the specified archive 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="bccEmailArchiveId"></param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (BccEmailArchiveHistoryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BccEmailArchiveHistoryList>> GetBCCEmailArchiveHistoryListAsyncWithHttpInfo(string accountId, string bccEmailArchiveId, EmailArchiveApi.GetBCCEmailArchiveHistoryListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EmailArchiveApi->GetBCCEmailArchiveHistoryList");
            // verify the required parameter 'bccEmailArchiveId' is set
            if (bccEmailArchiveId == null)
                throw new ApiException(400, "Missing required parameter 'bccEmailArchiveId' when calling EmailArchiveApi->GetBCCEmailArchiveHistoryList");

            var localVarPath = "/v2.1/accounts/{accountId}/settings/bcc_email_archives/{bccEmailArchiveId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (bccEmailArchiveId != null) localVarPathParams.Add("bccEmailArchiveId", this.ApiClient.ParameterToString(bccEmailArchiveId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBCCEmailArchiveHistoryList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BccEmailArchiveHistoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BccEmailArchiveHistoryList)this.ApiClient.Deserialize(localVarResponse, typeof(BccEmailArchiveHistoryList)));
            
        }


        /// <summary>
        /// Get the blind carbon copy email archive entries owned by the specified account 
        /// </summary>
        public class GetBCCEmailArchiveListOptions
        {
            /// 
            public string count {get; set;}
            /// 
            public string startPosition {get; set;}
        }

        /// <summary>
        /// Get the blind carbon copy email archive entries owned by the specified account 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>BccEmailArchiveList</returns>
        public BccEmailArchiveList GetBCCEmailArchiveList(string accountId, EmailArchiveApi.GetBCCEmailArchiveListOptions options = null)
        {
             ApiResponse<BccEmailArchiveList> localVarResponse = GetBCCEmailArchiveListWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the blind carbon copy email archive entries owned by the specified account 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of BccEmailArchiveList</returns>
        public ApiResponse<BccEmailArchiveList> GetBCCEmailArchiveListWithHttpInfo(string accountId, EmailArchiveApi.GetBCCEmailArchiveListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EmailArchiveApi->GetBCCEmailArchiveList");

            var localVarPath = "/v2.1/accounts/{accountId}/settings/bcc_email_archives";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBCCEmailArchiveList", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<BccEmailArchiveList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (BccEmailArchiveList)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(BccEmailArchiveList)));
            }
            else
            {
                return new ApiResponse<BccEmailArchiveList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), (BccEmailArchiveList)this.ApiClient.Deserialize(localVarResponse, typeof(BccEmailArchiveList)));
            }
            
        }

        /// <summary>
        /// Get the blind carbon copy email archive entries owned by the specified account 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of BccEmailArchiveList</returns>
        public async System.Threading.Tasks.Task<BccEmailArchiveList> GetBCCEmailArchiveListAsync(string accountId, EmailArchiveApi.GetBCCEmailArchiveListOptions options = null)
        {
             ApiResponse<BccEmailArchiveList> localVarResponse = await GetBCCEmailArchiveListAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the blind carbon copy email archive entries owned by the specified account 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (BccEmailArchiveList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BccEmailArchiveList>> GetBCCEmailArchiveListAsyncWithHttpInfo(string accountId, EmailArchiveApi.GetBCCEmailArchiveListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EmailArchiveApi->GetBCCEmailArchiveList");

            var localVarPath = "/v2.1/accounts/{accountId}/settings/bcc_email_archives";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBCCEmailArchiveList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BccEmailArchiveList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BccEmailArchiveList)this.ApiClient.Deserialize(localVarResponse, typeof(BccEmailArchiveList)));
            
        }

    }
}