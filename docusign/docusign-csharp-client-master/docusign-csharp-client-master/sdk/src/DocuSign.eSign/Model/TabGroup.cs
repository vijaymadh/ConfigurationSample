/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// TabGroup
    /// </summary>
    [DataContract]
    public partial class TabGroup :  IEquatable<TabGroup>, IValidatableObject
    {
        public TabGroup()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TabGroup" /> class.
        /// </summary>
        /// <param name="ChildTabLabels">.</param>
        /// <param name="ChildTabLabelsMetadata">ChildTabLabelsMetadata.</param>
        /// <param name="ErrorDetails">ErrorDetails.</param>
        /// <param name="GroupLabel">.</param>
        /// <param name="GroupLabelMetadata">GroupLabelMetadata.</param>
        /// <param name="GroupRule">.</param>
        /// <param name="GroupRuleMetadata">GroupRuleMetadata.</param>
        /// <param name="MaximumAllowed">.</param>
        /// <param name="MaximumAllowedMetadata">MaximumAllowedMetadata.</param>
        /// <param name="MinimumRequired">.</param>
        /// <param name="MinimumRequiredMetadata">MinimumRequiredMetadata.</param>
        /// <param name="RecipientId">Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document..</param>
        /// <param name="RecipientIdMetadata">RecipientIdMetadata.</param>
        /// <param name="TabId">The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     .</param>
        /// <param name="TabIdMetadata">TabIdMetadata.</param>
        /// <param name="TemplateLocked">When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. .</param>
        /// <param name="TemplateLockedMetadata">TemplateLockedMetadata.</param>
        /// <param name="TemplateRequired">When set to **true**, the sender may not remove the recipient. Used only when working with template recipients..</param>
        /// <param name="TemplateRequiredMetadata">TemplateRequiredMetadata.</param>
        /// <param name="ValidationMessage">The message displayed if the custom tab fails input validation (either custom of embedded)..</param>
        /// <param name="ValidationMessageMetadata">ValidationMessageMetadata.</param>
        public TabGroup(List<string> ChildTabLabels = default(List<string>), PropertyMetadata ChildTabLabelsMetadata = default(PropertyMetadata), ErrorDetails ErrorDetails = default(ErrorDetails), string GroupLabel = default(string), PropertyMetadata GroupLabelMetadata = default(PropertyMetadata), string GroupRule = default(string), PropertyMetadata GroupRuleMetadata = default(PropertyMetadata), string MaximumAllowed = default(string), PropertyMetadata MaximumAllowedMetadata = default(PropertyMetadata), string MinimumRequired = default(string), PropertyMetadata MinimumRequiredMetadata = default(PropertyMetadata), string RecipientId = default(string), PropertyMetadata RecipientIdMetadata = default(PropertyMetadata), string TabId = default(string), PropertyMetadata TabIdMetadata = default(PropertyMetadata), string TemplateLocked = default(string), PropertyMetadata TemplateLockedMetadata = default(PropertyMetadata), string TemplateRequired = default(string), PropertyMetadata TemplateRequiredMetadata = default(PropertyMetadata), string ValidationMessage = default(string), PropertyMetadata ValidationMessageMetadata = default(PropertyMetadata))
        {
            this.ChildTabLabels = ChildTabLabels;
            this.ChildTabLabelsMetadata = ChildTabLabelsMetadata;
            this.ErrorDetails = ErrorDetails;
            this.GroupLabel = GroupLabel;
            this.GroupLabelMetadata = GroupLabelMetadata;
            this.GroupRule = GroupRule;
            this.GroupRuleMetadata = GroupRuleMetadata;
            this.MaximumAllowed = MaximumAllowed;
            this.MaximumAllowedMetadata = MaximumAllowedMetadata;
            this.MinimumRequired = MinimumRequired;
            this.MinimumRequiredMetadata = MinimumRequiredMetadata;
            this.RecipientId = RecipientId;
            this.RecipientIdMetadata = RecipientIdMetadata;
            this.TabId = TabId;
            this.TabIdMetadata = TabIdMetadata;
            this.TemplateLocked = TemplateLocked;
            this.TemplateLockedMetadata = TemplateLockedMetadata;
            this.TemplateRequired = TemplateRequired;
            this.TemplateRequiredMetadata = TemplateRequiredMetadata;
            this.ValidationMessage = ValidationMessage;
            this.ValidationMessageMetadata = ValidationMessageMetadata;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="childTabLabels", EmitDefaultValue=false)]
        public List<string> ChildTabLabels { get; set; }
        /// <summary>
        /// Gets or Sets ChildTabLabelsMetadata
        /// </summary>
        [DataMember(Name="childTabLabelsMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ChildTabLabelsMetadata { get; set; }
        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="groupLabel", EmitDefaultValue=false)]
        public string GroupLabel { get; set; }
        /// <summary>
        /// Gets or Sets GroupLabelMetadata
        /// </summary>
        [DataMember(Name="groupLabelMetadata", EmitDefaultValue=false)]
        public PropertyMetadata GroupLabelMetadata { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="groupRule", EmitDefaultValue=false)]
        public string GroupRule { get; set; }
        /// <summary>
        /// Gets or Sets GroupRuleMetadata
        /// </summary>
        [DataMember(Name="groupRuleMetadata", EmitDefaultValue=false)]
        public PropertyMetadata GroupRuleMetadata { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="maximumAllowed", EmitDefaultValue=false)]
        public string MaximumAllowed { get; set; }
        /// <summary>
        /// Gets or Sets MaximumAllowedMetadata
        /// </summary>
        [DataMember(Name="maximumAllowedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata MaximumAllowedMetadata { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="minimumRequired", EmitDefaultValue=false)]
        public string MinimumRequired { get; set; }
        /// <summary>
        /// Gets or Sets MinimumRequiredMetadata
        /// </summary>
        [DataMember(Name="minimumRequiredMetadata", EmitDefaultValue=false)]
        public PropertyMetadata MinimumRequiredMetadata { get; set; }
        /// <summary>
        /// Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
        /// </summary>
        /// <value>Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.</value>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; set; }
        /// <summary>
        /// Gets or Sets RecipientIdMetadata
        /// </summary>
        [DataMember(Name="recipientIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RecipientIdMetadata { get; set; }
        /// <summary>
        /// The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     
        /// </summary>
        /// <value>The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     </value>
        [DataMember(Name="tabId", EmitDefaultValue=false)]
        public string TabId { get; set; }
        /// <summary>
        /// Gets or Sets TabIdMetadata
        /// </summary>
        [DataMember(Name="tabIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabIdMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
        /// </summary>
        /// <value>When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. </value>
        [DataMember(Name="templateLocked", EmitDefaultValue=false)]
        public string TemplateLocked { get; set; }
        /// <summary>
        /// Gets or Sets TemplateLockedMetadata
        /// </summary>
        [DataMember(Name="templateLockedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TemplateLockedMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
        /// </summary>
        /// <value>When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.</value>
        [DataMember(Name="templateRequired", EmitDefaultValue=false)]
        public string TemplateRequired { get; set; }
        /// <summary>
        /// Gets or Sets TemplateRequiredMetadata
        /// </summary>
        [DataMember(Name="templateRequiredMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TemplateRequiredMetadata { get; set; }
        /// <summary>
        /// The message displayed if the custom tab fails input validation (either custom of embedded).
        /// </summary>
        /// <value>The message displayed if the custom tab fails input validation (either custom of embedded).</value>
        [DataMember(Name="validationMessage", EmitDefaultValue=false)]
        public string ValidationMessage { get; set; }
        /// <summary>
        /// Gets or Sets ValidationMessageMetadata
        /// </summary>
        [DataMember(Name="validationMessageMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ValidationMessageMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TabGroup {\n");
            sb.Append("  ChildTabLabels: ").Append(ChildTabLabels).Append("\n");
            sb.Append("  ChildTabLabelsMetadata: ").Append(ChildTabLabelsMetadata).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  GroupLabel: ").Append(GroupLabel).Append("\n");
            sb.Append("  GroupLabelMetadata: ").Append(GroupLabelMetadata).Append("\n");
            sb.Append("  GroupRule: ").Append(GroupRule).Append("\n");
            sb.Append("  GroupRuleMetadata: ").Append(GroupRuleMetadata).Append("\n");
            sb.Append("  MaximumAllowed: ").Append(MaximumAllowed).Append("\n");
            sb.Append("  MaximumAllowedMetadata: ").Append(MaximumAllowedMetadata).Append("\n");
            sb.Append("  MinimumRequired: ").Append(MinimumRequired).Append("\n");
            sb.Append("  MinimumRequiredMetadata: ").Append(MinimumRequiredMetadata).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  RecipientIdMetadata: ").Append(RecipientIdMetadata).Append("\n");
            sb.Append("  TabId: ").Append(TabId).Append("\n");
            sb.Append("  TabIdMetadata: ").Append(TabIdMetadata).Append("\n");
            sb.Append("  TemplateLocked: ").Append(TemplateLocked).Append("\n");
            sb.Append("  TemplateLockedMetadata: ").Append(TemplateLockedMetadata).Append("\n");
            sb.Append("  TemplateRequired: ").Append(TemplateRequired).Append("\n");
            sb.Append("  TemplateRequiredMetadata: ").Append(TemplateRequiredMetadata).Append("\n");
            sb.Append("  ValidationMessage: ").Append(ValidationMessage).Append("\n");
            sb.Append("  ValidationMessageMetadata: ").Append(ValidationMessageMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TabGroup);
        }

        /// <summary>
        /// Returns true if TabGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of TabGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TabGroup other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChildTabLabels == other.ChildTabLabels ||
                    this.ChildTabLabels != null &&
                    this.ChildTabLabels.SequenceEqual(other.ChildTabLabels)
                ) && 
                (
                    this.ChildTabLabelsMetadata == other.ChildTabLabelsMetadata ||
                    this.ChildTabLabelsMetadata != null &&
                    this.ChildTabLabelsMetadata.Equals(other.ChildTabLabelsMetadata)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.GroupLabel == other.GroupLabel ||
                    this.GroupLabel != null &&
                    this.GroupLabel.Equals(other.GroupLabel)
                ) && 
                (
                    this.GroupLabelMetadata == other.GroupLabelMetadata ||
                    this.GroupLabelMetadata != null &&
                    this.GroupLabelMetadata.Equals(other.GroupLabelMetadata)
                ) && 
                (
                    this.GroupRule == other.GroupRule ||
                    this.GroupRule != null &&
                    this.GroupRule.Equals(other.GroupRule)
                ) && 
                (
                    this.GroupRuleMetadata == other.GroupRuleMetadata ||
                    this.GroupRuleMetadata != null &&
                    this.GroupRuleMetadata.Equals(other.GroupRuleMetadata)
                ) && 
                (
                    this.MaximumAllowed == other.MaximumAllowed ||
                    this.MaximumAllowed != null &&
                    this.MaximumAllowed.Equals(other.MaximumAllowed)
                ) && 
                (
                    this.MaximumAllowedMetadata == other.MaximumAllowedMetadata ||
                    this.MaximumAllowedMetadata != null &&
                    this.MaximumAllowedMetadata.Equals(other.MaximumAllowedMetadata)
                ) && 
                (
                    this.MinimumRequired == other.MinimumRequired ||
                    this.MinimumRequired != null &&
                    this.MinimumRequired.Equals(other.MinimumRequired)
                ) && 
                (
                    this.MinimumRequiredMetadata == other.MinimumRequiredMetadata ||
                    this.MinimumRequiredMetadata != null &&
                    this.MinimumRequiredMetadata.Equals(other.MinimumRequiredMetadata)
                ) && 
                (
                    this.RecipientId == other.RecipientId ||
                    this.RecipientId != null &&
                    this.RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    this.RecipientIdMetadata == other.RecipientIdMetadata ||
                    this.RecipientIdMetadata != null &&
                    this.RecipientIdMetadata.Equals(other.RecipientIdMetadata)
                ) && 
                (
                    this.TabId == other.TabId ||
                    this.TabId != null &&
                    this.TabId.Equals(other.TabId)
                ) && 
                (
                    this.TabIdMetadata == other.TabIdMetadata ||
                    this.TabIdMetadata != null &&
                    this.TabIdMetadata.Equals(other.TabIdMetadata)
                ) && 
                (
                    this.TemplateLocked == other.TemplateLocked ||
                    this.TemplateLocked != null &&
                    this.TemplateLocked.Equals(other.TemplateLocked)
                ) && 
                (
                    this.TemplateLockedMetadata == other.TemplateLockedMetadata ||
                    this.TemplateLockedMetadata != null &&
                    this.TemplateLockedMetadata.Equals(other.TemplateLockedMetadata)
                ) && 
                (
                    this.TemplateRequired == other.TemplateRequired ||
                    this.TemplateRequired != null &&
                    this.TemplateRequired.Equals(other.TemplateRequired)
                ) && 
                (
                    this.TemplateRequiredMetadata == other.TemplateRequiredMetadata ||
                    this.TemplateRequiredMetadata != null &&
                    this.TemplateRequiredMetadata.Equals(other.TemplateRequiredMetadata)
                ) && 
                (
                    this.ValidationMessage == other.ValidationMessage ||
                    this.ValidationMessage != null &&
                    this.ValidationMessage.Equals(other.ValidationMessage)
                ) && 
                (
                    this.ValidationMessageMetadata == other.ValidationMessageMetadata ||
                    this.ValidationMessageMetadata != null &&
                    this.ValidationMessageMetadata.Equals(other.ValidationMessageMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChildTabLabels != null)
                    hash = hash * 59 + this.ChildTabLabels.GetHashCode();
                if (this.ChildTabLabelsMetadata != null)
                    hash = hash * 59 + this.ChildTabLabelsMetadata.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.GroupLabel != null)
                    hash = hash * 59 + this.GroupLabel.GetHashCode();
                if (this.GroupLabelMetadata != null)
                    hash = hash * 59 + this.GroupLabelMetadata.GetHashCode();
                if (this.GroupRule != null)
                    hash = hash * 59 + this.GroupRule.GetHashCode();
                if (this.GroupRuleMetadata != null)
                    hash = hash * 59 + this.GroupRuleMetadata.GetHashCode();
                if (this.MaximumAllowed != null)
                    hash = hash * 59 + this.MaximumAllowed.GetHashCode();
                if (this.MaximumAllowedMetadata != null)
                    hash = hash * 59 + this.MaximumAllowedMetadata.GetHashCode();
                if (this.MinimumRequired != null)
                    hash = hash * 59 + this.MinimumRequired.GetHashCode();
                if (this.MinimumRequiredMetadata != null)
                    hash = hash * 59 + this.MinimumRequiredMetadata.GetHashCode();
                if (this.RecipientId != null)
                    hash = hash * 59 + this.RecipientId.GetHashCode();
                if (this.RecipientIdMetadata != null)
                    hash = hash * 59 + this.RecipientIdMetadata.GetHashCode();
                if (this.TabId != null)
                    hash = hash * 59 + this.TabId.GetHashCode();
                if (this.TabIdMetadata != null)
                    hash = hash * 59 + this.TabIdMetadata.GetHashCode();
                if (this.TemplateLocked != null)
                    hash = hash * 59 + this.TemplateLocked.GetHashCode();
                if (this.TemplateLockedMetadata != null)
                    hash = hash * 59 + this.TemplateLockedMetadata.GetHashCode();
                if (this.TemplateRequired != null)
                    hash = hash * 59 + this.TemplateRequired.GetHashCode();
                if (this.TemplateRequiredMetadata != null)
                    hash = hash * 59 + this.TemplateRequiredMetadata.GetHashCode();
                if (this.ValidationMessage != null)
                    hash = hash * 59 + this.ValidationMessage.GetHashCode();
                if (this.ValidationMessageMetadata != null)
                    hash = hash * 59 + this.ValidationMessageMetadata.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
