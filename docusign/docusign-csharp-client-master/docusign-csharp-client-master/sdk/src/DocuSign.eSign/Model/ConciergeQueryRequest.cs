/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ConciergeQueryRequest
    /// </summary>
    [DataContract]
    public partial class ConciergeQueryRequest :  IEquatable<ConciergeQueryRequest>, IValidatableObject
    {
        public ConciergeQueryRequest()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConciergeQueryRequest" /> class.
        /// </summary>
        /// <param name="AccountManagementRepCountry">.</param>
        /// <param name="ContractCountry">.</param>
        /// <param name="PlanId">.</param>
        /// <param name="Region">.</param>
        /// <param name="ShippingCountry">.</param>
        public ConciergeQueryRequest(string AccountManagementRepCountry = default(string), string ContractCountry = default(string), string PlanId = default(string), string Region = default(string), string ShippingCountry = default(string))
        {
            this.AccountManagementRepCountry = AccountManagementRepCountry;
            this.ContractCountry = ContractCountry;
            this.PlanId = PlanId;
            this.Region = Region;
            this.ShippingCountry = ShippingCountry;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="accountManagementRepCountry", EmitDefaultValue=false)]
        public string AccountManagementRepCountry { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="contractCountry", EmitDefaultValue=false)]
        public string ContractCountry { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="planId", EmitDefaultValue=false)]
        public string PlanId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="shippingCountry", EmitDefaultValue=false)]
        public string ShippingCountry { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConciergeQueryRequest {\n");
            sb.Append("  AccountManagementRepCountry: ").Append(AccountManagementRepCountry).Append("\n");
            sb.Append("  ContractCountry: ").Append(ContractCountry).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  ShippingCountry: ").Append(ShippingCountry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConciergeQueryRequest);
        }

        /// <summary>
        /// Returns true if ConciergeQueryRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ConciergeQueryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConciergeQueryRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountManagementRepCountry == other.AccountManagementRepCountry ||
                    this.AccountManagementRepCountry != null &&
                    this.AccountManagementRepCountry.Equals(other.AccountManagementRepCountry)
                ) && 
                (
                    this.ContractCountry == other.ContractCountry ||
                    this.ContractCountry != null &&
                    this.ContractCountry.Equals(other.ContractCountry)
                ) && 
                (
                    this.PlanId == other.PlanId ||
                    this.PlanId != null &&
                    this.PlanId.Equals(other.PlanId)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.ShippingCountry == other.ShippingCountry ||
                    this.ShippingCountry != null &&
                    this.ShippingCountry.Equals(other.ShippingCountry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountManagementRepCountry != null)
                    hash = hash * 59 + this.AccountManagementRepCountry.GetHashCode();
                if (this.ContractCountry != null)
                    hash = hash * 59 + this.ContractCountry.GetHashCode();
                if (this.PlanId != null)
                    hash = hash * 59 + this.PlanId.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.ShippingCountry != null)
                    hash = hash * 59 + this.ShippingCountry.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
