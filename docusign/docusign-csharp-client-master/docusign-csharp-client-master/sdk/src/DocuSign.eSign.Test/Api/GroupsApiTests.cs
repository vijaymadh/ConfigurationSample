/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using DocuSign.eSign.Client;
using DocuSign.eSign.Api;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Test
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GroupsApiTests
    {
        private GroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GroupsApi
            //Assert.IsInstanceOfType(typeof(GroupsApi), instance, "instance is a GroupsApi");
        }

        
        /// <summary>
        /// Test CreateGroups
        /// </summary>
        [Test]
        public void CreateGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupInformation groupInformation = null;
            //string accountId = null;
            //var response = instance.CreateGroups(groupInformation, accountId);
            //Assert.IsInstanceOf<GroupInformation> (response, "response is GroupInformation");
        }
        
        /// <summary>
        /// Test DeleteBrands
        /// </summary>
        [Test]
        public void DeleteBrandsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrandsRequest brandsRequest = null;
            //string accountId = null;
            //string groupId = null;
            //var response = instance.DeleteBrands(brandsRequest, accountId, groupId);
            //Assert.IsInstanceOf<BrandsResponse> (response, "response is BrandsResponse");
        }
        
        /// <summary>
        /// Test DeleteGroupUsers
        /// </summary>
        [Test]
        public void DeleteGroupUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserInfoList userInfoList = null;
            //string accountId = null;
            //string groupId = null;
            //var response = instance.DeleteGroupUsers(userInfoList, accountId, groupId);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
        /// <summary>
        /// Test DeleteGroups
        /// </summary>
        [Test]
        public void DeleteGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupInformation groupInformation = null;
            //string accountId = null;
            //var response = instance.DeleteGroups(groupInformation, accountId);
            //Assert.IsInstanceOf<GroupInformation> (response, "response is GroupInformation");
        }
        
        /// <summary>
        /// Test GetBrands
        /// </summary>
        [Test]
        public void GetBrandsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string groupId = null;
            //var response = instance.GetBrands(accountId, groupId);
            //Assert.IsInstanceOf<BrandsResponse> (response, "response is BrandsResponse");
        }
        
        /// <summary>
        /// Test ListGroupUsers
        /// </summary>
        [Test]
        public void ListGroupUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string count = null;
            //string startPosition = null;
            //string accountId = null;
            //string groupId = null;
            //var response = instance.ListGroupUsers(count, startPosition, accountId, groupId);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
        /// <summary>
        /// Test ListGroups
        /// </summary>
        [Test]
        public void ListGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string count = null;
            //string groupName = null;
            //string groupType = null;
            //string searchText = null;
            //string startPosition = null;
            //string accountId = null;
            //var response = instance.ListGroups(count, groupName, groupType, searchText, startPosition, accountId);
            //Assert.IsInstanceOf<GroupInformation> (response, "response is GroupInformation");
        }
        
        /// <summary>
        /// Test UpdateBrands
        /// </summary>
        [Test]
        public void UpdateBrandsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrandsRequest brandsRequest = null;
            //string accountId = null;
            //string groupId = null;
            //var response = instance.UpdateBrands(brandsRequest, accountId, groupId);
            //Assert.IsInstanceOf<BrandsResponse> (response, "response is BrandsResponse");
        }
        
        /// <summary>
        /// Test UpdateGroupUsers
        /// </summary>
        [Test]
        public void UpdateGroupUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserInfoList userInfoList = null;
            //string accountId = null;
            //string groupId = null;
            //var response = instance.UpdateGroupUsers(userInfoList, accountId, groupId);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
        /// <summary>
        /// Test UpdateGroups
        /// </summary>
        [Test]
        public void UpdateGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupInformation groupInformation = null;
            //string accountId = null;
            //var response = instance.UpdateGroups(groupInformation, accountId);
            //Assert.IsInstanceOf<GroupInformation> (response, "response is GroupInformation");
        }
        
    }

}
