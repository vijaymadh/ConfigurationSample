/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using DocuSign.eSign.Client;
using DocuSign.eSign.Api;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Test
{
    /// <summary>
    ///  Class for testing TemplatesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TemplatesApiTests
    {
        private TemplatesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TemplatesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TemplatesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TemplatesApi
            //Assert.IsInstanceOfType(typeof(TemplatesApi), instance, "instance is a TemplatesApi");
        }

        
        /// <summary>
        /// Test CreateCustomFields
        /// </summary>
        [Test]
        public void CreateCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateCustomFields templateCustomFields = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.CreateCustomFields(templateCustomFields, accountId, templateId);
            //Assert.IsInstanceOf<CustomFields> (response, "response is CustomFields");
        }
        
        /// <summary>
        /// Test CreateDocumentFields
        /// </summary>
        [Test]
        public void CreateDocumentFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentFieldsInformation documentFieldsInformation = null;
            //string accountId = null;
            //string templateId = null;
            //string documentId = null;
            //var response = instance.CreateDocumentFields(documentFieldsInformation, accountId, templateId, documentId);
            //Assert.IsInstanceOf<DocumentFieldsInformation> (response, "response is DocumentFieldsInformation");
        }
        
        /// <summary>
        /// Test CreateEditView
        /// </summary>
        [Test]
        public void CreateEditViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReturnUrlRequest returnUrlRequest = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.CreateEditView(returnUrlRequest, accountId, templateId);
            //Assert.IsInstanceOf<ViewUrl> (response, "response is ViewUrl");
        }
        
        /// <summary>
        /// Test CreateLock
        /// </summary>
        [Test]
        public void CreateLockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LockRequest lockRequest = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.CreateLock(lockRequest, accountId, templateId);
            //Assert.IsInstanceOf<LockInformation> (response, "response is LockInformation");
        }
        
        /// <summary>
        /// Test CreateRecipients
        /// </summary>
        [Test]
        public void CreateRecipientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resendEnvelope = null;
            //TemplateRecipients templateRecipients = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.CreateRecipients(resendEnvelope, templateRecipients, accountId, templateId);
            //Assert.IsInstanceOf<Recipients> (response, "response is Recipients");
        }
        
        /// <summary>
        /// Test CreateTabs
        /// </summary>
        [Test]
        public void CreateTabsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateTabs templateTabs = null;
            //string accountId = null;
            //string templateId = null;
            //string recipientId = null;
            //var response = instance.CreateTabs(templateTabs, accountId, templateId, recipientId);
            //Assert.IsInstanceOf<Tabs> (response, "response is Tabs");
        }
        
        /// <summary>
        /// Test CreateTemplate
        /// </summary>
        [Test]
        public void CreateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EnvelopeTemplate envelopeTemplate = null;
            //string accountId = null;
            //var response = instance.CreateTemplate(envelopeTemplate, accountId);
            //Assert.IsInstanceOf<TemplateSummary> (response, "response is TemplateSummary");
        }
        
        /// <summary>
        /// Test DeleteBulkRecipients
        /// </summary>
        [Test]
        public void DeleteBulkRecipientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //string recipientId = null;
            //var response = instance.DeleteBulkRecipients(accountId, templateId, recipientId);
            //Assert.IsInstanceOf<BulkRecipientsUpdateResponse> (response, "response is BulkRecipientsUpdateResponse");
        }
        
        /// <summary>
        /// Test DeleteCustomFields
        /// </summary>
        [Test]
        public void DeleteCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateCustomFields templateCustomFields = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.DeleteCustomFields(templateCustomFields, accountId, templateId);
            //Assert.IsInstanceOf<CustomFields> (response, "response is CustomFields");
        }
        
        /// <summary>
        /// Test DeleteDocumentFields
        /// </summary>
        [Test]
        public void DeleteDocumentFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentFieldsInformation documentFieldsInformation = null;
            //string accountId = null;
            //string templateId = null;
            //string documentId = null;
            //var response = instance.DeleteDocumentFields(documentFieldsInformation, accountId, templateId, documentId);
            //Assert.IsInstanceOf<DocumentFieldsInformation> (response, "response is DocumentFieldsInformation");
        }
        
        /// <summary>
        /// Test DeleteDocumentPage
        /// </summary>
        [Test]
        public void DeleteDocumentPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PageRequest pageRequest = null;
            //string accountId = null;
            //string templateId = null;
            //string documentId = null;
            //string pageNumber = null;
            //instance.DeleteDocumentPage(pageRequest, accountId, templateId, documentId, pageNumber);
            
        }
        
        /// <summary>
        /// Test DeleteDocuments
        /// </summary>
        [Test]
        public void DeleteDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EnvelopeDefinition envelopeDefinition = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.DeleteDocuments(envelopeDefinition, accountId, templateId);
            //Assert.IsInstanceOf<TemplateDocumentsResult> (response, "response is TemplateDocumentsResult");
        }
        
        /// <summary>
        /// Test DeleteGroupShare
        /// </summary>
        [Test]
        public void DeleteGroupShareTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupInformation groupInformation = null;
            //string accountId = null;
            //string templateId = null;
            //string templatePart = null;
            //var response = instance.DeleteGroupShare(groupInformation, accountId, templateId, templatePart);
            //Assert.IsInstanceOf<GroupInformation> (response, "response is GroupInformation");
        }
        
        /// <summary>
        /// Test DeleteLock
        /// </summary>
        [Test]
        public void DeleteLockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LockRequest lockRequest = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.DeleteLock(lockRequest, accountId, templateId);
            //Assert.IsInstanceOf<LockInformation> (response, "response is LockInformation");
        }
        
        /// <summary>
        /// Test DeleteRecipient
        /// </summary>
        [Test]
        public void DeleteRecipientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateRecipients templateRecipients = null;
            //string accountId = null;
            //string templateId = null;
            //string recipientId = null;
            //var response = instance.DeleteRecipient(templateRecipients, accountId, templateId, recipientId);
            //Assert.IsInstanceOf<Recipients> (response, "response is Recipients");
        }
        
        /// <summary>
        /// Test DeleteRecipients
        /// </summary>
        [Test]
        public void DeleteRecipientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateRecipients templateRecipients = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.DeleteRecipients(templateRecipients, accountId, templateId);
            //Assert.IsInstanceOf<Recipients> (response, "response is Recipients");
        }
        
        /// <summary>
        /// Test DeleteTabs
        /// </summary>
        [Test]
        public void DeleteTabsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateTabs templateTabs = null;
            //string accountId = null;
            //string templateId = null;
            //string recipientId = null;
            //var response = instance.DeleteTabs(templateTabs, accountId, templateId, recipientId);
            //Assert.IsInstanceOf<Tabs> (response, "response is Tabs");
        }
        
        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string include = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.Get(include, accountId, templateId);
            //Assert.IsInstanceOf<EnvelopeTemplate> (response, "response is EnvelopeTemplate");
        }
        
        /// <summary>
        /// Test GetDocument
        /// </summary>
        [Test]
        public void GetDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string encrypt = null;
            //string showChanges = null;
            //string accountId = null;
            //string templateId = null;
            //string documentId = null;
            //var response = instance.GetDocument(encrypt, showChanges, accountId, templateId, documentId);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetDocumentPageImage
        /// </summary>
        [Test]
        public void GetDocumentPageImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dpi = null;
            //string maxHeight = null;
            //string maxWidth = null;
            //string showChanges = null;
            //string accountId = null;
            //string templateId = null;
            //string documentId = null;
            //string pageNumber = null;
            //var response = instance.GetDocumentPageImage(dpi, maxHeight, maxWidth, showChanges, accountId, templateId, documentId, pageNumber);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetLock
        /// </summary>
        [Test]
        public void GetLockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //var response = instance.GetLock(accountId, templateId);
            //Assert.IsInstanceOf<LockInformation> (response, "response is LockInformation");
        }
        
        /// <summary>
        /// Test GetNotificationSettings
        /// </summary>
        [Test]
        public void GetNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //var response = instance.GetNotificationSettings(accountId, templateId);
            //Assert.IsInstanceOf<Notification> (response, "response is Notification");
        }
        
        /// <summary>
        /// Test ListBulkRecipients
        /// </summary>
        [Test]
        public void ListBulkRecipientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string includeTabs = null;
            //string startPosition = null;
            //string accountId = null;
            //string templateId = null;
            //string recipientId = null;
            //var response = instance.ListBulkRecipients(includeTabs, startPosition, accountId, templateId, recipientId);
            //Assert.IsInstanceOf<BulkRecipientsResponse> (response, "response is BulkRecipientsResponse");
        }
        
        /// <summary>
        /// Test ListCustomFields
        /// </summary>
        [Test]
        public void ListCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //var response = instance.ListCustomFields(accountId, templateId);
            //Assert.IsInstanceOf<CustomFields> (response, "response is CustomFields");
        }
        
        /// <summary>
        /// Test ListDocumentFields
        /// </summary>
        [Test]
        public void ListDocumentFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //string documentId = null;
            //var response = instance.ListDocumentFields(accountId, templateId, documentId);
            //Assert.IsInstanceOf<DocumentFieldsInformation> (response, "response is DocumentFieldsInformation");
        }
        
        /// <summary>
        /// Test ListDocuments
        /// </summary>
        [Test]
        public void ListDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //var response = instance.ListDocuments(accountId, templateId);
            //Assert.IsInstanceOf<TemplateDocumentsResult> (response, "response is TemplateDocumentsResult");
        }
        
        /// <summary>
        /// Test ListRecipients
        /// </summary>
        [Test]
        public void ListRecipientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string includeAnchorTabLocations = null;
            //string includeExtended = null;
            //string includeTabs = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.ListRecipients(includeAnchorTabLocations, includeExtended, includeTabs, accountId, templateId);
            //Assert.IsInstanceOf<Recipients> (response, "response is Recipients");
        }
        
        /// <summary>
        /// Test ListTabs
        /// </summary>
        [Test]
        public void ListTabsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string includeAnchorTabLocations = null;
            //string includeMetadata = null;
            //string accountId = null;
            //string templateId = null;
            //string recipientId = null;
            //var response = instance.ListTabs(includeAnchorTabLocations, includeMetadata, accountId, templateId, recipientId);
            //Assert.IsInstanceOf<Tabs> (response, "response is Tabs");
        }
        
        /// <summary>
        /// Test ListTemplates
        /// </summary>
        [Test]
        public void ListTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string count = null;
            //string folder = null;
            //string folderIds = null;
            //string fromDate = null;
            //string include = null;
            //string order = null;
            //string orderBy = null;
            //string searchText = null;
            //string shared = null;
            //string sharedByMe = null;
            //string startPosition = null;
            //string toDate = null;
            //string usedFromDate = null;
            //string usedToDate = null;
            //string userFilter = null;
            //string accountId = null;
            //var response = instance.ListTemplates(count, folder, folderIds, fromDate, include, order, orderBy, searchText, shared, sharedByMe, startPosition, toDate, usedFromDate, usedToDate, userFilter, accountId);
            //Assert.IsInstanceOf<EnvelopeTemplateResults> (response, "response is EnvelopeTemplateResults");
        }
        
        /// <summary>
        /// Test RotateDocumentPage
        /// </summary>
        [Test]
        public void RotateDocumentPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PageRequest pageRequest = null;
            //string accountId = null;
            //string templateId = null;
            //string documentId = null;
            //string pageNumber = null;
            //instance.RotateDocumentPage(pageRequest, accountId, templateId, documentId, pageNumber);
            
        }
        
        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EnvelopeTemplate envelopeTemplate = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.Update(envelopeTemplate, accountId, templateId);
            //Assert.IsInstanceOf<TemplateUpdateSummary> (response, "response is TemplateUpdateSummary");
        }
        
        /// <summary>
        /// Test UpdateBulkRecipients
        /// </summary>
        [Test]
        public void UpdateBulkRecipientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BulkRecipientsRequest bulkRecipientsRequest = null;
            //string accountId = null;
            //string templateId = null;
            //string recipientId = null;
            //var response = instance.UpdateBulkRecipients(bulkRecipientsRequest, accountId, templateId, recipientId);
            //Assert.IsInstanceOf<BulkRecipientsSummaryResponse> (response, "response is BulkRecipientsSummaryResponse");
        }
        
        /// <summary>
        /// Test UpdateCustomFields
        /// </summary>
        [Test]
        public void UpdateCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateCustomFields templateCustomFields = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.UpdateCustomFields(templateCustomFields, accountId, templateId);
            //Assert.IsInstanceOf<CustomFields> (response, "response is CustomFields");
        }
        
        /// <summary>
        /// Test UpdateDocument
        /// </summary>
        [Test]
        public void UpdateDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applyDocumentFields = null;
            //string isEnvelopeDefinition = null;
            //EnvelopeDefinition envelopeDefinition = null;
            //string accountId = null;
            //string templateId = null;
            //string documentId = null;
            //var response = instance.UpdateDocument(applyDocumentFields, isEnvelopeDefinition, envelopeDefinition, accountId, templateId, documentId);
            //Assert.IsInstanceOf<EnvelopeDocument> (response, "response is EnvelopeDocument");
        }
        
        /// <summary>
        /// Test UpdateDocumentFields
        /// </summary>
        [Test]
        public void UpdateDocumentFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentFieldsInformation documentFieldsInformation = null;
            //string accountId = null;
            //string templateId = null;
            //string documentId = null;
            //var response = instance.UpdateDocumentFields(documentFieldsInformation, accountId, templateId, documentId);
            //Assert.IsInstanceOf<DocumentFieldsInformation> (response, "response is DocumentFieldsInformation");
        }
        
        /// <summary>
        /// Test UpdateDocuments
        /// </summary>
        [Test]
        public void UpdateDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applyDocumentFields = null;
            //EnvelopeDefinition envelopeDefinition = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.UpdateDocuments(applyDocumentFields, envelopeDefinition, accountId, templateId);
            //Assert.IsInstanceOf<TemplateDocumentsResult> (response, "response is TemplateDocumentsResult");
        }
        
        /// <summary>
        /// Test UpdateGroupShare
        /// </summary>
        [Test]
        public void UpdateGroupShareTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupInformation groupInformation = null;
            //string accountId = null;
            //string templateId = null;
            //string templatePart = null;
            //var response = instance.UpdateGroupShare(groupInformation, accountId, templateId, templatePart);
            //Assert.IsInstanceOf<GroupInformation> (response, "response is GroupInformation");
        }
        
        /// <summary>
        /// Test UpdateLock
        /// </summary>
        [Test]
        public void UpdateLockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LockRequest lockRequest = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.UpdateLock(lockRequest, accountId, templateId);
            //Assert.IsInstanceOf<LockInformation> (response, "response is LockInformation");
        }
        
        /// <summary>
        /// Test UpdateNotificationSettings
        /// </summary>
        [Test]
        public void UpdateNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateNotificationRequest templateNotificationRequest = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.UpdateNotificationSettings(templateNotificationRequest, accountId, templateId);
            //Assert.IsInstanceOf<Notification> (response, "response is Notification");
        }
        
        /// <summary>
        /// Test UpdateRecipients
        /// </summary>
        [Test]
        public void UpdateRecipientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resendEnvelope = null;
            //TemplateRecipients templateRecipients = null;
            //string accountId = null;
            //string templateId = null;
            //var response = instance.UpdateRecipients(resendEnvelope, templateRecipients, accountId, templateId);
            //Assert.IsInstanceOf<RecipientsUpdateSummary> (response, "response is RecipientsUpdateSummary");
        }
        
        /// <summary>
        /// Test UpdateTabs
        /// </summary>
        [Test]
        public void UpdateTabsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateTabs templateTabs = null;
            //string accountId = null;
            //string templateId = null;
            //string recipientId = null;
            //var response = instance.UpdateTabs(templateTabs, accountId, templateId, recipientId);
            //Assert.IsInstanceOf<Tabs> (response, "response is Tabs");
        }
        
    }

}
