/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using DocuSign.eSign.Client;
using DocuSign.eSign.Api;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Test
{
    /// <summary>
    ///  Class for testing AuthenticationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AuthenticationApiTests
    {
        private AuthenticationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AuthenticationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AuthenticationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AuthenticationApi
            //Assert.IsInstanceOfType(typeof(AuthenticationApi), instance, "instance is a AuthenticationApi");
        }

        
        /// <summary>
        /// Test DeleteSocialLogin
        /// </summary>
        [Test]
        public void DeleteSocialLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SocialAccountInformation socialAccountInformation = null;
            //string accountId = null;
            //string userId = null;
            //instance.DeleteSocialLogin(socialAccountInformation, accountId, userId);
            
        }
        
        /// <summary>
        /// Test GetOAuthToken
        /// </summary>
        [Test]
        public void GetOAuthTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOAuthToken();
            //Assert.IsInstanceOf<OauthAccess> (response, "response is OauthAccess");
        }
        
        /// <summary>
        /// Test ListSocialLogins
        /// </summary>
        [Test]
        public void ListSocialLoginsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //var response = instance.ListSocialLogins(accountId, userId);
            //Assert.IsInstanceOf<UserSocialIdResult> (response, "response is UserSocialIdResult");
        }
        
        /// <summary>
        /// Test Login
        /// </summary>
        [Test]
        public void LoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiPassword = null;
            //string embedAccountIdGuid = null;
            //string includeAccountIdGuid = null;
            //string loginSettings = null;
            //var response = instance.Login(apiPassword, embedAccountIdGuid, includeAccountIdGuid, loginSettings);
            //Assert.IsInstanceOf<LoginInformation> (response, "response is LoginInformation");
        }
        
        /// <summary>
        /// Test RevokeOAuthToken
        /// </summary>
        [Test]
        public void RevokeOAuthTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.RevokeOAuthToken();
            
        }
        
        /// <summary>
        /// Test UpdatePassword
        /// </summary>
        [Test]
        public void UpdatePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserPasswordInformation userPasswordInformation = null;
            //string loginPart = null;
            //instance.UpdatePassword(userPasswordInformation, loginPart);
            
        }
        
        /// <summary>
        /// Test UpdateSocialLogin
        /// </summary>
        [Test]
        public void UpdateSocialLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SocialAccountInformation socialAccountInformation = null;
            //string accountId = null;
            //string userId = null;
            //instance.UpdateSocialLogin(socialAccountInformation, accountId, userId);
            
        }
        
    }

}
