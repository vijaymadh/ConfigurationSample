/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using DocuSign.eSign.Client;
using DocuSign.eSign.Api;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsInstanceOfType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test Create
        /// </summary>
        [Test]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewUsersDefinition newUsersDefinition = null;
            //string accountId = null;
            //var response = instance.Create(newUsersDefinition, accountId);
            //Assert.IsInstanceOf<NewUsersSummary> (response, "response is NewUsersSummary");
        }
        
        /// <summary>
        /// Test CreateSignatures
        /// </summary>
        [Test]
        public void CreateSignaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserSignaturesInformation userSignaturesInformation = null;
            //string accountId = null;
            //string userId = null;
            //var response = instance.CreateSignatures(userSignaturesInformation, accountId, userId);
            //Assert.IsInstanceOf<UserSignaturesInformation> (response, "response is UserSignaturesInformation");
        }
        
        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserInfoList userInfoList = null;
            //string accountId = null;
            //var response = instance.Delete(userInfoList, accountId);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
        /// <summary>
        /// Test DeleteContactWithId
        /// </summary>
        [Test]
        public void DeleteContactWithIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string contactId = null;
            //var response = instance.DeleteContactWithId(accountId, contactId);
            //Assert.IsInstanceOf<ContactUpdateResponse> (response, "response is ContactUpdateResponse");
        }
        
        /// <summary>
        /// Test DeleteContacts
        /// </summary>
        [Test]
        public void DeleteContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ContactModRequest contactModRequest = null;
            //string accountId = null;
            //var response = instance.DeleteContacts(contactModRequest, accountId);
            //Assert.IsInstanceOf<ContactUpdateResponse> (response, "response is ContactUpdateResponse");
        }
        
        /// <summary>
        /// Test DeleteCustomSettings
        /// </summary>
        [Test]
        public void DeleteCustomSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CustomSettingsInformation customSettingsInformation = null;
            //string accountId = null;
            //string userId = null;
            //var response = instance.DeleteCustomSettings(customSettingsInformation, accountId, userId);
            //Assert.IsInstanceOf<CustomSettingsInformation> (response, "response is CustomSettingsInformation");
        }
        
        /// <summary>
        /// Test DeleteProfileImage
        /// </summary>
        [Test]
        public void DeleteProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //instance.DeleteProfileImage(accountId, userId);
            
        }
        
        /// <summary>
        /// Test DeleteSignature
        /// </summary>
        [Test]
        public void DeleteSignatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //string signatureId = null;
            //instance.DeleteSignature(accountId, userId, signatureId);
            
        }
        
        /// <summary>
        /// Test DeleteSignatureImage
        /// </summary>
        [Test]
        public void DeleteSignatureImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //string signatureId = null;
            //string imageType = null;
            //var response = instance.DeleteSignatureImage(accountId, userId, signatureId, imageType);
            //Assert.IsInstanceOf<UserSignature> (response, "response is UserSignature");
        }
        
        /// <summary>
        /// Test GetContactById
        /// </summary>
        [Test]
        public void GetContactByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string contactId = null;
            //var response = instance.GetContactById(accountId, contactId);
            //Assert.IsInstanceOf<ContactGetResponse> (response, "response is ContactGetResponse");
        }
        
        /// <summary>
        /// Test GetInformation
        /// </summary>
        [Test]
        public void GetInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string additionalInfo = null;
            //string email = null;
            //string accountId = null;
            //string userId = null;
            //var response = instance.GetInformation(additionalInfo, email, accountId, userId);
            //Assert.IsInstanceOf<UserInformation> (response, "response is UserInformation");
        }
        
        /// <summary>
        /// Test GetProfile
        /// </summary>
        [Test]
        public void GetProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //var response = instance.GetProfile(accountId, userId);
            //Assert.IsInstanceOf<UserProfile> (response, "response is UserProfile");
        }
        
        /// <summary>
        /// Test GetProfileImage
        /// </summary>
        [Test]
        public void GetProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string encoding = null;
            //string accountId = null;
            //string userId = null;
            //var response = instance.GetProfileImage(encoding, accountId, userId);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetSettings
        /// </summary>
        [Test]
        public void GetSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //var response = instance.GetSettings(accountId, userId);
            //Assert.IsInstanceOf<UserSettingsInformation> (response, "response is UserSettingsInformation");
        }
        
        /// <summary>
        /// Test GetSignature
        /// </summary>
        [Test]
        public void GetSignatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //string signatureId = null;
            //var response = instance.GetSignature(accountId, userId, signatureId);
            //Assert.IsInstanceOf<UserSignature> (response, "response is UserSignature");
        }
        
        /// <summary>
        /// Test GetSignatureImage
        /// </summary>
        [Test]
        public void GetSignatureImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string includeChrome = null;
            //string accountId = null;
            //string userId = null;
            //string signatureId = null;
            //string imageType = null;
            //var response = instance.GetSignatureImage(includeChrome, accountId, userId, signatureId, imageType);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test List
        /// </summary>
        [Test]
        public void ListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string additionalInfo = null;
            //string count = null;
            //string email = null;
            //string emailSubstring = null;
            //string groupId = null;
            //string includeUsersettingsForCsv = null;
            //string loginStatus = null;
            //string notGroupId = null;
            //string startPosition = null;
            //string status = null;
            //string userNameSubstring = null;
            //string accountId = null;
            //var response = instance.List(additionalInfo, count, email, emailSubstring, groupId, includeUsersettingsForCsv, loginStatus, notGroupId, startPosition, status, userNameSubstring, accountId);
            //Assert.IsInstanceOf<UserInformationList> (response, "response is UserInformationList");
        }
        
        /// <summary>
        /// Test ListCustomSettings
        /// </summary>
        [Test]
        public void ListCustomSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //var response = instance.ListCustomSettings(accountId, userId);
            //Assert.IsInstanceOf<CustomSettingsInformation> (response, "response is CustomSettingsInformation");
        }
        
        /// <summary>
        /// Test ListSignatures
        /// </summary>
        [Test]
        public void ListSignaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //var response = instance.ListSignatures(accountId, userId);
            //Assert.IsInstanceOf<UserSignaturesInformation> (response, "response is UserSignaturesInformation");
        }
        
        /// <summary>
        /// Test PostContacts
        /// </summary>
        [Test]
        public void PostContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ContactModRequest contactModRequest = null;
            //string accountId = null;
            //var response = instance.PostContacts(contactModRequest, accountId);
            //Assert.IsInstanceOf<ContactUpdateResponse> (response, "response is ContactUpdateResponse");
        }
        
        /// <summary>
        /// Test PutContacts
        /// </summary>
        [Test]
        public void PutContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ContactModRequest contactModRequest = null;
            //string accountId = null;
            //var response = instance.PutContacts(contactModRequest, accountId);
            //Assert.IsInstanceOf<ContactUpdateResponse> (response, "response is ContactUpdateResponse");
        }
        
        /// <summary>
        /// Test UpdateCustomSettings
        /// </summary>
        [Test]
        public void UpdateCustomSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CustomSettingsInformation customSettingsInformation = null;
            //string accountId = null;
            //string userId = null;
            //var response = instance.UpdateCustomSettings(customSettingsInformation, accountId, userId);
            //Assert.IsInstanceOf<CustomSettingsInformation> (response, "response is CustomSettingsInformation");
        }
        
        /// <summary>
        /// Test UpdateProfile
        /// </summary>
        [Test]
        public void UpdateProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserProfile userProfile = null;
            //string accountId = null;
            //string userId = null;
            //instance.UpdateProfile(userProfile, accountId, userId);
            
        }
        
        /// <summary>
        /// Test UpdateProfileImage
        /// </summary>
        [Test]
        public void UpdateProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //instance.UpdateProfileImage(accountId, userId);
            
        }
        
        /// <summary>
        /// Test UpdateSettings
        /// </summary>
        [Test]
        public void UpdateSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserSettingsInformation userSettingsInformation = null;
            //string accountId = null;
            //string userId = null;
            //instance.UpdateSettings(userSettingsInformation, accountId, userId);
            
        }
        
        /// <summary>
        /// Test UpdateSignature
        /// </summary>
        [Test]
        public void UpdateSignatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string closeExistingSignature = null;
            //UserSignatureDefinition userSignatureDefinition = null;
            //string accountId = null;
            //string userId = null;
            //string signatureId = null;
            //var response = instance.UpdateSignature(closeExistingSignature, userSignatureDefinition, accountId, userId, signatureId);
            //Assert.IsInstanceOf<UserSignature> (response, "response is UserSignature");
        }
        
        /// <summary>
        /// Test UpdateSignatureImage
        /// </summary>
        [Test]
        public void UpdateSignatureImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //string signatureId = null;
            //string imageType = null;
            //var response = instance.UpdateSignatureImage(accountId, userId, signatureId, imageType);
            //Assert.IsInstanceOf<UserSignature> (response, "response is UserSignature");
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserInformation userInformation = null;
            //string accountId = null;
            //string userId = null;
            //var response = instance.UpdateUser(userInformation, accountId, userId);
            //Assert.IsInstanceOf<UserInformation> (response, "response is UserInformation");
        }
        
        /// <summary>
        /// Test UpdateUsers
        /// </summary>
        [Test]
        public void UpdateUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserInformationList userInformationList = null;
            //string accountId = null;
            //var response = instance.UpdateUsers(userInformationList, accountId);
            //Assert.IsInstanceOf<UserInformationList> (response, "response is UserInformationList");
        }
        
    }

}
