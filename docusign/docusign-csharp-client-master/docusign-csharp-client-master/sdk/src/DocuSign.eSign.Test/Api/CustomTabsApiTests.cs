/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using DocuSign.eSign.Client;
using DocuSign.eSign.Api;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Test
{
    /// <summary>
    ///  Class for testing CustomTabsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CustomTabsApiTests
    {
        private CustomTabsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CustomTabsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CustomTabsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CustomTabsApi
            //Assert.IsInstanceOfType(typeof(CustomTabsApi), instance, "instance is a CustomTabsApi");
        }

        
        /// <summary>
        /// Test Create
        /// </summary>
        [Test]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TabMetadata tabMetadata = null;
            //string accountId = null;
            //var response = instance.Create(tabMetadata, accountId);
            //Assert.IsInstanceOf<TabMetadata> (response, "response is TabMetadata");
        }
        
        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string customTabId = null;
            //instance.Delete(accountId, customTabId);
            
        }
        
        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string customTabId = null;
            //var response = instance.Get(accountId, customTabId);
            //Assert.IsInstanceOf<TabMetadata> (response, "response is TabMetadata");
        }
        
        /// <summary>
        /// Test List
        /// </summary>
        [Test]
        public void ListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customTabOnly = null;
            //string accountId = null;
            //var response = instance.List(customTabOnly, accountId);
            //Assert.IsInstanceOf<TabMetadataList> (response, "response is TabMetadataList");
        }
        
        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TabMetadata tabMetadata = null;
            //string accountId = null;
            //string customTabId = null;
            //var response = instance.Update(tabMetadata, accountId, customTabId);
            //Assert.IsInstanceOf<TabMetadata> (response, "response is TabMetadata");
        }
        
    }

}
